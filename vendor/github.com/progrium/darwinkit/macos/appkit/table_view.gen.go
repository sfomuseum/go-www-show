// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"unsafe"

	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// The class instance for the [TableView] class.
var TableViewClass = _TableViewClass{objc.GetClass("NSTableView")}

type _TableViewClass struct {
	objc.Class
}

// An interface definition for the [TableView] class.
type ITableView interface {
	IControl
	NoteNumberOfRowsChanged()
	Tile()
	RegisterNibForIdentifier(nib INib, identifier UserInterfaceItemIdentifier)
	DragImageForRowsWithIndexesTableColumnsEventOffset(dragRows foundation.IIndexSet, tableColumns []ITableColumn, dragEvent IEvent, dragImageOffset foundation.PointPointer) Image
	MoveRowAtIndexToIndex(oldIndex int, newIndex int)
	MoveColumnToColumn(oldIndex int, newIndex int)
	IndicatorImageInTableColumn(tableColumn ITableColumn) Image
	ColumnIndexesInRect(rect foundation.Rect) foundation.IndexSet
	DidRemoveRowViewForRow(rowView ITableRowView, row int)
	DidAddRowViewForRow(rowView ITableRowView, row int)
	DeselectAll(sender objc.IObject)
	RectOfColumn(column int) foundation.Rect
	NoteHeightOfRowsWithIndexesChanged(indexSet foundation.IIndexSet)
	EndUpdates()
	ColumnWithIdentifier(identifier UserInterfaceItemIdentifier) int
	EnumerateAvailableRowViewsUsingBlock(handler func(rowView TableRowView, row int))
	DrawRowClipRect(row int, clipRect foundation.Rect)
	RowsInRect(rect foundation.Rect) foundation.Range
	ReloadDataForRowIndexesColumnIndexes(rowIndexes foundation.IIndexSet, columnIndexes foundation.IIndexSet)
	InsertRowsAtIndexesWithAnimation(indexes foundation.IIndexSet, animationOptions TableViewAnimationOptions)
	HighlightSelectionInClipRect(clipRect foundation.Rect)
	ReloadData()
	RowViewAtRowMakeIfNecessary(row int, makeIfNecessary bool) TableRowView
	SelectRowIndexesByExtendingSelection(indexes foundation.IIndexSet, extend bool)
	TableColumnWithIdentifier(identifier UserInterfaceItemIdentifier) TableColumn
	RemoveRowsAtIndexesWithAnimation(indexes foundation.IIndexSet, animationOptions TableViewAnimationOptions)
	HideRowsAtIndexesWithAnimation(indexes foundation.IIndexSet, rowAnimation TableViewAnimationOptions)
	ViewAtColumnRowMakeIfNecessary(column int, row int, makeIfNecessary bool) View
	IsColumnSelected(column int) bool
	MakeViewWithIdentifierOwner(identifier UserInterfaceItemIdentifier, owner objc.IObject) View
	DeselectRow(row int)
	DrawGridInClipRect(clipRect foundation.Rect)
	SelectAll(sender objc.IObject)
	SelectColumnIndexesByExtendingSelection(indexes foundation.IIndexSet, extend bool)
	RowForView(view IView) int
	SetIndicatorImageInTableColumn(image IImage, tableColumn ITableColumn)
	AddTableColumn(tableColumn ITableColumn)
	DrawBackgroundInClipRect(clipRect foundation.Rect)
	RowAtPoint(point foundation.Point) int
	UnhideRowsAtIndexesWithAnimation(indexes foundation.IIndexSet, rowAnimation TableViewAnimationOptions)
	EditColumnRowWithEventSelect(column int, row int, event IEvent, select_ bool)
	BeginUpdates()
	FrameOfCellAtColumnRow(column int, row int) foundation.Rect
	IsRowSelected(row int) bool
	ColumnAtPoint(point foundation.Point) int
	SizeLastColumnToFit()
	ScrollRowToVisible(row int)
	RectOfRow(row int) foundation.Rect
	ColumnForView(view IView) int
	ScrollColumnToVisible(column int)
	CanDragRowsWithIndexesAtPoint(rowIndexes foundation.IIndexSet, mouseDownPoint foundation.Point) bool
	SetDropRowDropOperation(row int, dropOperation TableViewDropOperation)
	RemoveTableColumn(tableColumn ITableColumn)
	DeselectColumn(column int)
	SetDraggingSourceOperationMaskForLocal(mask DragOperation, isLocal bool)
	SelectionHighlightStyle() TableViewSelectionHighlightStyle
	SetSelectionHighlightStyle(value TableViewSelectionHighlightStyle)
	GridStyleMask() TableViewGridLineStyle
	SetGridStyleMask(value TableViewGridLineStyle)
	SelectedRowIndexes() foundation.IndexSet
	EffectiveStyle() TableViewStyle
	SelectedRow() int
	Delegate() TableViewDelegateObject
	SetDelegate(value PTableViewDelegate)
	SetDelegateObject(valueObject objc.IObject)
	SelectedColumnIndexes() foundation.IndexSet
	HeaderView() TableHeaderView
	SetHeaderView(value ITableHeaderView)
	VerticalMotionCanBeginDrag() bool
	SetVerticalMotionCanBeginDrag(value bool)
	NumberOfRows() int
	UsesStaticContents() bool
	SetUsesStaticContents(value bool)
	RowActionsVisible() bool
	SetRowActionsVisible(value bool)
	FloatsGroupRows() bool
	SetFloatsGroupRows(value bool)
	BackgroundColor() Color
	SetBackgroundColor(value IColor)
	UsesAlternatingRowBackgroundColors() bool
	SetUsesAlternatingRowBackgroundColors(value bool)
	HiddenRowIndexes() foundation.IndexSet
	AllowsColumnResizing() bool
	SetAllowsColumnResizing(value bool)
	ColumnAutoresizingStyle() TableViewColumnAutoresizingStyle
	SetColumnAutoresizingStyle(value TableViewColumnAutoresizingStyle)
	AutosaveTableColumns() bool
	SetAutosaveTableColumns(value bool)
	IntercellSpacing() foundation.Size
	SetIntercellSpacing(value foundation.Size)
	AllowsMultipleSelection() bool
	SetAllowsMultipleSelection(value bool)
	EditedRow() int
	RowHeight() float64
	SetRowHeight(value float64)
	DataSource() TableViewDataSourceObject
	SetDataSource(value PTableViewDataSource)
	SetDataSourceObject(valueObject objc.IObject)
	AllowsTypeSelect() bool
	SetAllowsTypeSelect(value bool)
	HighlightedTableColumn() TableColumn
	SetHighlightedTableColumn(value ITableColumn)
	ClickedRow() int
	ClickedColumn() int
	DraggingDestinationFeedbackStyle() TableViewDraggingDestinationFeedbackStyle
	SetDraggingDestinationFeedbackStyle(value TableViewDraggingDestinationFeedbackStyle)
	AllowsEmptySelection() bool
	SetAllowsEmptySelection(value bool)
	NumberOfSelectedRows() int
	NumberOfColumns() int
	SelectedColumn() int
	Style() TableViewStyle
	SetStyle(value TableViewStyle)
	TableColumns() []TableColumn
	UsesAutomaticRowHeights() bool
	SetUsesAutomaticRowHeights(value bool)
	NumberOfSelectedColumns() int
	RegisteredNibsByIdentifier() map[UserInterfaceItemIdentifier]Nib
	EditedColumn() int
	RowSizeStyle() TableViewRowSizeStyle
	SetRowSizeStyle(value TableViewRowSizeStyle)
	EffectiveRowSizeStyle() TableViewRowSizeStyle
	DoubleAction() objc.Selector
	SetDoubleAction(value objc.Selector)
	GridColor() Color
	SetGridColor(value IColor)
	AllowsColumnReordering() bool
	SetAllowsColumnReordering(value bool)
	SortDescriptors() []foundation.SortDescriptor
	SetSortDescriptors(value []foundation.ISortDescriptor)
	AutosaveName() TableViewAutosaveName
	SetAutosaveName(value TableViewAutosaveName)
	CornerView() View
	SetCornerView(value IView)
	AllowsColumnSelection() bool
	SetAllowsColumnSelection(value bool)
}

// A set of related records, displayed in rows that represent individual records and columns that represent the attributes of those records. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview?language=objc
type TableView struct {
	Control
}

func TableViewFrom(ptr unsafe.Pointer) TableView {
	return TableView{
		Control: ControlFrom(ptr),
	}
}

func (t_ TableView) InitWithFrame(frameRect foundation.Rect) TableView {
	rv := objc.Call[TableView](t_, objc.Sel("initWithFrame:"), frameRect)
	return rv
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525511-initwithframe?language=objc
func NewTableViewWithFrame(frameRect foundation.Rect) TableView {
	instance := TableViewClass.Alloc().InitWithFrame(frameRect)
	instance.Autorelease()
	return instance
}

func (tc _TableViewClass) Alloc() TableView {
	rv := objc.Call[TableView](tc, objc.Sel("alloc"))
	return rv
}

func (tc _TableViewClass) New() TableView {
	rv := objc.Call[TableView](tc, objc.Sel("new"))
	rv.Autorelease()
	return rv
}

func NewTableView() TableView {
	return TableViewClass.New()
}

func (t_ TableView) Init() TableView {
	rv := objc.Call[TableView](t_, objc.Sel("init"))
	return rv
}

// Informs the table view that the number of records in its data source has changed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534147-notenumberofrowschanged?language=objc
func (t_ TableView) NoteNumberOfRowsChanged() {
	objc.Call[objc.Void](t_, objc.Sel("noteNumberOfRowsChanged"))
}

// Properly sizes the table view and its header view and marks it as needing display. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528077-tile?language=objc
func (t_ TableView) Tile() {
	objc.Call[objc.Void](t_, objc.Sel("tile"))
}

// Registers a NIB for the specified identifier, so that view-based table views can use it to instantiate views. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524297-registernib?language=objc
func (t_ TableView) RegisterNibForIdentifier(nib INib, identifier UserInterfaceItemIdentifier) {
	objc.Call[objc.Void](t_, objc.Sel("registerNib:forIdentifier:"), nib, identifier)
}

// Computes and returns an image to use for dragging. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526541-dragimageforrowswithindexes?language=objc
func (t_ TableView) DragImageForRowsWithIndexesTableColumnsEventOffset(dragRows foundation.IIndexSet, tableColumns []ITableColumn, dragEvent IEvent, dragImageOffset foundation.PointPointer) Image {
	rv := objc.Call[Image](t_, objc.Sel("dragImageForRowsWithIndexes:tableColumns:event:offset:"), dragRows, tableColumns, dragEvent, dragImageOffset)
	return rv
}

// Moves the specified row to the new row location using animation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535835-moverowatindex?language=objc
func (t_ TableView) MoveRowAtIndexToIndex(oldIndex int, newIndex int) {
	objc.Call[objc.Void](t_, objc.Sel("moveRowAtIndex:toIndex:"), oldIndex, newIndex)
}

// Moves the column and heading at the specified index to the new specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1530719-movecolumn?language=objc
func (t_ TableView) MoveColumnToColumn(oldIndex int, newIndex int) {
	objc.Call[objc.Void](t_, objc.Sel("moveColumn:toColumn:"), oldIndex, newIndex)
}

// Returns the indicator image of the specified table column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524846-indicatorimageintablecolumn?language=objc
func (t_ TableView) IndicatorImageInTableColumn(tableColumn ITableColumn) Image {
	rv := objc.Call[Image](t_, objc.Sel("indicatorImageInTableColumn:"), tableColumn)
	return rv
}

// Returns the indexes of the table view’s columns that intersect the specified rectangle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526013-columnindexesinrect?language=objc
func (t_ TableView) ColumnIndexesInRect(rect foundation.Rect) foundation.IndexSet {
	rv := objc.Call[foundation.IndexSet](t_, objc.Sel("columnIndexesInRect:"), rect)
	return rv
}

// Invoked when a row view is removed from the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532903-didremoverowview?language=objc
func (t_ TableView) DidRemoveRowViewForRow(rowView ITableRowView, row int) {
	objc.Call[objc.Void](t_, objc.Sel("didRemoveRowView:forRow:"), rowView, row)
}

// Invoked when a row view is added to the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534008-didaddrowview?language=objc
func (t_ TableView) DidAddRowViewForRow(rowView ITableRowView, row int) {
	objc.Call[objc.Void](t_, objc.Sel("didAddRowView:forRow:"), rowView, row)
}

// Deselects all selected rows or columns if empty selection is allowed; otherwise does nothing. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1533302-deselectall?language=objc
func (t_ TableView) DeselectAll(sender objc.IObject) {
	objc.Call[objc.Void](t_, objc.Sel("deselectAll:"), sender)
}

// Returns the rectangle containing the column at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1531546-rectofcolumn?language=objc
func (t_ TableView) RectOfColumn(column int) foundation.Rect {
	rv := objc.Call[foundation.Rect](t_, objc.Sel("rectOfColumn:"), column)
	return rv
}

// Informs the table view that the rows specified in indexSet have changed height. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532126-noteheightofrowswithindexeschang?language=objc
func (t_ TableView) NoteHeightOfRowsWithIndexesChanged(indexSet foundation.IIndexSet) {
	objc.Call[objc.Void](t_, objc.Sel("noteHeightOfRowsWithIndexesChanged:"), indexSet)
}

// Ends the group of updates for the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526267-endupdates?language=objc
func (t_ TableView) EndUpdates() {
	objc.Call[objc.Void](t_, objc.Sel("endUpdates"))
}

// Returns the index of the first column in the table view whose identifier is equal to the specified identifier. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526734-columnwithidentifier?language=objc
func (t_ TableView) ColumnWithIdentifier(identifier UserInterfaceItemIdentifier) int {
	rv := objc.Call[int](t_, objc.Sel("columnWithIdentifier:"), identifier)
	return rv
}

// Allows the enumeration of all the table rows that are known to the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532750-enumerateavailablerowviewsusingb?language=objc
func (t_ TableView) EnumerateAvailableRowViewsUsingBlock(handler func(rowView TableRowView, row int)) {
	objc.Call[objc.Void](t_, objc.Sel("enumerateAvailableRowViewsUsingBlock:"), handler)
}

// Draws the cells for the row at rowIndex in the columns that intersect clipRect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1533711-drawrow?language=objc
func (t_ TableView) DrawRowClipRect(row int, clipRect foundation.Rect) {
	objc.Call[objc.Void](t_, objc.Sel("drawRow:clipRect:"), row, clipRect)
}

// Returns a range of indexes for the rows that lie wholly or partially within the vertical boundaries of the specified rectangle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525344-rowsinrect?language=objc
func (t_ TableView) RowsInRect(rect foundation.Rect) foundation.Range {
	rv := objc.Call[foundation.Range](t_, objc.Sel("rowsInRect:"), rect)
	return rv
}

// Reloads the data for only the specified rows and columns. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527621-reloaddataforrowindexes?language=objc
func (t_ TableView) ReloadDataForRowIndexesColumnIndexes(rowIndexes foundation.IIndexSet, columnIndexes foundation.IIndexSet) {
	objc.Call[objc.Void](t_, objc.Sel("reloadDataForRowIndexes:columnIndexes:"), rowIndexes, columnIndexes)
}

// Inserts the rows using the specified animation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532406-insertrowsatindexes?language=objc
func (t_ TableView) InsertRowsAtIndexesWithAnimation(indexes foundation.IIndexSet, animationOptions TableViewAnimationOptions) {
	objc.Call[objc.Void](t_, objc.Sel("insertRowsAtIndexes:withAnimation:"), indexes, animationOptions)
}

// Highlights the region of the table view in the specified rectangle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1530758-highlightselectionincliprect?language=objc
func (t_ TableView) HighlightSelectionInClipRect(clipRect foundation.Rect) {
	objc.Call[objc.Void](t_, objc.Sel("highlightSelectionInClipRect:"), clipRect)
}

// Marks the table view as needing redisplay, so it will reload the data for visible cells and draw the new values. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528382-reloaddata?language=objc
func (t_ TableView) ReloadData() {
	objc.Call[objc.Void](t_, objc.Sel("reloadData"))
}

// Returns a row view at the specified index, creating one if necessary. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525162-rowviewatrow?language=objc
func (t_ TableView) RowViewAtRowMakeIfNecessary(row int, makeIfNecessary bool) TableRowView {
	rv := objc.Call[TableRowView](t_, objc.Sel("rowViewAtRow:makeIfNecessary:"), row, makeIfNecessary)
	return rv
}

// Sets the row selection using indexes extending the selection if specified. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1529688-selectrowindexes?language=objc
func (t_ TableView) SelectRowIndexesByExtendingSelection(indexes foundation.IIndexSet, extend bool) {
	objc.Call[objc.Void](t_, objc.Sel("selectRowIndexes:byExtendingSelection:"), indexes, extend)
}

// Returns the NSTableColumn object for the first column whose identifier is equal to the specified object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1531134-tablecolumnwithidentifier?language=objc
func (t_ TableView) TableColumnWithIdentifier(identifier UserInterfaceItemIdentifier) TableColumn {
	rv := objc.Call[TableColumn](t_, objc.Sel("tableColumnWithIdentifier:"), identifier)
	return rv
}

// Removes the rows using the specified animation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524655-removerowsatindexes?language=objc
func (t_ TableView) RemoveRowsAtIndexesWithAnimation(indexes foundation.IIndexSet, animationOptions TableViewAnimationOptions) {
	objc.Call[objc.Void](t_, objc.Sel("removeRowsAtIndexes:withAnimation:"), indexes, animationOptions)
}

// Hides the specified table rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534141-hiderowsatindexes?language=objc
func (t_ TableView) HideRowsAtIndexesWithAnimation(indexes foundation.IIndexSet, rowAnimation TableViewAnimationOptions) {
	objc.Call[objc.Void](t_, objc.Sel("hideRowsAtIndexes:withAnimation:"), indexes, rowAnimation)
}

// Returns a view at the specified row and column indexes, creating one if necessary. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528831-viewatcolumn?language=objc
func (t_ TableView) ViewAtColumnRowMakeIfNecessary(column int, row int, makeIfNecessary bool) View {
	rv := objc.Call[View](t_, objc.Sel("viewAtColumn:row:makeIfNecessary:"), column, row, makeIfNecessary)
	return rv
}

// Returns a Boolean value that indicates whether the column at the specified index is selected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524306-iscolumnselected?language=objc
func (t_ TableView) IsColumnSelected(column int) bool {
	rv := objc.Call[bool](t_, objc.Sel("isColumnSelected:"), column)
	return rv
}

// Returns a new or existing view with the specified identifier. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535482-makeviewwithidentifier?language=objc
func (t_ TableView) MakeViewWithIdentifierOwner(identifier UserInterfaceItemIdentifier, owner objc.IObject) View {
	rv := objc.Call[View](t_, objc.Sel("makeViewWithIdentifier:owner:"), identifier, owner)
	return rv
}

// Deselects the row at the specified index if it’s selected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532722-deselectrow?language=objc
func (t_ TableView) DeselectRow(row int) {
	objc.Call[objc.Void](t_, objc.Sel("deselectRow:"), row)
}

// Draws the grid lines within the supplied rectangle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527006-drawgridincliprect?language=objc
func (t_ TableView) DrawGridInClipRect(clipRect foundation.Rect) {
	objc.Call[objc.Void](t_, objc.Sel("drawGridInClipRect:"), clipRect)
}

// Selects all rows or all columns, according to whether rows or columns were most recently selected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534002-selectall?language=objc
func (t_ TableView) SelectAll(sender objc.IObject) {
	objc.Call[objc.Void](t_, objc.Sel("selectAll:"), sender)
}

// Sets the column selection using indexes possibly extending the selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524416-selectcolumnindexes?language=objc
func (t_ TableView) SelectColumnIndexesByExtendingSelection(indexes foundation.IIndexSet, extend bool) {
	objc.Call[objc.Void](t_, objc.Sel("selectColumnIndexes:byExtendingSelection:"), indexes, extend)
}

// Returns the index of the row for the specified view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526732-rowforview?language=objc
func (t_ TableView) RowForView(view IView) int {
	rv := objc.Call[int](t_, objc.Sel("rowForView:"), view)
	return rv
}

// Sets the indicator image of the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534381-setindicatorimage?language=objc
func (t_ TableView) SetIndicatorImageInTableColumn(image IImage, tableColumn ITableColumn) {
	objc.Call[objc.Void](t_, objc.Sel("setIndicatorImage:inTableColumn:"), image, tableColumn)
}

// Adds the specified column as the last column of the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534098-addtablecolumn?language=objc
func (t_ TableView) AddTableColumn(tableColumn ITableColumn) {
	objc.Call[objc.Void](t_, objc.Sel("addTableColumn:"), tableColumn)
}

// Draws the background of the table view in the clip rect specified by the rectangle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528866-drawbackgroundincliprect?language=objc
func (t_ TableView) DrawBackgroundInClipRect(clipRect foundation.Rect) {
	objc.Call[objc.Void](t_, objc.Sel("drawBackgroundInClipRect:"), clipRect)
}

// Returns the index of the row the specified point lies in. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1530884-rowatpoint?language=objc
func (t_ TableView) RowAtPoint(point foundation.Point) int {
	rv := objc.Call[int](t_, objc.Sel("rowAtPoint:"), point)
	return rv
}

// Unhides the specified table rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527447-unhiderowsatindexes?language=objc
func (t_ TableView) UnhideRowsAtIndexesWithAnimation(indexes foundation.IIndexSet, rowAnimation TableViewAnimationOptions) {
	objc.Call[objc.Void](t_, objc.Sel("unhideRowsAtIndexes:withAnimation:"), indexes, rowAnimation)
}

// Edits the cell at the specified column and row using the specified event and selection behavior. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526295-editcolumn?language=objc
func (t_ TableView) EditColumnRowWithEventSelect(column int, row int, event IEvent, select_ bool) {
	objc.Call[objc.Void](t_, objc.Sel("editColumn:row:withEvent:select:"), column, row, event, select_)
}

// Begins a group of updates for the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527288-beginupdates?language=objc
func (t_ TableView) BeginUpdates() {
	objc.Call[objc.Void](t_, objc.Sel("beginUpdates"))
}

// Returns a rectangle locating the cell that lies at the intersection of the specified column and row. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524517-frameofcellatcolumn?language=objc
func (t_ TableView) FrameOfCellAtColumnRow(column int, row int) foundation.Rect {
	rv := objc.Call[foundation.Rect](t_, objc.Sel("frameOfCellAtColumn:row:"), column, row)
	return rv
}

// Returns a Boolean value that indicates whether the row at the specified index is selected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525882-isrowselected?language=objc
func (t_ TableView) IsRowSelected(row int) bool {
	rv := objc.Call[bool](t_, objc.Sel("isRowSelected:"), row)
	return rv
}

// Returns the index of the column the specified point lies in. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527504-columnatpoint?language=objc
func (t_ TableView) ColumnAtPoint(point foundation.Point) int {
	rv := objc.Call[int](t_, objc.Sel("columnAtPoint:"), point)
	return rv
}

// Resizes the last column so the table view fits exactly within its enclosing clip view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525859-sizelastcolumntofit?language=objc
func (t_ TableView) SizeLastColumnToFit() {
	objc.Call[objc.Void](t_, objc.Sel("sizeLastColumnToFit"))
}

// Scrolls the view so the specified row is visible. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1529902-scrollrowtovisible?language=objc
func (t_ TableView) ScrollRowToVisible(row int) {
	objc.Call[objc.Void](t_, objc.Sel("scrollRowToVisible:"), row)
}

// Returns the rectangle containing the row at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532948-rectofrow?language=objc
func (t_ TableView) RectOfRow(row int) foundation.Rect {
	rv := objc.Call[foundation.Rect](t_, objc.Sel("rectOfRow:"), row)
	return rv
}

// Returns the column index for the specified view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1529415-columnforview?language=objc
func (t_ TableView) ColumnForView(view IView) int {
	rv := objc.Call[int](t_, objc.Sel("columnForView:"), view)
	return rv
}

// Scrolls the view so the specified column is visible. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535570-scrollcolumntovisible?language=objc
func (t_ TableView) ScrollColumnToVisible(column int) {
	objc.Call[objc.Void](t_, objc.Sel("scrollColumnToVisible:"), column)
}

// Returns a Boolean value indicating whether the table view allows dragging the rows with the drag initiated at the specified point. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524273-candragrowswithindexes?language=objc
func (t_ TableView) CanDragRowsWithIndexesAtPoint(rowIndexes foundation.IIndexSet, mouseDownPoint foundation.Point) bool {
	rv := objc.Call[bool](t_, objc.Sel("canDragRowsWithIndexes:atPoint:"), rowIndexes, mouseDownPoint)
	return rv
}

// Retargets the proposed drop operation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535123-setdroprow?language=objc
func (t_ TableView) SetDropRowDropOperation(row int, dropOperation TableViewDropOperation) {
	objc.Call[objc.Void](t_, objc.Sel("setDropRow:dropOperation:"), row, dropOperation)
}

// Removes the specified column from the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535381-removetablecolumn?language=objc
func (t_ TableView) RemoveTableColumn(tableColumn ITableColumn) {
	objc.Call[objc.Void](t_, objc.Sel("removeTableColumn:"), tableColumn)
}

// Deselects the column at the specified index if it’s selected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525334-deselectcolumn?language=objc
func (t_ TableView) DeselectColumn(column int) {
	objc.Call[objc.Void](t_, objc.Sel("deselectColumn:"), column)
}

// Sets the default operation mask returned by draggingSourceOperationMaskForLocal: to mask. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527199-setdraggingsourceoperationmask?language=objc
func (t_ TableView) SetDraggingSourceOperationMaskForLocal(mask DragOperation, isLocal bool) {
	objc.Call[objc.Void](t_, objc.Sel("setDraggingSourceOperationMask:forLocal:"), mask, isLocal)
}

// The selection highlight style used by the table view to indicate row and column selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526311-selectionhighlightstyle?language=objc
func (t_ TableView) SelectionHighlightStyle() TableViewSelectionHighlightStyle {
	rv := objc.Call[TableViewSelectionHighlightStyle](t_, objc.Sel("selectionHighlightStyle"))
	return rv
}

// The selection highlight style used by the table view to indicate row and column selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526311-selectionhighlightstyle?language=objc
func (t_ TableView) SetSelectionHighlightStyle(value TableViewSelectionHighlightStyle) {
	objc.Call[objc.Void](t_, objc.Sel("setSelectionHighlightStyle:"), value)
}

// The grid lines drawn by the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528689-gridstylemask?language=objc
func (t_ TableView) GridStyleMask() TableViewGridLineStyle {
	rv := objc.Call[TableViewGridLineStyle](t_, objc.Sel("gridStyleMask"))
	return rv
}

// The grid lines drawn by the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528689-gridstylemask?language=objc
func (t_ TableView) SetGridStyleMask(value TableViewGridLineStyle) {
	objc.Call[objc.Void](t_, objc.Sel("setGridStyleMask:"), value)
}

// An index set containing the indexes of the selected rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1533844-selectedrowindexes?language=objc
func (t_ TableView) SelectedRowIndexes() foundation.IndexSet {
	rv := objc.Call[foundation.IndexSet](t_, objc.Sel("selectedRowIndexes"))
	return rv
}

// The effective style that the table uses. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/3622474-effectivestyle?language=objc
func (t_ TableView) EffectiveStyle() TableViewStyle {
	rv := objc.Call[TableViewStyle](t_, objc.Sel("effectiveStyle"))
	return rv
}

// The index of the last selected row (or the last row added to the selection). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535010-selectedrow?language=objc
func (t_ TableView) SelectedRow() int {
	rv := objc.Call[int](t_, objc.Sel("selectedRow"))
	return rv
}

// The table view’s delegate. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534325-delegate?language=objc
func (t_ TableView) Delegate() TableViewDelegateObject {
	rv := objc.Call[TableViewDelegateObject](t_, objc.Sel("delegate"))
	return rv
}

// The table view’s delegate. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534325-delegate?language=objc
func (t_ TableView) SetDelegate(value PTableViewDelegate) {
	po0 := objc.WrapAsProtocol("NSTableViewDelegate", value)
	objc.SetAssociatedObject(t_, objc.AssociationKey("setDelegate"), po0, objc.ASSOCIATION_RETAIN)
	objc.Call[objc.Void](t_, objc.Sel("setDelegate:"), po0)
}

// The table view’s delegate. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534325-delegate?language=objc
func (t_ TableView) SetDelegateObject(valueObject objc.IObject) {
	objc.Call[objc.Void](t_, objc.Sel("setDelegate:"), valueObject)
}

// An index set containing the indexes of the selected columns. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524283-selectedcolumnindexes?language=objc
func (t_ TableView) SelectedColumnIndexes() foundation.IndexSet {
	rv := objc.Call[foundation.IndexSet](t_, objc.Sel("selectedColumnIndexes"))
	return rv
}

// The view object used to draw headers over columns. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535880-headerview?language=objc
func (t_ TableView) HeaderView() TableHeaderView {
	rv := objc.Call[TableHeaderView](t_, objc.Sel("headerView"))
	return rv
}

// The view object used to draw headers over columns. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535880-headerview?language=objc
func (t_ TableView) SetHeaderView(value ITableHeaderView) {
	objc.Call[objc.Void](t_, objc.Sel("setHeaderView:"), value)
}

// A Boolean value indicating whether vertical motion is treated as a drag or selection change. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534585-verticalmotioncanbegindrag?language=objc
func (t_ TableView) VerticalMotionCanBeginDrag() bool {
	rv := objc.Call[bool](t_, objc.Sel("verticalMotionCanBeginDrag"))
	return rv
}

// A Boolean value indicating whether vertical motion is treated as a drag or selection change. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534585-verticalmotioncanbegindrag?language=objc
func (t_ TableView) SetVerticalMotionCanBeginDrag(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setVerticalMotionCanBeginDrag:"), value)
}

// The number of rows in the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527941-numberofrows?language=objc
func (t_ TableView) NumberOfRows() int {
	rv := objc.Call[int](t_, objc.Sel("numberOfRows"))
	return rv
}

// A Boolean value indicating whether the table uses static data. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1533450-usesstaticcontents?language=objc
func (t_ TableView) UsesStaticContents() bool {
	rv := objc.Call[bool](t_, objc.Sel("usesStaticContents"))
	return rv
}

// A Boolean value indicating whether the table uses static data. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1533450-usesstaticcontents?language=objc
func (t_ TableView) SetUsesStaticContents(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setUsesStaticContents:"), value)
}

// A Boolean value indicating whether a table row’s actions are visible. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1533198-rowactionsvisible?language=objc
func (t_ TableView) RowActionsVisible() bool {
	rv := objc.Call[bool](t_, objc.Sel("rowActionsVisible"))
	return rv
}

// A Boolean value indicating whether a table row’s actions are visible. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1533198-rowactionsvisible?language=objc
func (t_ TableView) SetRowActionsVisible(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setRowActionsVisible:"), value)
}

// A Boolean value indicating whether the table view draws grouped rows as if they are floating. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528624-floatsgrouprows?language=objc
func (t_ TableView) FloatsGroupRows() bool {
	rv := objc.Call[bool](t_, objc.Sel("floatsGroupRows"))
	return rv
}

// A Boolean value indicating whether the table view draws grouped rows as if they are floating. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528624-floatsgrouprows?language=objc
func (t_ TableView) SetFloatsGroupRows(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setFloatsGroupRows:"), value)
}

// The color used to draw the background of the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527806-backgroundcolor?language=objc
func (t_ TableView) BackgroundColor() Color {
	rv := objc.Call[Color](t_, objc.Sel("backgroundColor"))
	return rv
}

// The color used to draw the background of the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527806-backgroundcolor?language=objc
func (t_ TableView) SetBackgroundColor(value IColor) {
	objc.Call[objc.Void](t_, objc.Sel("setBackgroundColor:"), value)
}

// A Boolean value indicating whether the table view uses alternating row colors for its background. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1533967-usesalternatingrowbackgroundcolo?language=objc
func (t_ TableView) UsesAlternatingRowBackgroundColors() bool {
	rv := objc.Call[bool](t_, objc.Sel("usesAlternatingRowBackgroundColors"))
	return rv
}

// A Boolean value indicating whether the table view uses alternating row colors for its background. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1533967-usesalternatingrowbackgroundcolo?language=objc
func (t_ TableView) SetUsesAlternatingRowBackgroundColors(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setUsesAlternatingRowBackgroundColors:"), value)
}

// The indexes of all hidden table rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534914-hiddenrowindexes?language=objc
func (t_ TableView) HiddenRowIndexes() foundation.IndexSet {
	rv := objc.Call[foundation.IndexSet](t_, objc.Sel("hiddenRowIndexes"))
	return rv
}

// A Boolean value indicating whether the table view allows the user to resize columns by dragging between their headers. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527826-allowscolumnresizing?language=objc
func (t_ TableView) AllowsColumnResizing() bool {
	rv := objc.Call[bool](t_, objc.Sel("allowsColumnResizing"))
	return rv
}

// A Boolean value indicating whether the table view allows the user to resize columns by dragging between their headers. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527826-allowscolumnresizing?language=objc
func (t_ TableView) SetAllowsColumnResizing(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setAllowsColumnResizing:"), value)
}

// The table view’s column autoresizing style. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1530784-columnautoresizingstyle?language=objc
func (t_ TableView) ColumnAutoresizingStyle() TableViewColumnAutoresizingStyle {
	rv := objc.Call[TableViewColumnAutoresizingStyle](t_, objc.Sel("columnAutoresizingStyle"))
	return rv
}

// The table view’s column autoresizing style. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1530784-columnautoresizingstyle?language=objc
func (t_ TableView) SetColumnAutoresizingStyle(value TableViewColumnAutoresizingStyle) {
	objc.Call[objc.Void](t_, objc.Sel("setColumnAutoresizingStyle:"), value)
}

// A Boolean value indicating whether the order and width of the table view’s columns are automatically saved. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525596-autosavetablecolumns?language=objc
func (t_ TableView) AutosaveTableColumns() bool {
	rv := objc.Call[bool](t_, objc.Sel("autosaveTableColumns"))
	return rv
}

// A Boolean value indicating whether the order and width of the table view’s columns are automatically saved. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525596-autosavetablecolumns?language=objc
func (t_ TableView) SetAutosaveTableColumns(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setAutosaveTableColumns:"), value)
}

// The horizontal and vertical spacing between cells. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524258-intercellspacing?language=objc
func (t_ TableView) IntercellSpacing() foundation.Size {
	rv := objc.Call[foundation.Size](t_, objc.Sel("intercellSpacing"))
	return rv
}

// The horizontal and vertical spacing between cells. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524258-intercellspacing?language=objc
func (t_ TableView) SetIntercellSpacing(value foundation.Size) {
	objc.Call[objc.Void](t_, objc.Sel("setIntercellSpacing:"), value)
}

// A Boolean value indicating whether the table view allows the user to select more than one column or row at a time. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532523-allowsmultipleselection?language=objc
func (t_ TableView) AllowsMultipleSelection() bool {
	rv := objc.Call[bool](t_, objc.Sel("allowsMultipleSelection"))
	return rv
}

// A Boolean value indicating whether the table view allows the user to select more than one column or row at a time. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532523-allowsmultipleselection?language=objc
func (t_ TableView) SetAllowsMultipleSelection(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setAllowsMultipleSelection:"), value)
}

// The index of the row being edited. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534282-editedrow?language=objc
func (t_ TableView) EditedRow() int {
	rv := objc.Call[int](t_, objc.Sel("editedRow"))
	return rv
}

// The height of each row in the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1529148-rowheight?language=objc
func (t_ TableView) RowHeight() float64 {
	rv := objc.Call[float64](t_, objc.Sel("rowHeight"))
	return rv
}

// The height of each row in the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1529148-rowheight?language=objc
func (t_ TableView) SetRowHeight(value float64) {
	objc.Call[objc.Void](t_, objc.Sel("setRowHeight:"), value)
}

// The object that provides the data displayed by the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1531866-datasource?language=objc
func (t_ TableView) DataSource() TableViewDataSourceObject {
	rv := objc.Call[TableViewDataSourceObject](t_, objc.Sel("dataSource"))
	return rv
}

// The object that provides the data displayed by the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1531866-datasource?language=objc
func (t_ TableView) SetDataSource(value PTableViewDataSource) {
	po0 := objc.WrapAsProtocol("NSTableViewDataSource", value)
	objc.SetAssociatedObject(t_, objc.AssociationKey("setDataSource"), po0, objc.ASSOCIATION_RETAIN)
	objc.Call[objc.Void](t_, objc.Sel("setDataSource:"), po0)
}

// The object that provides the data displayed by the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1531866-datasource?language=objc
func (t_ TableView) SetDataSourceObject(valueObject objc.IObject) {
	objc.Call[objc.Void](t_, objc.Sel("setDataSource:"), valueObject)
}

// A Boolean value indicating whether the table view allows the user to type characters to select rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526084-allowstypeselect?language=objc
func (t_ TableView) AllowsTypeSelect() bool {
	rv := objc.Call[bool](t_, objc.Sel("allowsTypeSelect"))
	return rv
}

// A Boolean value indicating whether the table view allows the user to type characters to select rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526084-allowstypeselect?language=objc
func (t_ TableView) SetAllowsTypeSelect(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setAllowsTypeSelect:"), value)
}

// The column highlighted in the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524980-highlightedtablecolumn?language=objc
func (t_ TableView) HighlightedTableColumn() TableColumn {
	rv := objc.Call[TableColumn](t_, objc.Sel("highlightedTableColumn"))
	return rv
}

// The column highlighted in the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524980-highlightedtablecolumn?language=objc
func (t_ TableView) SetHighlightedTableColumn(value ITableColumn) {
	objc.Call[objc.Void](t_, objc.Sel("setHighlightedTableColumn:"), value)
}

// The index of the row the user clicked. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527357-clickedrow?language=objc
func (t_ TableView) ClickedRow() int {
	rv := objc.Call[int](t_, objc.Sel("clickedRow"))
	return rv
}

// The index of the column the user clicked. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1529205-clickedcolumn?language=objc
func (t_ TableView) ClickedColumn() int {
	rv := objc.Call[int](t_, objc.Sel("clickedColumn"))
	return rv
}

// The feedback style displayed when the user drags over the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527570-draggingdestinationfeedbackstyle?language=objc
func (t_ TableView) DraggingDestinationFeedbackStyle() TableViewDraggingDestinationFeedbackStyle {
	rv := objc.Call[TableViewDraggingDestinationFeedbackStyle](t_, objc.Sel("draggingDestinationFeedbackStyle"))
	return rv
}

// The feedback style displayed when the user drags over the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527570-draggingdestinationfeedbackstyle?language=objc
func (t_ TableView) SetDraggingDestinationFeedbackStyle(value TableViewDraggingDestinationFeedbackStyle) {
	objc.Call[objc.Void](t_, objc.Sel("setDraggingDestinationFeedbackStyle:"), value)
}

// A Boolean value indicating whether the table view allows the user to select zero columns or rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535902-allowsemptyselection?language=objc
func (t_ TableView) AllowsEmptySelection() bool {
	rv := objc.Call[bool](t_, objc.Sel("allowsEmptySelection"))
	return rv
}

// A Boolean value indicating whether the table view allows the user to select zero columns or rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535902-allowsemptyselection?language=objc
func (t_ TableView) SetAllowsEmptySelection(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setAllowsEmptySelection:"), value)
}

// The number of selected rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1527463-numberofselectedrows?language=objc
func (t_ TableView) NumberOfSelectedRows() int {
	rv := objc.Call[int](t_, objc.Sel("numberOfSelectedRows"))
	return rv
}

// The number of columns in the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528902-numberofcolumns?language=objc
func (t_ TableView) NumberOfColumns() int {
	rv := objc.Call[int](t_, objc.Sel("numberOfColumns"))
	return rv
}

// The index of the last selected column (or the last column added to the selection). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532974-selectedcolumn?language=objc
func (t_ TableView) SelectedColumn() int {
	rv := objc.Call[int](t_, objc.Sel("selectedColumn"))
	return rv
}

// The style that the table view uses. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/3622475-style?language=objc
func (t_ TableView) Style() TableViewStyle {
	rv := objc.Call[TableViewStyle](t_, objc.Sel("style"))
	return rv
}

// The style that the table view uses. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/3622475-style?language=objc
func (t_ TableView) SetStyle(value TableViewStyle) {
	objc.Call[objc.Void](t_, objc.Sel("setStyle:"), value)
}

// An array containing the current table column objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1528735-tablecolumns?language=objc
func (t_ TableView) TableColumns() []TableColumn {
	rv := objc.Call[[]TableColumn](t_, objc.Sel("tableColumns"))
	return rv
}

// A Boolean value that indicates whether the table view uses autolayout to calculate the height of rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/2870126-usesautomaticrowheights?language=objc
func (t_ TableView) UsesAutomaticRowHeights() bool {
	rv := objc.Call[bool](t_, objc.Sel("usesAutomaticRowHeights"))
	return rv
}

// A Boolean value that indicates whether the table view uses autolayout to calculate the height of rows. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/2870126-usesautomaticrowheights?language=objc
func (t_ TableView) SetUsesAutomaticRowHeights(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setUsesAutomaticRowHeights:"), value)
}

// The number of selected columns. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524361-numberofselectedcolumns?language=objc
func (t_ TableView) NumberOfSelectedColumns() int {
	rv := objc.Call[int](t_, objc.Sel("numberOfSelectedColumns"))
	return rv
}

// The dictionary of all registered nib files for view-based table view identifiers. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1530663-registerednibsbyidentifier?language=objc
func (t_ TableView) RegisteredNibsByIdentifier() map[UserInterfaceItemIdentifier]Nib {
	rv := objc.Call[map[UserInterfaceItemIdentifier]Nib](t_, objc.Sel("registeredNibsByIdentifier"))
	return rv
}

// The index of the column being edited. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1532307-editedcolumn?language=objc
func (t_ TableView) EditedColumn() int {
	rv := objc.Call[int](t_, objc.Sel("editedColumn"))
	return rv
}

// The row size style (small, medium, large, or custom) used by the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534438-rowsizestyle?language=objc
func (t_ TableView) RowSizeStyle() TableViewRowSizeStyle {
	rv := objc.Call[TableViewRowSizeStyle](t_, objc.Sel("rowSizeStyle"))
	return rv
}

// The row size style (small, medium, large, or custom) used by the table view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534438-rowsizestyle?language=objc
func (t_ TableView) SetRowSizeStyle(value TableViewRowSizeStyle) {
	objc.Call[objc.Void](t_, objc.Sel("setRowSizeStyle:"), value)
}

// The effective row size style for the table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1531825-effectiverowsizestyle?language=objc
func (t_ TableView) EffectiveRowSizeStyle() TableViewRowSizeStyle {
	rv := objc.Call[TableViewRowSizeStyle](t_, objc.Sel("effectiveRowSizeStyle"))
	return rv
}

// The message sent to the table view’s target when the user double-clicks a cell or column header. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526992-doubleaction?language=objc
func (t_ TableView) DoubleAction() objc.Selector {
	rv := objc.Call[objc.Selector](t_, objc.Sel("doubleAction"))
	return rv
}

// The message sent to the table view’s target when the user double-clicks a cell or column header. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1526992-doubleaction?language=objc
func (t_ TableView) SetDoubleAction(value objc.Selector) {
	objc.Call[objc.Void](t_, objc.Sel("setDoubleAction:"), value)
}

// The color used to draw grid lines. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524620-gridcolor?language=objc
func (t_ TableView) GridColor() Color {
	rv := objc.Call[Color](t_, objc.Sel("gridColor"))
	return rv
}

// The color used to draw grid lines. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1524620-gridcolor?language=objc
func (t_ TableView) SetGridColor(value IColor) {
	objc.Call[objc.Void](t_, objc.Sel("setGridColor:"), value)
}

// A Boolean value indicating whether the table view allows the user to rearrange columns by dragging their headers. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1530207-allowscolumnreordering?language=objc
func (t_ TableView) AllowsColumnReordering() bool {
	rv := objc.Call[bool](t_, objc.Sel("allowsColumnReordering"))
	return rv
}

// A Boolean value indicating whether the table view allows the user to rearrange columns by dragging their headers. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1530207-allowscolumnreordering?language=objc
func (t_ TableView) SetAllowsColumnReordering(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setAllowsColumnReordering:"), value)
}

// The table view’s sort descriptors. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534198-sortdescriptors?language=objc
func (t_ TableView) SortDescriptors() []foundation.SortDescriptor {
	rv := objc.Call[[]foundation.SortDescriptor](t_, objc.Sel("sortDescriptors"))
	return rv
}

// The table view’s sort descriptors. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534198-sortdescriptors?language=objc
func (t_ TableView) SetSortDescriptors(value []foundation.ISortDescriptor) {
	objc.Call[objc.Void](t_, objc.Sel("setSortDescriptors:"), value)
}

// The name under which table information is automatically saved. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534409-autosavename?language=objc
func (t_ TableView) AutosaveName() TableViewAutosaveName {
	rv := objc.Call[TableViewAutosaveName](t_, objc.Sel("autosaveName"))
	return rv
}

// The name under which table information is automatically saved. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1534409-autosavename?language=objc
func (t_ TableView) SetAutosaveName(value TableViewAutosaveName) {
	objc.Call[objc.Void](t_, objc.Sel("setAutosaveName:"), value)
}

// The view used to draw the area to the right of the column headers and above the vertical scroller of the enclosing scroll view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535831-cornerview?language=objc
func (t_ TableView) CornerView() View {
	rv := objc.Call[View](t_, objc.Sel("cornerView"))
	return rv
}

// The view used to draw the area to the right of the column headers and above the vertical scroller of the enclosing scroll view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1535831-cornerview?language=objc
func (t_ TableView) SetCornerView(value IView) {
	objc.Call[objc.Void](t_, objc.Sel("setCornerView:"), value)
}

// A Boolean value indicating whether the table view allows the user to select columns by clicking their headers. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525276-allowscolumnselection?language=objc
func (t_ TableView) AllowsColumnSelection() bool {
	rv := objc.Call[bool](t_, objc.Sel("allowsColumnSelection"))
	return rv
}

// A Boolean value indicating whether the table view allows the user to select columns by clicking their headers. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstableview/1525276-allowscolumnselection?language=objc
func (t_ TableView) SetAllowsColumnSelection(value bool) {
	objc.Call[objc.Void](t_, objc.Sel("setAllowsColumnSelection:"), value)
}
