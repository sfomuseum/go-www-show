// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// A role-based protocol that declares the minimum interface necessary to interact with an assistive app. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/1534023-nsaccessibilityelement?language=objc
type PAccessibilityElement interface {
	// optional
	AccessibilityIdentifier() string
	HasAccessibilityIdentifier() bool

	// optional
	AccessibilityParent() objc.Object
	HasAccessibilityParent() bool

	// optional
	AccessibilityFrame() foundation.Rect
	HasAccessibilityFrame() bool

	// optional
	IsAccessibilityFocused() bool
	HasIsAccessibilityFocused() bool

	// optional
	AccessibilityAddChildElement(childElement AccessibilityElementObject)
	HasAccessibilityAddChildElement() bool

	// optional
	SetAccessibilityFrameInParentSpace(value foundation.Rect)
	HasSetAccessibilityFrameInParentSpace() bool

	// optional
	AccessibilityFrameInParentSpace() foundation.Rect
	HasAccessibilityFrameInParentSpace() bool
}

// ensure impl type implements protocol interface
var _ PAccessibilityElement = (*AccessibilityElementObject)(nil)

// A concrete type for the [PAccessibilityElement] protocol.
type AccessibilityElementObject struct {
	objc.Object
}

func (a_ AccessibilityElementObject) HasAccessibilityIdentifier() bool {
	return a_.RespondsToSelector(objc.Sel("accessibilityIdentifier"))
}

// Returns the accessibility element’s identity. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/1534023-nsaccessibilityelement/1533707-accessibilityidentifier?language=objc
func (a_ AccessibilityElementObject) AccessibilityIdentifier() string {
	rv := objc.Call[string](a_, objc.Sel("accessibilityIdentifier"))
	return rv
}

func (a_ AccessibilityElementObject) HasAccessibilityParent() bool {
	return a_.RespondsToSelector(objc.Sel("accessibilityParent"))
}

// Returns the accessibility element’s parent in the accessibility hierarchy. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/1534023-nsaccessibilityelement/1529078-accessibilityparent?language=objc
func (a_ AccessibilityElementObject) AccessibilityParent() objc.Object {
	rv := objc.Call[objc.Object](a_, objc.Sel("accessibilityParent"))
	return rv
}

func (a_ AccessibilityElementObject) HasAccessibilityFrame() bool {
	return a_.RespondsToSelector(objc.Sel("accessibilityFrame"))
}

// Returns the accessibility element’s frame in screen coordinates. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/1534023-nsaccessibilityelement/1528055-accessibilityframe?language=objc
func (a_ AccessibilityElementObject) AccessibilityFrame() foundation.Rect {
	rv := objc.Call[foundation.Rect](a_, objc.Sel("accessibilityFrame"))
	return rv
}

func (a_ AccessibilityElementObject) HasIsAccessibilityFocused() bool {
	return a_.RespondsToSelector(objc.Sel("isAccessibilityFocused"))
}

// Returns a Boolean value that indicates whether the accessibility element has the keyboard focus. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/1534023-nsaccessibilityelement/1525133-isaccessibilityfocused?language=objc
func (a_ AccessibilityElementObject) IsAccessibilityFocused() bool {
	rv := objc.Call[bool](a_, objc.Sel("isAccessibilityFocused"))
	return rv
}

func (a_ AccessibilityElementObject) HasAccessibilityAddChildElement() bool {
	return a_.RespondsToSelector(objc.Sel("accessibilityAddChildElement:"))
}

// Adds a child to the accessibility element in the accessibility hierarchy. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsaccessibilityelement/1533717-accessibilityaddchildelement?language=objc
func (a_ AccessibilityElementObject) AccessibilityAddChildElement(childElement AccessibilityElementObject) {
	po0 := objc.WrapAsProtocol("NSAccessibilityElement", childElement)
	objc.Call[objc.Void](a_, objc.Sel("accessibilityAddChildElement:"), po0)
}

func (a_ AccessibilityElementObject) HasSetAccessibilityFrameInParentSpace() bool {
	return a_.RespondsToSelector(objc.Sel("setAccessibilityFrameInParentSpace:"))
}

// The accessibility element’s frame in its parent’s coordinate system. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsaccessibilityelement/1569648-accessibilityframeinparentspace?language=objc
func (a_ AccessibilityElementObject) SetAccessibilityFrameInParentSpace(value foundation.Rect) {
	objc.Call[objc.Void](a_, objc.Sel("setAccessibilityFrameInParentSpace:"), value)
}

func (a_ AccessibilityElementObject) HasAccessibilityFrameInParentSpace() bool {
	return a_.RespondsToSelector(objc.Sel("accessibilityFrameInParentSpace"))
}

// The accessibility element’s frame in its parent’s coordinate system. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsaccessibilityelement/1569648-accessibilityframeinparentspace?language=objc
func (a_ AccessibilityElementObject) AccessibilityFrameInParentSpace() foundation.Rect {
	rv := objc.Call[foundation.Rect](a_, objc.Sel("accessibilityFrameInParentSpace"))
	return rv
}
