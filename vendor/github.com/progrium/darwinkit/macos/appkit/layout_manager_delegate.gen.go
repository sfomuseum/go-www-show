// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"github.com/progrium/darwinkit/macos/coregraphics"
	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// A set of optional methods that delegates of layout manager objects implement. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate?language=objc
type PLayoutManagerDelegate interface {
	// optional
	LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object
	HasLayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange() bool

	// optional
	LayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64
	HasLayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect() bool

	// optional
	LayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex(layoutManager LayoutManager, charIndex uint) bool
	HasLayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex() bool

	// optional
	LayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange(layoutManager LayoutManager, glyphs *coregraphics.Glyph, props *GlyphProperty, charIndexes *uint, aFont Font, glyphRange foundation.Range) uint
	HasLayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange() bool

	// optional
	LayoutManagerDidCompleteLayoutForTextContainerAtEnd(layoutManager LayoutManager, textContainer TextContainer, layoutFinishedFlag bool)
	HasLayoutManagerDidCompleteLayoutForTextContainerAtEnd() bool

	// optional
	LayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64
	HasLayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect() bool

	// optional
	LayoutManagerShouldUseActionForControlCharacterAtIndex(layoutManager LayoutManager, action ControlCharacterAction, charIndex uint) ControlCharacterAction
	HasLayoutManagerShouldUseActionForControlCharacterAtIndex() bool

	// optional
	LayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64
	HasLayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect() bool

	// optional
	LayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex(layoutManager LayoutManager, charIndex uint) bool
	HasLayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex() bool

	// optional
	LayoutManagerDidInvalidateLayout(sender LayoutManager)
	HasLayoutManagerDidInvalidateLayout() bool

	// optional
	LayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(layoutManager LayoutManager, glyphIndex uint, textContainer TextContainer, proposedRect foundation.Rect, glyphPosition foundation.Point, charIndex uint) foundation.Rect
	HasLayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex() bool

	// optional
	LayoutManagerTextContainerDidChangeGeometryFromSize(layoutManager LayoutManager, textContainer TextContainer, oldSize foundation.Size)
	HasLayoutManagerTextContainerDidChangeGeometryFromSize() bool

	// optional
	LayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange(layoutManager LayoutManager, lineFragmentRect *foundation.Rect, lineFragmentUsedRect *foundation.Rect, baselineOffset *float64, textContainer TextContainer, glyphRange foundation.Range) bool
	HasLayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange() bool
}

// A delegate implementation builder for the [PLayoutManagerDelegate] protocol.
type LayoutManagerDelegate struct {
	_LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange                     func(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object
	_LayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect                                    func(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64
	_LayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex                                               func(layoutManager LayoutManager, charIndex uint) bool
	_LayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange                                  func(layoutManager LayoutManager, glyphs *coregraphics.Glyph, props *GlyphProperty, charIndexes *uint, aFont Font, glyphRange foundation.Range) uint
	_LayoutManagerDidCompleteLayoutForTextContainerAtEnd                                                           func(layoutManager LayoutManager, textContainer TextContainer, layoutFinishedFlag bool)
	_LayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect                                         func(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64
	_LayoutManagerShouldUseActionForControlCharacterAtIndex                                                        func(layoutManager LayoutManager, action ControlCharacterAction, charIndex uint) ControlCharacterAction
	_LayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect                                   func(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64
	_LayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex                                                      func(layoutManager LayoutManager, charIndex uint) bool
	_LayoutManagerDidInvalidateLayout                                                                              func(sender LayoutManager)
	_LayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex func(layoutManager LayoutManager, glyphIndex uint, textContainer TextContainer, proposedRect foundation.Rect, glyphPosition foundation.Point, charIndex uint) foundation.Rect
	_LayoutManagerTextContainerDidChangeGeometryFromSize                                                           func(layoutManager LayoutManager, textContainer TextContainer, oldSize foundation.Size)
	_LayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange          func(layoutManager LayoutManager, lineFragmentRect *foundation.Rect, lineFragmentUsedRect *foundation.Rect, baselineOffset *float64, textContainer TextContainer, glyphRange foundation.Range) bool
}

func (di *LayoutManagerDelegate) HasLayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange() bool {
	return di._LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange != nil
}

// Asks the delegate whether to use temporary attributes when drawing the text. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanagerdelegate/1403085-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(f func(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object) {
	di._LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange = f
}

// Asks the delegate whether to use temporary attributes when drawing the text. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanagerdelegate/1403085-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object {
	return di._LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(layoutManager, attrs, toScreen, charIndex, effectiveCharRange)
}
func (di *LayoutManagerDelegate) HasLayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect() bool {
	return di._LayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect != nil
}

// Returns the amount of space to add at the end of a paragraph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403076-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(f func(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64) {
	di._LayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect = f
}

// Returns the amount of space to add at the end of a paragraph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403076-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64 {
	return di._LayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(layoutManager, glyphIndex, rect)
}
func (di *LayoutManagerDelegate) HasLayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex() bool {
	return di._LayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex != nil
}

// Asks the delegate whether to break the line at the specified character. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403128-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex(f func(layoutManager LayoutManager, charIndex uint) bool) {
	di._LayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex = f
}

// Asks the delegate whether to break the line at the specified character. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403128-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex(layoutManager LayoutManager, charIndex uint) bool {
	return di._LayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex(layoutManager, charIndex)
}
func (di *LayoutManagerDelegate) HasLayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange() bool {
	return di._LayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange != nil
}

// Enables customization of the initial glyph generation process. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403073-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange(f func(layoutManager LayoutManager, glyphs *coregraphics.Glyph, props *GlyphProperty, charIndexes *uint, aFont Font, glyphRange foundation.Range) uint) {
	di._LayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange = f
}

// Enables customization of the initial glyph generation process. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403073-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange(layoutManager LayoutManager, glyphs *coregraphics.Glyph, props *GlyphProperty, charIndexes *uint, aFont Font, glyphRange foundation.Range) uint {
	return di._LayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange(layoutManager, glyphs, props, charIndexes, aFont, glyphRange)
}
func (di *LayoutManagerDelegate) HasLayoutManagerDidCompleteLayoutForTextContainerAtEnd() bool {
	return di._LayoutManagerDidCompleteLayoutForTextContainerAtEnd != nil
}

// Informs the delegate when the layout manager finishes laying out text in the specified text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402926-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerDidCompleteLayoutForTextContainerAtEnd(f func(layoutManager LayoutManager, textContainer TextContainer, layoutFinishedFlag bool)) {
	di._LayoutManagerDidCompleteLayoutForTextContainerAtEnd = f
}

// Informs the delegate when the layout manager finishes laying out text in the specified text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402926-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerDidCompleteLayoutForTextContainerAtEnd(layoutManager LayoutManager, textContainer TextContainer, layoutFinishedFlag bool) {
	di._LayoutManagerDidCompleteLayoutForTextContainerAtEnd(layoutManager, textContainer, layoutFinishedFlag)
}
func (di *LayoutManagerDelegate) HasLayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect() bool {
	return di._LayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect != nil
}

// Returns the amount of space to add to the end of a line. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402948-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(f func(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64) {
	di._LayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect = f
}

// Returns the amount of space to add to the end of a line. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402948-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64 {
	return di._LayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(layoutManager, glyphIndex, rect)
}
func (di *LayoutManagerDelegate) HasLayoutManagerShouldUseActionForControlCharacterAtIndex() bool {
	return di._LayoutManagerShouldUseActionForControlCharacterAtIndex != nil
}

// Returns the control character action for the control character at the specified character index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403167-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerShouldUseActionForControlCharacterAtIndex(f func(layoutManager LayoutManager, action ControlCharacterAction, charIndex uint) ControlCharacterAction) {
	di._LayoutManagerShouldUseActionForControlCharacterAtIndex = f
}

// Returns the control character action for the control character at the specified character index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403167-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerShouldUseActionForControlCharacterAtIndex(layoutManager LayoutManager, action ControlCharacterAction, charIndex uint) ControlCharacterAction {
	return di._LayoutManagerShouldUseActionForControlCharacterAtIndex(layoutManager, action, charIndex)
}
func (di *LayoutManagerDelegate) HasLayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect() bool {
	return di._LayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect != nil
}

// Returns the amount of space to add at the beginning of a paragraph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403177-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect(f func(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64) {
	di._LayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect = f
}

// Returns the amount of space to add at the beginning of a paragraph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403177-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64 {
	return di._LayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect(layoutManager, glyphIndex, rect)
}
func (di *LayoutManagerDelegate) HasLayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex() bool {
	return di._LayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex != nil
}

// Asks the delegate whether to break the line at the specified word. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403051-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex(f func(layoutManager LayoutManager, charIndex uint) bool) {
	di._LayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex = f
}

// Asks the delegate whether to break the line at the specified word. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403051-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex(layoutManager LayoutManager, charIndex uint) bool {
	return di._LayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex(layoutManager, charIndex)
}
func (di *LayoutManagerDelegate) HasLayoutManagerDidInvalidateLayout() bool {
	return di._LayoutManagerDidInvalidateLayout != nil
}

// Informs the delegate when the specified layout manager invalidates layout information (not glyph information). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402993-layoutmanagerdidinvalidatelayout?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerDidInvalidateLayout(f func(sender LayoutManager)) {
	di._LayoutManagerDidInvalidateLayout = f
}

// Informs the delegate when the specified layout manager invalidates layout information (not glyph information). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402993-layoutmanagerdidinvalidatelayout?language=objc
func (di *LayoutManagerDelegate) LayoutManagerDidInvalidateLayout(sender LayoutManager) {
	di._LayoutManagerDidInvalidateLayout(sender)
}
func (di *LayoutManagerDelegate) HasLayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex() bool {
	return di._LayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex != nil
}

// Returns the bounding rectangle for the specified control glyph with the specified parameters. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402922-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(f func(layoutManager LayoutManager, glyphIndex uint, textContainer TextContainer, proposedRect foundation.Rect, glyphPosition foundation.Point, charIndex uint) foundation.Rect) {
	di._LayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex = f
}

// Returns the bounding rectangle for the specified control glyph with the specified parameters. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402922-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(layoutManager LayoutManager, glyphIndex uint, textContainer TextContainer, proposedRect foundation.Rect, glyphPosition foundation.Point, charIndex uint) foundation.Rect {
	return di._LayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(layoutManager, glyphIndex, textContainer, proposedRect, glyphPosition, charIndex)
}
func (di *LayoutManagerDelegate) HasLayoutManagerTextContainerDidChangeGeometryFromSize() bool {
	return di._LayoutManagerTextContainerDidChangeGeometryFromSize != nil
}

// Informs the delegate when the layout manager invalidates layout due to a change in the geometry of the specified text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403049-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerTextContainerDidChangeGeometryFromSize(f func(layoutManager LayoutManager, textContainer TextContainer, oldSize foundation.Size)) {
	di._LayoutManagerTextContainerDidChangeGeometryFromSize = f
}

// Informs the delegate when the layout manager invalidates layout due to a change in the geometry of the specified text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403049-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerTextContainerDidChangeGeometryFromSize(layoutManager LayoutManager, textContainer TextContainer, oldSize foundation.Size) {
	di._LayoutManagerTextContainerDidChangeGeometryFromSize(layoutManager, textContainer, oldSize)
}
func (di *LayoutManagerDelegate) HasLayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange() bool {
	return di._LayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange != nil
}

// Customizes the line fragment geometry before committing it to the layout cache. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403122-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange(f func(layoutManager LayoutManager, lineFragmentRect *foundation.Rect, lineFragmentUsedRect *foundation.Rect, baselineOffset *float64, textContainer TextContainer, glyphRange foundation.Range) bool) {
	di._LayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange = f
}

// Customizes the line fragment geometry before committing it to the layout cache. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403122-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange(layoutManager LayoutManager, lineFragmentRect *foundation.Rect, lineFragmentUsedRect *foundation.Rect, baselineOffset *float64, textContainer TextContainer, glyphRange foundation.Range) bool {
	return di._LayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange(layoutManager, lineFragmentRect, lineFragmentUsedRect, baselineOffset, textContainer, glyphRange)
}

// ensure impl type implements protocol interface
var _ PLayoutManagerDelegate = (*LayoutManagerDelegateObject)(nil)

// A concrete type for the [PLayoutManagerDelegate] protocol.
type LayoutManagerDelegateObject struct {
	objc.Object
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:"))
}

// Asks the delegate whether to use temporary attributes when drawing the text. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanagerdelegate/1403085-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object {
	rv := objc.Call[map[foundation.AttributedStringKey]objc.Object](l_, objc.Sel("layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:"), layoutManager, attrs, toScreen, charIndex, effectiveCharRange)
	return rv
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:"))
}

// Returns the amount of space to add at the end of a paragraph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403076-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64 {
	rv := objc.Call[float64](l_, objc.Sel("layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:"), layoutManager, glyphIndex, rect)
	return rv
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:"))
}

// Asks the delegate whether to break the line at the specified character. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403128-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex(layoutManager LayoutManager, charIndex uint) bool {
	rv := objc.Call[bool](l_, objc.Sel("layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:"), layoutManager, charIndex)
	return rv
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:"))
}

// Enables customization of the initial glyph generation process. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403073-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange(layoutManager LayoutManager, glyphs *coregraphics.Glyph, props *GlyphProperty, charIndexes *uint, aFont Font, glyphRange foundation.Range) uint {
	rv := objc.Call[uint](l_, objc.Sel("layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:"), layoutManager, glyphs, props, charIndexes, aFont, glyphRange)
	return rv
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerDidCompleteLayoutForTextContainerAtEnd() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:didCompleteLayoutForTextContainer:atEnd:"))
}

// Informs the delegate when the layout manager finishes laying out text in the specified text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402926-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerDidCompleteLayoutForTextContainerAtEnd(layoutManager LayoutManager, textContainer TextContainer, layoutFinishedFlag bool) {
	objc.Call[objc.Void](l_, objc.Sel("layoutManager:didCompleteLayoutForTextContainer:atEnd:"), layoutManager, textContainer, layoutFinishedFlag)
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:"))
}

// Returns the amount of space to add to the end of a line. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402948-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64 {
	rv := objc.Call[float64](l_, objc.Sel("layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:"), layoutManager, glyphIndex, rect)
	return rv
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerShouldUseActionForControlCharacterAtIndex() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:shouldUseAction:forControlCharacterAtIndex:"))
}

// Returns the control character action for the control character at the specified character index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403167-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerShouldUseActionForControlCharacterAtIndex(layoutManager LayoutManager, action ControlCharacterAction, charIndex uint) ControlCharacterAction {
	rv := objc.Call[ControlCharacterAction](l_, objc.Sel("layoutManager:shouldUseAction:forControlCharacterAtIndex:"), layoutManager, action, charIndex)
	return rv
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:"))
}

// Returns the amount of space to add at the beginning of a paragraph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403177-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect(layoutManager LayoutManager, glyphIndex uint, rect foundation.Rect) float64 {
	rv := objc.Call[float64](l_, objc.Sel("layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:"), layoutManager, glyphIndex, rect)
	return rv
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:"))
}

// Asks the delegate whether to break the line at the specified word. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403051-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerShouldBreakLineByWordBeforeCharacterAtIndex(layoutManager LayoutManager, charIndex uint) bool {
	rv := objc.Call[bool](l_, objc.Sel("layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:"), layoutManager, charIndex)
	return rv
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerDidInvalidateLayout() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManagerDidInvalidateLayout:"))
}

// Informs the delegate when the specified layout manager invalidates layout information (not glyph information). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402993-layoutmanagerdidinvalidatelayout?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerDidInvalidateLayout(sender LayoutManager) {
	objc.Call[objc.Void](l_, objc.Sel("layoutManagerDidInvalidateLayout:"), sender)
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:"))
}

// Returns the bounding rectangle for the specified control glyph with the specified parameters. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402922-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(layoutManager LayoutManager, glyphIndex uint, textContainer TextContainer, proposedRect foundation.Rect, glyphPosition foundation.Point, charIndex uint) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:"), layoutManager, glyphIndex, textContainer, proposedRect, glyphPosition, charIndex)
	return rv
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerTextContainerDidChangeGeometryFromSize() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:textContainer:didChangeGeometryFromSize:"))
}

// Informs the delegate when the layout manager invalidates layout due to a change in the geometry of the specified text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403049-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerTextContainerDidChangeGeometryFromSize(layoutManager LayoutManager, textContainer TextContainer, oldSize foundation.Size) {
	objc.Call[objc.Void](l_, objc.Sel("layoutManager:textContainer:didChangeGeometryFromSize:"), layoutManager, textContainer, oldSize)
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:inTextContainer:forGlyphRange:"))
}

// Customizes the line fragment geometry before committing it to the layout cache. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403122-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange(layoutManager LayoutManager, lineFragmentRect *foundation.Rect, lineFragmentUsedRect *foundation.Rect, baselineOffset *float64, textContainer TextContainer, glyphRange foundation.Range) bool {
	rv := objc.Call[bool](l_, objc.Sel("layoutManager:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:inTextContainer:forGlyphRange:"), layoutManager, lineFragmentRect, lineFragmentUsedRect, baselineOffset, textContainer, glyphRange)
	return rv
}
