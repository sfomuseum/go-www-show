// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"github.com/progrium/darwinkit/objc"
)

// A set of optional methods implemented by delegates of NSTokenField objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate?language=objc
type PTokenFieldDelegate interface {
	PTextFieldDelegate
	// optional
	TokenFieldHasMenuForRepresentedObject(tokenField TokenField, representedObject objc.Object) bool
	HasTokenFieldHasMenuForRepresentedObject() bool

	// optional
	TokenFieldRepresentedObjectForEditingString(tokenField TokenField, editingString string) objc.Object
	HasTokenFieldRepresentedObjectForEditingString() bool

	// optional
	TokenFieldMenuForRepresentedObject(tokenField TokenField, representedObject objc.Object) Menu
	HasTokenFieldMenuForRepresentedObject() bool

	// optional
	TokenFieldShouldAddObjectsAtIndex(tokenField TokenField, tokens []objc.Object, index uint) []objc.Object
	HasTokenFieldShouldAddObjectsAtIndex() bool

	// optional
	TokenFieldEditingStringForRepresentedObject(tokenField TokenField, representedObject objc.Object) string
	HasTokenFieldEditingStringForRepresentedObject() bool

	// optional
	TokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem(tokenField TokenField, substring string, tokenIndex int, selectedIndex *int) []objc.Object
	HasTokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem() bool

	// optional
	TokenFieldDisplayStringForRepresentedObject(tokenField TokenField, representedObject objc.Object) string
	HasTokenFieldDisplayStringForRepresentedObject() bool

	// optional
	TokenFieldStyleForRepresentedObject(tokenField TokenField, representedObject objc.Object) TokenStyle
	HasTokenFieldStyleForRepresentedObject() bool

	// optional
	TokenFieldWriteRepresentedObjectsToPasteboard(tokenField TokenField, objects []objc.Object, pboard Pasteboard) bool
	HasTokenFieldWriteRepresentedObjectsToPasteboard() bool

	// optional
	TokenFieldReadFromPasteboard(tokenField TokenField, pboard Pasteboard) []objc.Object
	HasTokenFieldReadFromPasteboard() bool
}

// A delegate implementation builder for the [PTokenFieldDelegate] protocol.
type TokenFieldDelegate struct {
	TextFieldDelegate
	_TokenFieldHasMenuForRepresentedObject                            func(tokenField TokenField, representedObject objc.Object) bool
	_TokenFieldRepresentedObjectForEditingString                      func(tokenField TokenField, editingString string) objc.Object
	_TokenFieldMenuForRepresentedObject                               func(tokenField TokenField, representedObject objc.Object) Menu
	_TokenFieldShouldAddObjectsAtIndex                                func(tokenField TokenField, tokens []objc.Object, index uint) []objc.Object
	_TokenFieldEditingStringForRepresentedObject                      func(tokenField TokenField, representedObject objc.Object) string
	_TokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem func(tokenField TokenField, substring string, tokenIndex int, selectedIndex *int) []objc.Object
	_TokenFieldDisplayStringForRepresentedObject                      func(tokenField TokenField, representedObject objc.Object) string
	_TokenFieldStyleForRepresentedObject                              func(tokenField TokenField, representedObject objc.Object) TokenStyle
	_TokenFieldWriteRepresentedObjectsToPasteboard                    func(tokenField TokenField, objects []objc.Object, pboard Pasteboard) bool
	_TokenFieldReadFromPasteboard                                     func(tokenField TokenField, pboard Pasteboard) []objc.Object
}

func (di *TokenFieldDelegate) HasTokenFieldHasMenuForRepresentedObject() bool {
	return di._TokenFieldHasMenuForRepresentedObject != nil
}

// Allows the delegate to specify whether the given represented object provides a menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1533494-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldHasMenuForRepresentedObject(f func(tokenField TokenField, representedObject objc.Object) bool) {
	di._TokenFieldHasMenuForRepresentedObject = f
}

// Allows the delegate to specify whether the given represented object provides a menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1533494-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldHasMenuForRepresentedObject(tokenField TokenField, representedObject objc.Object) bool {
	return di._TokenFieldHasMenuForRepresentedObject(tokenField, representedObject)
}
func (di *TokenFieldDelegate) HasTokenFieldRepresentedObjectForEditingString() bool {
	return di._TokenFieldRepresentedObjectForEditingString != nil
}

// Allows the delegate to provide a represented object for the given editing string. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1527909-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldRepresentedObjectForEditingString(f func(tokenField TokenField, editingString string) objc.Object) {
	di._TokenFieldRepresentedObjectForEditingString = f
}

// Allows the delegate to provide a represented object for the given editing string. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1527909-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldRepresentedObjectForEditingString(tokenField TokenField, editingString string) objc.Object {
	return di._TokenFieldRepresentedObjectForEditingString(tokenField, editingString)
}
func (di *TokenFieldDelegate) HasTokenFieldMenuForRepresentedObject() bool {
	return di._TokenFieldMenuForRepresentedObject != nil
}

// Allows the delegate to provide a menu for the specified represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1528750-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldMenuForRepresentedObject(f func(tokenField TokenField, representedObject objc.Object) Menu) {
	di._TokenFieldMenuForRepresentedObject = f
}

// Allows the delegate to provide a menu for the specified represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1528750-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldMenuForRepresentedObject(tokenField TokenField, representedObject objc.Object) Menu {
	return di._TokenFieldMenuForRepresentedObject(tokenField, representedObject)
}
func (di *TokenFieldDelegate) HasTokenFieldShouldAddObjectsAtIndex() bool {
	return di._TokenFieldShouldAddObjectsAtIndex != nil
}

// Allows the delegate to validate the tokens to be added to the receiver at a particular location. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1524376-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldShouldAddObjectsAtIndex(f func(tokenField TokenField, tokens []objc.Object, index uint) []objc.Object) {
	di._TokenFieldShouldAddObjectsAtIndex = f
}

// Allows the delegate to validate the tokens to be added to the receiver at a particular location. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1524376-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldShouldAddObjectsAtIndex(tokenField TokenField, tokens []objc.Object, index uint) []objc.Object {
	return di._TokenFieldShouldAddObjectsAtIndex(tokenField, tokens, index)
}
func (di *TokenFieldDelegate) HasTokenFieldEditingStringForRepresentedObject() bool {
	return di._TokenFieldEditingStringForRepresentedObject != nil
}

// Allows the delegate to provide a string to be edited as a proxy for a represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1524432-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldEditingStringForRepresentedObject(f func(tokenField TokenField, representedObject objc.Object) string) {
	di._TokenFieldEditingStringForRepresentedObject = f
}

// Allows the delegate to provide a string to be edited as a proxy for a represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1524432-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldEditingStringForRepresentedObject(tokenField TokenField, representedObject objc.Object) string {
	return di._TokenFieldEditingStringForRepresentedObject(tokenField, representedObject)
}
func (di *TokenFieldDelegate) HasTokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem() bool {
	return di._TokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem != nil
}

// Allows the delegate to provide an array of appropriate completions for the contents of the receiver. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1532474-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem(f func(tokenField TokenField, substring string, tokenIndex int, selectedIndex *int) []objc.Object) {
	di._TokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem = f
}

// Allows the delegate to provide an array of appropriate completions for the contents of the receiver. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1532474-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem(tokenField TokenField, substring string, tokenIndex int, selectedIndex *int) []objc.Object {
	return di._TokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem(tokenField, substring, tokenIndex, selectedIndex)
}
func (di *TokenFieldDelegate) HasTokenFieldDisplayStringForRepresentedObject() bool {
	return di._TokenFieldDisplayStringForRepresentedObject != nil
}

// Allows the delegate to provide a string to be displayed as a proxy for the given represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1526020-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldDisplayStringForRepresentedObject(f func(tokenField TokenField, representedObject objc.Object) string) {
	di._TokenFieldDisplayStringForRepresentedObject = f
}

// Allows the delegate to provide a string to be displayed as a proxy for the given represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1526020-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldDisplayStringForRepresentedObject(tokenField TokenField, representedObject objc.Object) string {
	return di._TokenFieldDisplayStringForRepresentedObject(tokenField, representedObject)
}
func (di *TokenFieldDelegate) HasTokenFieldStyleForRepresentedObject() bool {
	return di._TokenFieldStyleForRepresentedObject != nil
}

// Allows the delegate to return the token style for editing the specified represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1530203-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldStyleForRepresentedObject(f func(tokenField TokenField, representedObject objc.Object) TokenStyle) {
	di._TokenFieldStyleForRepresentedObject = f
}

// Allows the delegate to return the token style for editing the specified represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1530203-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldStyleForRepresentedObject(tokenField TokenField, representedObject objc.Object) TokenStyle {
	return di._TokenFieldStyleForRepresentedObject(tokenField, representedObject)
}
func (di *TokenFieldDelegate) HasTokenFieldWriteRepresentedObjectsToPasteboard() bool {
	return di._TokenFieldWriteRepresentedObjectsToPasteboard != nil
}

// Sent so the delegate can write represented objects to the pasteboard corresponding to a given array of display strings. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1528190-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldWriteRepresentedObjectsToPasteboard(f func(tokenField TokenField, objects []objc.Object, pboard Pasteboard) bool) {
	di._TokenFieldWriteRepresentedObjectsToPasteboard = f
}

// Sent so the delegate can write represented objects to the pasteboard corresponding to a given array of display strings. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1528190-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldWriteRepresentedObjectsToPasteboard(tokenField TokenField, objects []objc.Object, pboard Pasteboard) bool {
	return di._TokenFieldWriteRepresentedObjectsToPasteboard(tokenField, objects, pboard)
}
func (di *TokenFieldDelegate) HasTokenFieldReadFromPasteboard() bool {
	return di._TokenFieldReadFromPasteboard != nil
}

// Allows the delegate to return an array of objects representing the data read from the specified pasteboard. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1529534-tokenfield?language=objc
func (di *TokenFieldDelegate) SetTokenFieldReadFromPasteboard(f func(tokenField TokenField, pboard Pasteboard) []objc.Object) {
	di._TokenFieldReadFromPasteboard = f
}

// Allows the delegate to return an array of objects representing the data read from the specified pasteboard. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1529534-tokenfield?language=objc
func (di *TokenFieldDelegate) TokenFieldReadFromPasteboard(tokenField TokenField, pboard Pasteboard) []objc.Object {
	return di._TokenFieldReadFromPasteboard(tokenField, pboard)
}

// ensure impl type implements protocol interface
var _ PTokenFieldDelegate = (*TokenFieldDelegateObject)(nil)

// A concrete type for the [PTokenFieldDelegate] protocol.
type TokenFieldDelegateObject struct {
	TextFieldDelegateObject
}

func (t_ TokenFieldDelegateObject) HasTokenFieldHasMenuForRepresentedObject() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:hasMenuForRepresentedObject:"))
}

// Allows the delegate to specify whether the given represented object provides a menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1533494-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldHasMenuForRepresentedObject(tokenField TokenField, representedObject objc.Object) bool {
	rv := objc.Call[bool](t_, objc.Sel("tokenField:hasMenuForRepresentedObject:"), tokenField, representedObject)
	return rv
}

func (t_ TokenFieldDelegateObject) HasTokenFieldRepresentedObjectForEditingString() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:representedObjectForEditingString:"))
}

// Allows the delegate to provide a represented object for the given editing string. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1527909-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldRepresentedObjectForEditingString(tokenField TokenField, editingString string) objc.Object {
	rv := objc.Call[objc.Object](t_, objc.Sel("tokenField:representedObjectForEditingString:"), tokenField, editingString)
	return rv
}

func (t_ TokenFieldDelegateObject) HasTokenFieldMenuForRepresentedObject() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:menuForRepresentedObject:"))
}

// Allows the delegate to provide a menu for the specified represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1528750-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldMenuForRepresentedObject(tokenField TokenField, representedObject objc.Object) Menu {
	rv := objc.Call[Menu](t_, objc.Sel("tokenField:menuForRepresentedObject:"), tokenField, representedObject)
	return rv
}

func (t_ TokenFieldDelegateObject) HasTokenFieldShouldAddObjectsAtIndex() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:shouldAddObjects:atIndex:"))
}

// Allows the delegate to validate the tokens to be added to the receiver at a particular location. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1524376-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldShouldAddObjectsAtIndex(tokenField TokenField, tokens []objc.Object, index uint) []objc.Object {
	rv := objc.Call[[]objc.Object](t_, objc.Sel("tokenField:shouldAddObjects:atIndex:"), tokenField, tokens, index)
	return rv
}

func (t_ TokenFieldDelegateObject) HasTokenFieldEditingStringForRepresentedObject() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:editingStringForRepresentedObject:"))
}

// Allows the delegate to provide a string to be edited as a proxy for a represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1524432-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldEditingStringForRepresentedObject(tokenField TokenField, representedObject objc.Object) string {
	rv := objc.Call[string](t_, objc.Sel("tokenField:editingStringForRepresentedObject:"), tokenField, representedObject)
	return rv
}

func (t_ TokenFieldDelegateObject) HasTokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:"))
}

// Allows the delegate to provide an array of appropriate completions for the contents of the receiver. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1532474-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem(tokenField TokenField, substring string, tokenIndex int, selectedIndex *int) []objc.Object {
	rv := objc.Call[[]objc.Object](t_, objc.Sel("tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:"), tokenField, substring, tokenIndex, selectedIndex)
	return rv
}

func (t_ TokenFieldDelegateObject) HasTokenFieldDisplayStringForRepresentedObject() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:displayStringForRepresentedObject:"))
}

// Allows the delegate to provide a string to be displayed as a proxy for the given represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1526020-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldDisplayStringForRepresentedObject(tokenField TokenField, representedObject objc.Object) string {
	rv := objc.Call[string](t_, objc.Sel("tokenField:displayStringForRepresentedObject:"), tokenField, representedObject)
	return rv
}

func (t_ TokenFieldDelegateObject) HasTokenFieldStyleForRepresentedObject() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:styleForRepresentedObject:"))
}

// Allows the delegate to return the token style for editing the specified represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1530203-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldStyleForRepresentedObject(tokenField TokenField, representedObject objc.Object) TokenStyle {
	rv := objc.Call[TokenStyle](t_, objc.Sel("tokenField:styleForRepresentedObject:"), tokenField, representedObject)
	return rv
}

func (t_ TokenFieldDelegateObject) HasTokenFieldWriteRepresentedObjectsToPasteboard() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:writeRepresentedObjects:toPasteboard:"))
}

// Sent so the delegate can write represented objects to the pasteboard corresponding to a given array of display strings. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1528190-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldWriteRepresentedObjectsToPasteboard(tokenField TokenField, objects []objc.Object, pboard Pasteboard) bool {
	rv := objc.Call[bool](t_, objc.Sel("tokenField:writeRepresentedObjects:toPasteboard:"), tokenField, objects, pboard)
	return rv
}

func (t_ TokenFieldDelegateObject) HasTokenFieldReadFromPasteboard() bool {
	return t_.RespondsToSelector(objc.Sel("tokenField:readFromPasteboard:"))
}

// Allows the delegate to return an array of objects representing the data read from the specified pasteboard. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nstokenfielddelegate/1529534-tokenfield?language=objc
func (t_ TokenFieldDelegateObject) TokenFieldReadFromPasteboard(tokenField TokenField, pboard Pasteboard) []objc.Object {
	rv := objc.Call[[]objc.Object](t_, objc.Sel("tokenField:readFromPasteboard:"), tokenField, pboard)
	return rv
}
