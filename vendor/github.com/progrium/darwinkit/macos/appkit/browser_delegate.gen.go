// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// A set of methods that a browser delegate implements to manage selection, scrolling, sizing, and other behavior. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate?language=objc
type PBrowserDelegate interface {
	// optional
	BrowserNumberOfChildrenOfItem(browser Browser, item objc.Object) int
	HasBrowserNumberOfChildrenOfItem() bool

	// optional
	BrowserTitleOfColumn(sender Browser, column int) string
	HasBrowserTitleOfColumn() bool

	// optional
	BrowserHeightOfRowInColumn(browser Browser, row int, columnIndex int) float64
	HasBrowserHeightOfRowInColumn() bool

	// optional
	BrowserNumberOfRowsInColumn(sender Browser, column int) int
	HasBrowserNumberOfRowsInColumn() bool

	// optional
	BrowserDidChangeLastColumnToColumn(browser Browser, oldLastColumn int, column int)
	HasBrowserDidChangeLastColumnToColumn() bool

	// optional
	BrowserTypeSelectStringForRowInColumn(browser Browser, row int, column int) string
	HasBrowserTypeSelectStringForRowInColumn() bool

	// optional
	BrowserAcceptDropAtRowColumnDropOperation(browser Browser, info DraggingInfoObject, row int, column int, dropOperation BrowserDropOperation) bool
	HasBrowserAcceptDropAtRowColumnDropOperation() bool

	// optional
	BrowserHeaderViewControllerForItem(browser Browser, item objc.Object) ViewController
	HasBrowserHeaderViewControllerForItem() bool

	// optional
	BrowserCanDragRowsWithIndexesInColumnWithEvent(browser Browser, rowIndexes foundation.IndexSet, column int, event Event) bool
	HasBrowserCanDragRowsWithIndexesInColumnWithEvent() bool

	// optional
	BrowserNextTypeSelectMatchFromRowToRowInColumnForString(browser Browser, startRow int, endRow int, column int, searchString string) int
	HasBrowserNextTypeSelectMatchFromRowToRowInColumnForString() bool

	// optional
	BrowserSizeToFitWidthOfColumn(browser Browser, columnIndex int) float64
	HasBrowserSizeToFitWidthOfColumn() bool

	// optional
	BrowserDidScroll(sender Browser)
	HasBrowserDidScroll() bool

	// optional
	RootItemForBrowser(browser Browser) objc.Object
	HasRootItemForBrowser() bool

	// optional
	BrowserIsColumnValid(sender Browser, column int) bool
	HasBrowserIsColumnValid() bool

	// optional
	BrowserIsLeafItem(browser Browser, item objc.Object) bool
	HasBrowserIsLeafItem() bool

	// optional
	BrowserShouldSizeColumnForUserResizeToWidth(browser Browser, columnIndex int, forUserResize bool, suggestedWidth float64) float64
	HasBrowserShouldSizeColumnForUserResizeToWidth() bool

	// optional
	BrowserColumnConfigurationDidChange(notification foundation.Notification)
	HasBrowserColumnConfigurationDidChange() bool

	// optional
	BrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset(browser Browser, rowIndexes foundation.IndexSet, column int, event Event, dragImageOffset foundation.PointPointer) Image
	HasBrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset() bool

	// optional
	BrowserChildOfItem(browser Browser, index int, item objc.Object) objc.Object
	HasBrowserChildOfItem() bool

	// optional
	BrowserShouldEditItem(browser Browser, item objc.Object) bool
	HasBrowserShouldEditItem() bool

	// optional
	BrowserCreateRowsForColumnInMatrix(sender Browser, column int, matrix Matrix)
	HasBrowserCreateRowsForColumnInMatrix() bool

	// optional
	BrowserSetObjectValueForItem(browser Browser, object objc.Object, item objc.Object)
	HasBrowserSetObjectValueForItem() bool

	// optional
	BrowserShouldTypeSelectForEventWithCurrentSearchString(browser Browser, event Event, searchString string) bool
	HasBrowserShouldTypeSelectForEventWithCurrentSearchString() bool

	// optional
	BrowserPreviewViewControllerForLeafItem(browser Browser, item objc.Object) ViewController
	HasBrowserPreviewViewControllerForLeafItem() bool

	// optional
	BrowserWillScroll(sender Browser)
	HasBrowserWillScroll() bool

	// optional
	BrowserShouldShowCellExpansionForRowColumn(browser Browser, row int, column int) bool
	HasBrowserShouldShowCellExpansionForRowColumn() bool

	// optional
	BrowserWriteRowsWithIndexesInColumnToPasteboard(browser Browser, rowIndexes foundation.IndexSet, column int, pasteboard Pasteboard) bool
	HasBrowserWriteRowsWithIndexesInColumnToPasteboard() bool

	// optional
	BrowserSelectCellWithStringInColumn(sender Browser, title string, column int) bool
	HasBrowserSelectCellWithStringInColumn() bool

	// optional
	BrowserWillDisplayCellAtRowColumn(sender Browser, cell objc.Object, row int, column int)
	HasBrowserWillDisplayCellAtRowColumn() bool

	// optional
	BrowserSelectionIndexesForProposedSelectionInColumn(browser Browser, proposedSelectionIndexes foundation.IndexSet, column int) foundation.IndexSet
	HasBrowserSelectionIndexesForProposedSelectionInColumn() bool

	// optional
	BrowserObjectValueForItem(browser Browser, item objc.Object) objc.Object
	HasBrowserObjectValueForItem() bool

	// optional
	BrowserSelectRowInColumn(sender Browser, row int, column int) bool
	HasBrowserSelectRowInColumn() bool

	// optional
	BrowserValidateDropProposedRowColumnDropOperation(browser Browser, info DraggingInfoObject, row *int, column *int, dropOperation *BrowserDropOperation) DragOperation
	HasBrowserValidateDropProposedRowColumnDropOperation() bool
}

// A delegate implementation builder for the [PBrowserDelegate] protocol.
type BrowserDelegate struct {
	_BrowserNumberOfChildrenOfItem                                 func(browser Browser, item objc.Object) int
	_BrowserTitleOfColumn                                          func(sender Browser, column int) string
	_BrowserHeightOfRowInColumn                                    func(browser Browser, row int, columnIndex int) float64
	_BrowserNumberOfRowsInColumn                                   func(sender Browser, column int) int
	_BrowserDidChangeLastColumnToColumn                            func(browser Browser, oldLastColumn int, column int)
	_BrowserTypeSelectStringForRowInColumn                         func(browser Browser, row int, column int) string
	_BrowserAcceptDropAtRowColumnDropOperation                     func(browser Browser, info DraggingInfoObject, row int, column int, dropOperation BrowserDropOperation) bool
	_BrowserHeaderViewControllerForItem                            func(browser Browser, item objc.Object) ViewController
	_BrowserCanDragRowsWithIndexesInColumnWithEvent                func(browser Browser, rowIndexes foundation.IndexSet, column int, event Event) bool
	_BrowserNextTypeSelectMatchFromRowToRowInColumnForString       func(browser Browser, startRow int, endRow int, column int, searchString string) int
	_BrowserSizeToFitWidthOfColumn                                 func(browser Browser, columnIndex int) float64
	_BrowserDidScroll                                              func(sender Browser)
	_RootItemForBrowser                                            func(browser Browser) objc.Object
	_BrowserIsColumnValid                                          func(sender Browser, column int) bool
	_BrowserIsLeafItem                                             func(browser Browser, item objc.Object) bool
	_BrowserShouldSizeColumnForUserResizeToWidth                   func(browser Browser, columnIndex int, forUserResize bool, suggestedWidth float64) float64
	_BrowserColumnConfigurationDidChange                           func(notification foundation.Notification)
	_BrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset func(browser Browser, rowIndexes foundation.IndexSet, column int, event Event, dragImageOffset foundation.PointPointer) Image
	_BrowserChildOfItem                                            func(browser Browser, index int, item objc.Object) objc.Object
	_BrowserShouldEditItem                                         func(browser Browser, item objc.Object) bool
	_BrowserCreateRowsForColumnInMatrix                            func(sender Browser, column int, matrix Matrix)
	_BrowserSetObjectValueForItem                                  func(browser Browser, object objc.Object, item objc.Object)
	_BrowserShouldTypeSelectForEventWithCurrentSearchString        func(browser Browser, event Event, searchString string) bool
	_BrowserPreviewViewControllerForLeafItem                       func(browser Browser, item objc.Object) ViewController
	_BrowserWillScroll                                             func(sender Browser)
	_BrowserShouldShowCellExpansionForRowColumn                    func(browser Browser, row int, column int) bool
	_BrowserWriteRowsWithIndexesInColumnToPasteboard               func(browser Browser, rowIndexes foundation.IndexSet, column int, pasteboard Pasteboard) bool
	_BrowserSelectCellWithStringInColumn                           func(sender Browser, title string, column int) bool
	_BrowserWillDisplayCellAtRowColumn                             func(sender Browser, cell objc.Object, row int, column int)
	_BrowserSelectionIndexesForProposedSelectionInColumn           func(browser Browser, proposedSelectionIndexes foundation.IndexSet, column int) foundation.IndexSet
	_BrowserObjectValueForItem                                     func(browser Browser, item objc.Object) objc.Object
	_BrowserSelectRowInColumn                                      func(sender Browser, row int, column int) bool
	_BrowserValidateDropProposedRowColumnDropOperation             func(browser Browser, info DraggingInfoObject, row *int, column *int, dropOperation *BrowserDropOperation) DragOperation
}

func (di *BrowserDelegate) HasBrowserNumberOfChildrenOfItem() bool {
	return di._BrowserNumberOfChildrenOfItem != nil
}

// Asks the delegate for the number of children the given item has. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407755-browser?language=objc
func (di *BrowserDelegate) SetBrowserNumberOfChildrenOfItem(f func(browser Browser, item objc.Object) int) {
	di._BrowserNumberOfChildrenOfItem = f
}

// Asks the delegate for the number of children the given item has. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407755-browser?language=objc
func (di *BrowserDelegate) BrowserNumberOfChildrenOfItem(browser Browser, item objc.Object) int {
	return di._BrowserNumberOfChildrenOfItem(browser, item)
}
func (di *BrowserDelegate) HasBrowserTitleOfColumn() bool {
	return di._BrowserTitleOfColumn != nil
}

// Asks the delegate for the title to display above the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407677-browser?language=objc
func (di *BrowserDelegate) SetBrowserTitleOfColumn(f func(sender Browser, column int) string) {
	di._BrowserTitleOfColumn = f
}

// Asks the delegate for the title to display above the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407677-browser?language=objc
func (di *BrowserDelegate) BrowserTitleOfColumn(sender Browser, column int) string {
	return di._BrowserTitleOfColumn(sender, column)
}
func (di *BrowserDelegate) HasBrowserHeightOfRowInColumn() bool {
	return di._BrowserHeightOfRowInColumn != nil
}

// Specifies the height of the specified row in the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407646-browser?language=objc
func (di *BrowserDelegate) SetBrowserHeightOfRowInColumn(f func(browser Browser, row int, columnIndex int) float64) {
	di._BrowserHeightOfRowInColumn = f
}

// Specifies the height of the specified row in the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407646-browser?language=objc
func (di *BrowserDelegate) BrowserHeightOfRowInColumn(browser Browser, row int, columnIndex int) float64 {
	return di._BrowserHeightOfRowInColumn(browser, row, columnIndex)
}
func (di *BrowserDelegate) HasBrowserNumberOfRowsInColumn() bool {
	return di._BrowserNumberOfRowsInColumn != nil
}

// Returns the number of rows of data in the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407583-browser?language=objc
func (di *BrowserDelegate) SetBrowserNumberOfRowsInColumn(f func(sender Browser, column int) int) {
	di._BrowserNumberOfRowsInColumn = f
}

// Returns the number of rows of data in the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407583-browser?language=objc
func (di *BrowserDelegate) BrowserNumberOfRowsInColumn(sender Browser, column int) int {
	return di._BrowserNumberOfRowsInColumn(sender, column)
}
func (di *BrowserDelegate) HasBrowserDidChangeLastColumnToColumn() bool {
	return di._BrowserDidChangeLastColumnToColumn != nil
}

// Tells the delegate that the browser’s last column changed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407612-browser?language=objc
func (di *BrowserDelegate) SetBrowserDidChangeLastColumnToColumn(f func(browser Browser, oldLastColumn int, column int)) {
	di._BrowserDidChangeLastColumnToColumn = f
}

// Tells the delegate that the browser’s last column changed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407612-browser?language=objc
func (di *BrowserDelegate) BrowserDidChangeLastColumnToColumn(browser Browser, oldLastColumn int, column int) {
	di._BrowserDidChangeLastColumnToColumn(browser, oldLastColumn, column)
}
func (di *BrowserDelegate) HasBrowserTypeSelectStringForRowInColumn() bool {
	return di._BrowserTypeSelectStringForRowInColumn != nil
}

// Sent to the delegate to get the keyboard-based selection (type select) string for the specified row and column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407762-browser?language=objc
func (di *BrowserDelegate) SetBrowserTypeSelectStringForRowInColumn(f func(browser Browser, row int, column int) string) {
	di._BrowserTypeSelectStringForRowInColumn = f
}

// Sent to the delegate to get the keyboard-based selection (type select) string for the specified row and column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407762-browser?language=objc
func (di *BrowserDelegate) BrowserTypeSelectStringForRowInColumn(browser Browser, row int, column int) string {
	return di._BrowserTypeSelectStringForRowInColumn(browser, row, column)
}
func (di *BrowserDelegate) HasBrowserAcceptDropAtRowColumnDropOperation() bool {
	return di._BrowserAcceptDropAtRowColumnDropOperation != nil
}

// Sent to the delegate during a dragging session to determine whether to accept the drop. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407737-browser?language=objc
func (di *BrowserDelegate) SetBrowserAcceptDropAtRowColumnDropOperation(f func(browser Browser, info DraggingInfoObject, row int, column int, dropOperation BrowserDropOperation) bool) {
	di._BrowserAcceptDropAtRowColumnDropOperation = f
}

// Sent to the delegate during a dragging session to determine whether to accept the drop. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407737-browser?language=objc
func (di *BrowserDelegate) BrowserAcceptDropAtRowColumnDropOperation(browser Browser, info DraggingInfoObject, row int, column int, dropOperation BrowserDropOperation) bool {
	return di._BrowserAcceptDropAtRowColumnDropOperation(browser, info, row, column, dropOperation)
}
func (di *BrowserDelegate) HasBrowserHeaderViewControllerForItem() bool {
	return di._BrowserHeaderViewControllerForItem != nil
}

// Asks the delegate for a controller that provides a header view for the specified column item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407782-browser?language=objc
func (di *BrowserDelegate) SetBrowserHeaderViewControllerForItem(f func(browser Browser, item objc.Object) ViewController) {
	di._BrowserHeaderViewControllerForItem = f
}

// Asks the delegate for a controller that provides a header view for the specified column item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407782-browser?language=objc
func (di *BrowserDelegate) BrowserHeaderViewControllerForItem(browser Browser, item objc.Object) ViewController {
	return di._BrowserHeaderViewControllerForItem(browser, item)
}
func (di *BrowserDelegate) HasBrowserCanDragRowsWithIndexesInColumnWithEvent() bool {
	return di._BrowserCanDragRowsWithIndexesInColumnWithEvent != nil
}

// Sent to the delegate to determine whether the browser can attempt to initiate a drag of the specified rows for the specified event. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407768-browser?language=objc
func (di *BrowserDelegate) SetBrowserCanDragRowsWithIndexesInColumnWithEvent(f func(browser Browser, rowIndexes foundation.IndexSet, column int, event Event) bool) {
	di._BrowserCanDragRowsWithIndexesInColumnWithEvent = f
}

// Sent to the delegate to determine whether the browser can attempt to initiate a drag of the specified rows for the specified event. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407768-browser?language=objc
func (di *BrowserDelegate) BrowserCanDragRowsWithIndexesInColumnWithEvent(browser Browser, rowIndexes foundation.IndexSet, column int, event Event) bool {
	return di._BrowserCanDragRowsWithIndexesInColumnWithEvent(browser, rowIndexes, column, event)
}
func (di *BrowserDelegate) HasBrowserNextTypeSelectMatchFromRowToRowInColumnForString() bool {
	return di._BrowserNextTypeSelectMatchFromRowToRowInColumnForString != nil
}

// Sent to the delegate to customize a browser’s keyboard-based selection (type select) behavior. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407553-browser?language=objc
func (di *BrowserDelegate) SetBrowserNextTypeSelectMatchFromRowToRowInColumnForString(f func(browser Browser, startRow int, endRow int, column int, searchString string) int) {
	di._BrowserNextTypeSelectMatchFromRowToRowInColumnForString = f
}

// Sent to the delegate to customize a browser’s keyboard-based selection (type select) behavior. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407553-browser?language=objc
func (di *BrowserDelegate) BrowserNextTypeSelectMatchFromRowToRowInColumnForString(browser Browser, startRow int, endRow int, column int, searchString string) int {
	return di._BrowserNextTypeSelectMatchFromRowToRowInColumnForString(browser, startRow, endRow, column, searchString)
}
func (di *BrowserDelegate) HasBrowserSizeToFitWidthOfColumn() bool {
	return di._BrowserSizeToFitWidthOfColumn != nil
}

// Returns the ideal width for a column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407524-browser?language=objc
func (di *BrowserDelegate) SetBrowserSizeToFitWidthOfColumn(f func(browser Browser, columnIndex int) float64) {
	di._BrowserSizeToFitWidthOfColumn = f
}

// Returns the ideal width for a column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407524-browser?language=objc
func (di *BrowserDelegate) BrowserSizeToFitWidthOfColumn(browser Browser, columnIndex int) float64 {
	return di._BrowserSizeToFitWidthOfColumn(browser, columnIndex)
}
func (di *BrowserDelegate) HasBrowserDidScroll() bool {
	return di._BrowserDidScroll != nil
}

// Notifies the delegate when the browser has scrolled. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407566-browserdidscroll?language=objc
func (di *BrowserDelegate) SetBrowserDidScroll(f func(sender Browser)) {
	di._BrowserDidScroll = f
}

// Notifies the delegate when the browser has scrolled. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407566-browserdidscroll?language=objc
func (di *BrowserDelegate) BrowserDidScroll(sender Browser) {
	di._BrowserDidScroll(sender)
}
func (di *BrowserDelegate) HasRootItemForBrowser() bool {
	return di._RootItemForBrowser != nil
}

// Asks the delegate to return the root item of the browser. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407526-rootitemforbrowser?language=objc
func (di *BrowserDelegate) SetRootItemForBrowser(f func(browser Browser) objc.Object) {
	di._RootItemForBrowser = f
}

// Asks the delegate to return the root item of the browser. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407526-rootitemforbrowser?language=objc
func (di *BrowserDelegate) RootItemForBrowser(browser Browser) objc.Object {
	return di._RootItemForBrowser(browser)
}
func (di *BrowserDelegate) HasBrowserIsColumnValid() bool {
	return di._BrowserIsColumnValid != nil
}

// Returns whether the contents of the specified column are valid. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407540-browser?language=objc
func (di *BrowserDelegate) SetBrowserIsColumnValid(f func(sender Browser, column int) bool) {
	di._BrowserIsColumnValid = f
}

// Returns whether the contents of the specified column are valid. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407540-browser?language=objc
func (di *BrowserDelegate) BrowserIsColumnValid(sender Browser, column int) bool {
	return di._BrowserIsColumnValid(sender, column)
}
func (di *BrowserDelegate) HasBrowserIsLeafItem() bool {
	return di._BrowserIsLeafItem != nil
}

// Asks the delegate whether the specified item is a leaf item (an item that cannot be expanded). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407786-browser?language=objc
func (di *BrowserDelegate) SetBrowserIsLeafItem(f func(browser Browser, item objc.Object) bool) {
	di._BrowserIsLeafItem = f
}

// Asks the delegate whether the specified item is a leaf item (an item that cannot be expanded). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407786-browser?language=objc
func (di *BrowserDelegate) BrowserIsLeafItem(browser Browser, item objc.Object) bool {
	return di._BrowserIsLeafItem(browser, item)
}
func (di *BrowserDelegate) HasBrowserShouldSizeColumnForUserResizeToWidth() bool {
	return di._BrowserShouldSizeColumnForUserResizeToWidth != nil
}

// Used to determine a column’s initial size. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407557-browser?language=objc
func (di *BrowserDelegate) SetBrowserShouldSizeColumnForUserResizeToWidth(f func(browser Browser, columnIndex int, forUserResize bool, suggestedWidth float64) float64) {
	di._BrowserShouldSizeColumnForUserResizeToWidth = f
}

// Used to determine a column’s initial size. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407557-browser?language=objc
func (di *BrowserDelegate) BrowserShouldSizeColumnForUserResizeToWidth(browser Browser, columnIndex int, forUserResize bool, suggestedWidth float64) float64 {
	return di._BrowserShouldSizeColumnForUserResizeToWidth(browser, columnIndex, forUserResize, suggestedWidth)
}
func (di *BrowserDelegate) HasBrowserColumnConfigurationDidChange() bool {
	return di._BrowserColumnConfigurationDidChange != nil
}

// Used by clients to implement their own column width persistence. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407542-browsercolumnconfigurationdidcha?language=objc
func (di *BrowserDelegate) SetBrowserColumnConfigurationDidChange(f func(notification foundation.Notification)) {
	di._BrowserColumnConfigurationDidChange = f
}

// Used by clients to implement their own column width persistence. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407542-browsercolumnconfigurationdidcha?language=objc
func (di *BrowserDelegate) BrowserColumnConfigurationDidChange(notification foundation.Notification) {
	di._BrowserColumnConfigurationDidChange(notification)
}
func (di *BrowserDelegate) HasBrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset() bool {
	return di._BrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset != nil
}

// Sent to the delegate to obtain an image to represent dragged rows during a drag operation on a browser. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407598-browser?language=objc
func (di *BrowserDelegate) SetBrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset(f func(browser Browser, rowIndexes foundation.IndexSet, column int, event Event, dragImageOffset foundation.PointPointer) Image) {
	di._BrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset = f
}

// Sent to the delegate to obtain an image to represent dragged rows during a drag operation on a browser. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407598-browser?language=objc
func (di *BrowserDelegate) BrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset(browser Browser, rowIndexes foundation.IndexSet, column int, event Event, dragImageOffset foundation.PointPointer) Image {
	return di._BrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset(browser, rowIndexes, column, event, dragImageOffset)
}
func (di *BrowserDelegate) HasBrowserChildOfItem() bool {
	return di._BrowserChildOfItem != nil
}

// Asks the delegate to return the child of the specified item at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407572-browser?language=objc
func (di *BrowserDelegate) SetBrowserChildOfItem(f func(browser Browser, index int, item objc.Object) objc.Object) {
	di._BrowserChildOfItem = f
}

// Asks the delegate to return the child of the specified item at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407572-browser?language=objc
func (di *BrowserDelegate) BrowserChildOfItem(browser Browser, index int, item objc.Object) objc.Object {
	return di._BrowserChildOfItem(browser, index, item)
}
func (di *BrowserDelegate) HasBrowserShouldEditItem() bool {
	return di._BrowserShouldEditItem != nil
}

// Asks the delegate whether the browser may start an editing session for the specified item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407634-browser?language=objc
func (di *BrowserDelegate) SetBrowserShouldEditItem(f func(browser Browser, item objc.Object) bool) {
	di._BrowserShouldEditItem = f
}

// Asks the delegate whether the browser may start an editing session for the specified item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407634-browser?language=objc
func (di *BrowserDelegate) BrowserShouldEditItem(browser Browser, item objc.Object) bool {
	return di._BrowserShouldEditItem(browser, item)
}
func (di *BrowserDelegate) HasBrowserCreateRowsForColumnInMatrix() bool {
	return di._BrowserCreateRowsForColumnInMatrix != nil
}

// Creates a row in the given matrix for each row of data in the specified column of the browser. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407666-browser?language=objc
func (di *BrowserDelegate) SetBrowserCreateRowsForColumnInMatrix(f func(sender Browser, column int, matrix Matrix)) {
	di._BrowserCreateRowsForColumnInMatrix = f
}

// Creates a row in the given matrix for each row of data in the specified column of the browser. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407666-browser?language=objc
func (di *BrowserDelegate) BrowserCreateRowsForColumnInMatrix(sender Browser, column int, matrix Matrix) {
	di._BrowserCreateRowsForColumnInMatrix(sender, column, matrix)
}
func (di *BrowserDelegate) HasBrowserSetObjectValueForItem() bool {
	return di._BrowserSetObjectValueForItem != nil
}

// Sets the object that the specified item uses to draw its contents to the specified object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407756-browser?language=objc
func (di *BrowserDelegate) SetBrowserSetObjectValueForItem(f func(browser Browser, object objc.Object, item objc.Object)) {
	di._BrowserSetObjectValueForItem = f
}

// Sets the object that the specified item uses to draw its contents to the specified object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407756-browser?language=objc
func (di *BrowserDelegate) BrowserSetObjectValueForItem(browser Browser, object objc.Object, item objc.Object) {
	di._BrowserSetObjectValueForItem(browser, object, item)
}
func (di *BrowserDelegate) HasBrowserShouldTypeSelectForEventWithCurrentSearchString() bool {
	return di._BrowserShouldTypeSelectForEventWithCurrentSearchString != nil
}

// Sent to the delegate to determine whether keyboard-based selection (type select) for a given event and search string should proceed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407804-browser?language=objc
func (di *BrowserDelegate) SetBrowserShouldTypeSelectForEventWithCurrentSearchString(f func(browser Browser, event Event, searchString string) bool) {
	di._BrowserShouldTypeSelectForEventWithCurrentSearchString = f
}

// Sent to the delegate to determine whether keyboard-based selection (type select) for a given event and search string should proceed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407804-browser?language=objc
func (di *BrowserDelegate) BrowserShouldTypeSelectForEventWithCurrentSearchString(browser Browser, event Event, searchString string) bool {
	return di._BrowserShouldTypeSelectForEventWithCurrentSearchString(browser, event, searchString)
}
func (di *BrowserDelegate) HasBrowserPreviewViewControllerForLeafItem() bool {
	return di._BrowserPreviewViewControllerForLeafItem != nil
}

// Asks the delegate for a controller that provides a preview column for the specified leaf item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407772-browser?language=objc
func (di *BrowserDelegate) SetBrowserPreviewViewControllerForLeafItem(f func(browser Browser, item objc.Object) ViewController) {
	di._BrowserPreviewViewControllerForLeafItem = f
}

// Asks the delegate for a controller that provides a preview column for the specified leaf item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407772-browser?language=objc
func (di *BrowserDelegate) BrowserPreviewViewControllerForLeafItem(browser Browser, item objc.Object) ViewController {
	return di._BrowserPreviewViewControllerForLeafItem(browser, item)
}
func (di *BrowserDelegate) HasBrowserWillScroll() bool {
	return di._BrowserWillScroll != nil
}

// Notifies the delegate when the browser will scroll. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407721-browserwillscroll?language=objc
func (di *BrowserDelegate) SetBrowserWillScroll(f func(sender Browser)) {
	di._BrowserWillScroll = f
}

// Notifies the delegate when the browser will scroll. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407721-browserwillscroll?language=objc
func (di *BrowserDelegate) BrowserWillScroll(sender Browser) {
	di._BrowserWillScroll(sender)
}
func (di *BrowserDelegate) HasBrowserShouldShowCellExpansionForRowColumn() bool {
	return di._BrowserShouldShowCellExpansionForRowColumn != nil
}

// Invoked to allow the delegate to control cell expansion for a specific row and column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407602-browser?language=objc
func (di *BrowserDelegate) SetBrowserShouldShowCellExpansionForRowColumn(f func(browser Browser, row int, column int) bool) {
	di._BrowserShouldShowCellExpansionForRowColumn = f
}

// Invoked to allow the delegate to control cell expansion for a specific row and column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407602-browser?language=objc
func (di *BrowserDelegate) BrowserShouldShowCellExpansionForRowColumn(browser Browser, row int, column int) bool {
	return di._BrowserShouldShowCellExpansionForRowColumn(browser, row, column)
}
func (di *BrowserDelegate) HasBrowserWriteRowsWithIndexesInColumnToPasteboard() bool {
	return di._BrowserWriteRowsWithIndexesInColumnToPasteboard != nil
}

// Determines whether a drag operation can proceed. This method is required for a browser to be a drag source. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407657-browser?language=objc
func (di *BrowserDelegate) SetBrowserWriteRowsWithIndexesInColumnToPasteboard(f func(browser Browser, rowIndexes foundation.IndexSet, column int, pasteboard Pasteboard) bool) {
	di._BrowserWriteRowsWithIndexesInColumnToPasteboard = f
}

// Determines whether a drag operation can proceed. This method is required for a browser to be a drag source. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407657-browser?language=objc
func (di *BrowserDelegate) BrowserWriteRowsWithIndexesInColumnToPasteboard(browser Browser, rowIndexes foundation.IndexSet, column int, pasteboard Pasteboard) bool {
	return di._BrowserWriteRowsWithIndexesInColumnToPasteboard(browser, rowIndexes, column, pasteboard)
}
func (di *BrowserDelegate) HasBrowserSelectCellWithStringInColumn() bool {
	return di._BrowserSelectCellWithStringInColumn != nil
}

// Asks the delegate to select the cell with the given title in the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407548-browser?language=objc
func (di *BrowserDelegate) SetBrowserSelectCellWithStringInColumn(f func(sender Browser, title string, column int) bool) {
	di._BrowserSelectCellWithStringInColumn = f
}

// Asks the delegate to select the cell with the given title in the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407548-browser?language=objc
func (di *BrowserDelegate) BrowserSelectCellWithStringInColumn(sender Browser, title string, column int) bool {
	return di._BrowserSelectCellWithStringInColumn(sender, title, column)
}
func (di *BrowserDelegate) HasBrowserWillDisplayCellAtRowColumn() bool {
	return di._BrowserWillDisplayCellAtRowColumn != nil
}

// Gives the delegate the opportunity to modify the specified cell at the given row and column location before the browser displays it. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407705-browser?language=objc
func (di *BrowserDelegate) SetBrowserWillDisplayCellAtRowColumn(f func(sender Browser, cell objc.Object, row int, column int)) {
	di._BrowserWillDisplayCellAtRowColumn = f
}

// Gives the delegate the opportunity to modify the specified cell at the given row and column location before the browser displays it. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407705-browser?language=objc
func (di *BrowserDelegate) BrowserWillDisplayCellAtRowColumn(sender Browser, cell objc.Object, row int, column int) {
	di._BrowserWillDisplayCellAtRowColumn(sender, cell, row, column)
}
func (di *BrowserDelegate) HasBrowserSelectionIndexesForProposedSelectionInColumn() bool {
	return di._BrowserSelectionIndexesForProposedSelectionInColumn != nil
}

// Asks the delegate for a set of indexes to select when the user changes the selection in the browser with the keyboard or mouse. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407660-browser?language=objc
func (di *BrowserDelegate) SetBrowserSelectionIndexesForProposedSelectionInColumn(f func(browser Browser, proposedSelectionIndexes foundation.IndexSet, column int) foundation.IndexSet) {
	di._BrowserSelectionIndexesForProposedSelectionInColumn = f
}

// Asks the delegate for a set of indexes to select when the user changes the selection in the browser with the keyboard or mouse. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407660-browser?language=objc
func (di *BrowserDelegate) BrowserSelectionIndexesForProposedSelectionInColumn(browser Browser, proposedSelectionIndexes foundation.IndexSet, column int) foundation.IndexSet {
	return di._BrowserSelectionIndexesForProposedSelectionInColumn(browser, proposedSelectionIndexes, column)
}
func (di *BrowserDelegate) HasBrowserObjectValueForItem() bool {
	return di._BrowserObjectValueForItem != nil
}

// Returns the object that the specified item uses to draw its contents. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407594-browser?language=objc
func (di *BrowserDelegate) SetBrowserObjectValueForItem(f func(browser Browser, item objc.Object) objc.Object) {
	di._BrowserObjectValueForItem = f
}

// Returns the object that the specified item uses to draw its contents. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407594-browser?language=objc
func (di *BrowserDelegate) BrowserObjectValueForItem(browser Browser, item objc.Object) objc.Object {
	return di._BrowserObjectValueForItem(browser, item)
}
func (di *BrowserDelegate) HasBrowserSelectRowInColumn() bool {
	return di._BrowserSelectRowInColumn != nil
}

// Asks the delegate to select the cell at the specified row and column location. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407802-browser?language=objc
func (di *BrowserDelegate) SetBrowserSelectRowInColumn(f func(sender Browser, row int, column int) bool) {
	di._BrowserSelectRowInColumn = f
}

// Asks the delegate to select the cell at the specified row and column location. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407802-browser?language=objc
func (di *BrowserDelegate) BrowserSelectRowInColumn(sender Browser, row int, column int) bool {
	return di._BrowserSelectRowInColumn(sender, row, column)
}
func (di *BrowserDelegate) HasBrowserValidateDropProposedRowColumnDropOperation() bool {
	return di._BrowserValidateDropProposedRowColumnDropOperation != nil
}

// Sent to the delegate during a dragging session to determine whether a drop should be accepted and to obtain the drop location. This method is required for a browser to be a drag destination. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407766-browser?language=objc
func (di *BrowserDelegate) SetBrowserValidateDropProposedRowColumnDropOperation(f func(browser Browser, info DraggingInfoObject, row *int, column *int, dropOperation *BrowserDropOperation) DragOperation) {
	di._BrowserValidateDropProposedRowColumnDropOperation = f
}

// Sent to the delegate during a dragging session to determine whether a drop should be accepted and to obtain the drop location. This method is required for a browser to be a drag destination. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407766-browser?language=objc
func (di *BrowserDelegate) BrowserValidateDropProposedRowColumnDropOperation(browser Browser, info DraggingInfoObject, row *int, column *int, dropOperation *BrowserDropOperation) DragOperation {
	return di._BrowserValidateDropProposedRowColumnDropOperation(browser, info, row, column, dropOperation)
}

// ensure impl type implements protocol interface
var _ PBrowserDelegate = (*BrowserDelegateObject)(nil)

// A concrete type for the [PBrowserDelegate] protocol.
type BrowserDelegateObject struct {
	objc.Object
}

func (b_ BrowserDelegateObject) HasBrowserNumberOfChildrenOfItem() bool {
	return b_.RespondsToSelector(objc.Sel("browser:numberOfChildrenOfItem:"))
}

// Asks the delegate for the number of children the given item has. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407755-browser?language=objc
func (b_ BrowserDelegateObject) BrowserNumberOfChildrenOfItem(browser Browser, item objc.Object) int {
	rv := objc.Call[int](b_, objc.Sel("browser:numberOfChildrenOfItem:"), browser, item)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserTitleOfColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:titleOfColumn:"))
}

// Asks the delegate for the title to display above the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407677-browser?language=objc
func (b_ BrowserDelegateObject) BrowserTitleOfColumn(sender Browser, column int) string {
	rv := objc.Call[string](b_, objc.Sel("browser:titleOfColumn:"), sender, column)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserHeightOfRowInColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:heightOfRow:inColumn:"))
}

// Specifies the height of the specified row in the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407646-browser?language=objc
func (b_ BrowserDelegateObject) BrowserHeightOfRowInColumn(browser Browser, row int, columnIndex int) float64 {
	rv := objc.Call[float64](b_, objc.Sel("browser:heightOfRow:inColumn:"), browser, row, columnIndex)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserNumberOfRowsInColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:numberOfRowsInColumn:"))
}

// Returns the number of rows of data in the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407583-browser?language=objc
func (b_ BrowserDelegateObject) BrowserNumberOfRowsInColumn(sender Browser, column int) int {
	rv := objc.Call[int](b_, objc.Sel("browser:numberOfRowsInColumn:"), sender, column)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserDidChangeLastColumnToColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:didChangeLastColumn:toColumn:"))
}

// Tells the delegate that the browser’s last column changed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407612-browser?language=objc
func (b_ BrowserDelegateObject) BrowserDidChangeLastColumnToColumn(browser Browser, oldLastColumn int, column int) {
	objc.Call[objc.Void](b_, objc.Sel("browser:didChangeLastColumn:toColumn:"), browser, oldLastColumn, column)
}

func (b_ BrowserDelegateObject) HasBrowserTypeSelectStringForRowInColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:typeSelectStringForRow:inColumn:"))
}

// Sent to the delegate to get the keyboard-based selection (type select) string for the specified row and column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407762-browser?language=objc
func (b_ BrowserDelegateObject) BrowserTypeSelectStringForRowInColumn(browser Browser, row int, column int) string {
	rv := objc.Call[string](b_, objc.Sel("browser:typeSelectStringForRow:inColumn:"), browser, row, column)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserAcceptDropAtRowColumnDropOperation() bool {
	return b_.RespondsToSelector(objc.Sel("browser:acceptDrop:atRow:column:dropOperation:"))
}

// Sent to the delegate during a dragging session to determine whether to accept the drop. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407737-browser?language=objc
func (b_ BrowserDelegateObject) BrowserAcceptDropAtRowColumnDropOperation(browser Browser, info DraggingInfoObject, row int, column int, dropOperation BrowserDropOperation) bool {
	po1 := objc.WrapAsProtocol("NSDraggingInfo", info)
	rv := objc.Call[bool](b_, objc.Sel("browser:acceptDrop:atRow:column:dropOperation:"), browser, po1, row, column, dropOperation)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserHeaderViewControllerForItem() bool {
	return b_.RespondsToSelector(objc.Sel("browser:headerViewControllerForItem:"))
}

// Asks the delegate for a controller that provides a header view for the specified column item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407782-browser?language=objc
func (b_ BrowserDelegateObject) BrowserHeaderViewControllerForItem(browser Browser, item objc.Object) ViewController {
	rv := objc.Call[ViewController](b_, objc.Sel("browser:headerViewControllerForItem:"), browser, item)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserCanDragRowsWithIndexesInColumnWithEvent() bool {
	return b_.RespondsToSelector(objc.Sel("browser:canDragRowsWithIndexes:inColumn:withEvent:"))
}

// Sent to the delegate to determine whether the browser can attempt to initiate a drag of the specified rows for the specified event. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407768-browser?language=objc
func (b_ BrowserDelegateObject) BrowserCanDragRowsWithIndexesInColumnWithEvent(browser Browser, rowIndexes foundation.IndexSet, column int, event Event) bool {
	rv := objc.Call[bool](b_, objc.Sel("browser:canDragRowsWithIndexes:inColumn:withEvent:"), browser, rowIndexes, column, event)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserNextTypeSelectMatchFromRowToRowInColumnForString() bool {
	return b_.RespondsToSelector(objc.Sel("browser:nextTypeSelectMatchFromRow:toRow:inColumn:forString:"))
}

// Sent to the delegate to customize a browser’s keyboard-based selection (type select) behavior. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407553-browser?language=objc
func (b_ BrowserDelegateObject) BrowserNextTypeSelectMatchFromRowToRowInColumnForString(browser Browser, startRow int, endRow int, column int, searchString string) int {
	rv := objc.Call[int](b_, objc.Sel("browser:nextTypeSelectMatchFromRow:toRow:inColumn:forString:"), browser, startRow, endRow, column, searchString)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserSizeToFitWidthOfColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:sizeToFitWidthOfColumn:"))
}

// Returns the ideal width for a column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407524-browser?language=objc
func (b_ BrowserDelegateObject) BrowserSizeToFitWidthOfColumn(browser Browser, columnIndex int) float64 {
	rv := objc.Call[float64](b_, objc.Sel("browser:sizeToFitWidthOfColumn:"), browser, columnIndex)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserDidScroll() bool {
	return b_.RespondsToSelector(objc.Sel("browserDidScroll:"))
}

// Notifies the delegate when the browser has scrolled. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407566-browserdidscroll?language=objc
func (b_ BrowserDelegateObject) BrowserDidScroll(sender Browser) {
	objc.Call[objc.Void](b_, objc.Sel("browserDidScroll:"), sender)
}

func (b_ BrowserDelegateObject) HasRootItemForBrowser() bool {
	return b_.RespondsToSelector(objc.Sel("rootItemForBrowser:"))
}

// Asks the delegate to return the root item of the browser. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407526-rootitemforbrowser?language=objc
func (b_ BrowserDelegateObject) RootItemForBrowser(browser Browser) objc.Object {
	rv := objc.Call[objc.Object](b_, objc.Sel("rootItemForBrowser:"), browser)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserIsColumnValid() bool {
	return b_.RespondsToSelector(objc.Sel("browser:isColumnValid:"))
}

// Returns whether the contents of the specified column are valid. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407540-browser?language=objc
func (b_ BrowserDelegateObject) BrowserIsColumnValid(sender Browser, column int) bool {
	rv := objc.Call[bool](b_, objc.Sel("browser:isColumnValid:"), sender, column)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserIsLeafItem() bool {
	return b_.RespondsToSelector(objc.Sel("browser:isLeafItem:"))
}

// Asks the delegate whether the specified item is a leaf item (an item that cannot be expanded). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407786-browser?language=objc
func (b_ BrowserDelegateObject) BrowserIsLeafItem(browser Browser, item objc.Object) bool {
	rv := objc.Call[bool](b_, objc.Sel("browser:isLeafItem:"), browser, item)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserShouldSizeColumnForUserResizeToWidth() bool {
	return b_.RespondsToSelector(objc.Sel("browser:shouldSizeColumn:forUserResize:toWidth:"))
}

// Used to determine a column’s initial size. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407557-browser?language=objc
func (b_ BrowserDelegateObject) BrowserShouldSizeColumnForUserResizeToWidth(browser Browser, columnIndex int, forUserResize bool, suggestedWidth float64) float64 {
	rv := objc.Call[float64](b_, objc.Sel("browser:shouldSizeColumn:forUserResize:toWidth:"), browser, columnIndex, forUserResize, suggestedWidth)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserColumnConfigurationDidChange() bool {
	return b_.RespondsToSelector(objc.Sel("browserColumnConfigurationDidChange:"))
}

// Used by clients to implement their own column width persistence. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407542-browsercolumnconfigurationdidcha?language=objc
func (b_ BrowserDelegateObject) BrowserColumnConfigurationDidChange(notification foundation.Notification) {
	objc.Call[objc.Void](b_, objc.Sel("browserColumnConfigurationDidChange:"), notification)
}

func (b_ BrowserDelegateObject) HasBrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset() bool {
	return b_.RespondsToSelector(objc.Sel("browser:draggingImageForRowsWithIndexes:inColumn:withEvent:offset:"))
}

// Sent to the delegate to obtain an image to represent dragged rows during a drag operation on a browser. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407598-browser?language=objc
func (b_ BrowserDelegateObject) BrowserDraggingImageForRowsWithIndexesInColumnWithEventOffset(browser Browser, rowIndexes foundation.IndexSet, column int, event Event, dragImageOffset foundation.PointPointer) Image {
	rv := objc.Call[Image](b_, objc.Sel("browser:draggingImageForRowsWithIndexes:inColumn:withEvent:offset:"), browser, rowIndexes, column, event, dragImageOffset)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserChildOfItem() bool {
	return b_.RespondsToSelector(objc.Sel("browser:child:ofItem:"))
}

// Asks the delegate to return the child of the specified item at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407572-browser?language=objc
func (b_ BrowserDelegateObject) BrowserChildOfItem(browser Browser, index int, item objc.Object) objc.Object {
	rv := objc.Call[objc.Object](b_, objc.Sel("browser:child:ofItem:"), browser, index, item)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserShouldEditItem() bool {
	return b_.RespondsToSelector(objc.Sel("browser:shouldEditItem:"))
}

// Asks the delegate whether the browser may start an editing session for the specified item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407634-browser?language=objc
func (b_ BrowserDelegateObject) BrowserShouldEditItem(browser Browser, item objc.Object) bool {
	rv := objc.Call[bool](b_, objc.Sel("browser:shouldEditItem:"), browser, item)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserCreateRowsForColumnInMatrix() bool {
	return b_.RespondsToSelector(objc.Sel("browser:createRowsForColumn:inMatrix:"))
}

// Creates a row in the given matrix for each row of data in the specified column of the browser. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407666-browser?language=objc
func (b_ BrowserDelegateObject) BrowserCreateRowsForColumnInMatrix(sender Browser, column int, matrix Matrix) {
	objc.Call[objc.Void](b_, objc.Sel("browser:createRowsForColumn:inMatrix:"), sender, column, matrix)
}

func (b_ BrowserDelegateObject) HasBrowserSetObjectValueForItem() bool {
	return b_.RespondsToSelector(objc.Sel("browser:setObjectValue:forItem:"))
}

// Sets the object that the specified item uses to draw its contents to the specified object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407756-browser?language=objc
func (b_ BrowserDelegateObject) BrowserSetObjectValueForItem(browser Browser, object objc.Object, item objc.Object) {
	objc.Call[objc.Void](b_, objc.Sel("browser:setObjectValue:forItem:"), browser, object, item)
}

func (b_ BrowserDelegateObject) HasBrowserShouldTypeSelectForEventWithCurrentSearchString() bool {
	return b_.RespondsToSelector(objc.Sel("browser:shouldTypeSelectForEvent:withCurrentSearchString:"))
}

// Sent to the delegate to determine whether keyboard-based selection (type select) for a given event and search string should proceed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407804-browser?language=objc
func (b_ BrowserDelegateObject) BrowserShouldTypeSelectForEventWithCurrentSearchString(browser Browser, event Event, searchString string) bool {
	rv := objc.Call[bool](b_, objc.Sel("browser:shouldTypeSelectForEvent:withCurrentSearchString:"), browser, event, searchString)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserPreviewViewControllerForLeafItem() bool {
	return b_.RespondsToSelector(objc.Sel("browser:previewViewControllerForLeafItem:"))
}

// Asks the delegate for a controller that provides a preview column for the specified leaf item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407772-browser?language=objc
func (b_ BrowserDelegateObject) BrowserPreviewViewControllerForLeafItem(browser Browser, item objc.Object) ViewController {
	rv := objc.Call[ViewController](b_, objc.Sel("browser:previewViewControllerForLeafItem:"), browser, item)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserWillScroll() bool {
	return b_.RespondsToSelector(objc.Sel("browserWillScroll:"))
}

// Notifies the delegate when the browser will scroll. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407721-browserwillscroll?language=objc
func (b_ BrowserDelegateObject) BrowserWillScroll(sender Browser) {
	objc.Call[objc.Void](b_, objc.Sel("browserWillScroll:"), sender)
}

func (b_ BrowserDelegateObject) HasBrowserShouldShowCellExpansionForRowColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:shouldShowCellExpansionForRow:column:"))
}

// Invoked to allow the delegate to control cell expansion for a specific row and column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407602-browser?language=objc
func (b_ BrowserDelegateObject) BrowserShouldShowCellExpansionForRowColumn(browser Browser, row int, column int) bool {
	rv := objc.Call[bool](b_, objc.Sel("browser:shouldShowCellExpansionForRow:column:"), browser, row, column)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserWriteRowsWithIndexesInColumnToPasteboard() bool {
	return b_.RespondsToSelector(objc.Sel("browser:writeRowsWithIndexes:inColumn:toPasteboard:"))
}

// Determines whether a drag operation can proceed. This method is required for a browser to be a drag source. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407657-browser?language=objc
func (b_ BrowserDelegateObject) BrowserWriteRowsWithIndexesInColumnToPasteboard(browser Browser, rowIndexes foundation.IndexSet, column int, pasteboard Pasteboard) bool {
	rv := objc.Call[bool](b_, objc.Sel("browser:writeRowsWithIndexes:inColumn:toPasteboard:"), browser, rowIndexes, column, pasteboard)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserSelectCellWithStringInColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:selectCellWithString:inColumn:"))
}

// Asks the delegate to select the cell with the given title in the specified column. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407548-browser?language=objc
func (b_ BrowserDelegateObject) BrowserSelectCellWithStringInColumn(sender Browser, title string, column int) bool {
	rv := objc.Call[bool](b_, objc.Sel("browser:selectCellWithString:inColumn:"), sender, title, column)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserWillDisplayCellAtRowColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:willDisplayCell:atRow:column:"))
}

// Gives the delegate the opportunity to modify the specified cell at the given row and column location before the browser displays it. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407705-browser?language=objc
func (b_ BrowserDelegateObject) BrowserWillDisplayCellAtRowColumn(sender Browser, cell objc.Object, row int, column int) {
	objc.Call[objc.Void](b_, objc.Sel("browser:willDisplayCell:atRow:column:"), sender, cell, row, column)
}

func (b_ BrowserDelegateObject) HasBrowserSelectionIndexesForProposedSelectionInColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:selectionIndexesForProposedSelection:inColumn:"))
}

// Asks the delegate for a set of indexes to select when the user changes the selection in the browser with the keyboard or mouse. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407660-browser?language=objc
func (b_ BrowserDelegateObject) BrowserSelectionIndexesForProposedSelectionInColumn(browser Browser, proposedSelectionIndexes foundation.IndexSet, column int) foundation.IndexSet {
	rv := objc.Call[foundation.IndexSet](b_, objc.Sel("browser:selectionIndexesForProposedSelection:inColumn:"), browser, proposedSelectionIndexes, column)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserObjectValueForItem() bool {
	return b_.RespondsToSelector(objc.Sel("browser:objectValueForItem:"))
}

// Returns the object that the specified item uses to draw its contents. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407594-browser?language=objc
func (b_ BrowserDelegateObject) BrowserObjectValueForItem(browser Browser, item objc.Object) objc.Object {
	rv := objc.Call[objc.Object](b_, objc.Sel("browser:objectValueForItem:"), browser, item)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserSelectRowInColumn() bool {
	return b_.RespondsToSelector(objc.Sel("browser:selectRow:inColumn:"))
}

// Asks the delegate to select the cell at the specified row and column location. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407802-browser?language=objc
func (b_ BrowserDelegateObject) BrowserSelectRowInColumn(sender Browser, row int, column int) bool {
	rv := objc.Call[bool](b_, objc.Sel("browser:selectRow:inColumn:"), sender, row, column)
	return rv
}

func (b_ BrowserDelegateObject) HasBrowserValidateDropProposedRowColumnDropOperation() bool {
	return b_.RespondsToSelector(objc.Sel("browser:validateDrop:proposedRow:column:dropOperation:"))
}

// Sent to the delegate during a dragging session to determine whether a drop should be accepted and to obtain the drop location. This method is required for a browser to be a drag destination. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbrowserdelegate/1407766-browser?language=objc
func (b_ BrowserDelegateObject) BrowserValidateDropProposedRowColumnDropOperation(browser Browser, info DraggingInfoObject, row *int, column *int, dropOperation *BrowserDropOperation) DragOperation {
	po1 := objc.WrapAsProtocol("NSDraggingInfo", info)
	rv := objc.Call[DragOperation](b_, objc.Sel("browser:validateDrop:proposedRow:column:dropOperation:"), browser, po1, row, column, dropOperation)
	return rv
}
