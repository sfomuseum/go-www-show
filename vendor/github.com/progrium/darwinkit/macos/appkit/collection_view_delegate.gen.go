// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"unsafe"

	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// A set of methods that you use to manage the behavior of a collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate?language=objc
type PCollectionViewDelegate interface {
	// optional
	CollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath)
	HasCollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath() bool

	// optional
	CollectionViewDraggingImageForItemsAtIndexesWithEventOffset(collectionView CollectionView, indexes foundation.IndexSet, event Event, dragImageOffset foundation.PointPointer) Image
	HasCollectionViewDraggingImageForItemsAtIndexesWithEventOffset() bool

	// optional
	CollectionViewCanDragItemsAtIndexPathsWithEvent(collectionView CollectionView, indexPaths foundation.Set, event Event) bool
	HasCollectionViewCanDragItemsAtIndexPathsWithEvent() bool

	// optional
	CollectionViewPasteboardWriterForItemAtIndex(collectionView CollectionView, index uint) PasteboardWritingObject
	HasCollectionViewPasteboardWriterForItemAtIndex() bool

	// optional
	CollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset(collectionView CollectionView, indexPaths foundation.Set, event Event, dragImageOffset foundation.PointPointer) Image
	HasCollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset() bool

	// optional
	CollectionViewShouldChangeItemsAtIndexPathsToHighlightState(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState) foundation.Set
	HasCollectionViewShouldChangeItemsAtIndexPathsToHighlightState() bool

	// optional
	CollectionViewCanDragItemsAtIndexesWithEvent(collectionView CollectionView, indexes foundation.IndexSet, event Event) bool
	HasCollectionViewCanDragItemsAtIndexesWithEvent() bool

	// optional
	CollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath)
	HasCollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath() bool

	// optional
	CollectionViewAcceptDropIndexPathDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, indexPath foundation.IndexPath, dropOperation CollectionViewDropOperation) bool
	HasCollectionViewAcceptDropIndexPathDropOperation() bool

	// optional
	CollectionViewAcceptDropIndexDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, index int, dropOperation CollectionViewDropOperation) bool
	HasCollectionViewAcceptDropIndexDropOperation() bool

	// optional
	CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexes foundation.IndexSet)
	HasCollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes() bool

	// optional
	CollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath)
	HasCollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath() bool

	// optional
	CollectionViewShouldDeselectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) foundation.Set
	HasCollectionViewShouldDeselectItemsAtIndexPaths() bool

	// optional
	CollectionViewDidChangeItemsAtIndexPathsToHighlightState(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState)
	HasCollectionViewDidChangeItemsAtIndexPathsToHighlightState() bool

	// optional
	CollectionViewDraggingSessionEndedAtPointDragOperation(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, operation DragOperation)
	HasCollectionViewDraggingSessionEndedAtPointDragOperation() bool

	// optional
	CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexPaths foundation.Set)
	HasCollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths() bool

	// optional
	CollectionViewWillDisplayItemForRepresentedObjectAtIndexPath(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath)
	HasCollectionViewWillDisplayItemForRepresentedObjectAtIndexPath() bool

	// optional
	CollectionViewValidateDropProposedIndexDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndex *int, proposedDropOperation *CollectionViewDropOperation) DragOperation
	HasCollectionViewValidateDropProposedIndexDropOperation() bool

	// optional
	CollectionViewUpdateDraggingItemsForDrag(collectionView CollectionView, draggingInfo DraggingInfoObject)
	HasCollectionViewUpdateDraggingItemsForDrag() bool

	// optional
	CollectionViewPasteboardWriterForItemAtIndexPath(collectionView CollectionView, indexPath foundation.IndexPath) PasteboardWritingObject
	HasCollectionViewPasteboardWriterForItemAtIndexPath() bool

	// optional
	CollectionViewShouldSelectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) foundation.Set
	HasCollectionViewShouldSelectItemsAtIndexPaths() bool

	// optional
	CollectionViewDidSelectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set)
	HasCollectionViewDidSelectItemsAtIndexPaths() bool

	// optional
	CollectionViewValidateDropProposedIndexPathDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndexPath unsafe.Pointer, proposedDropOperation *CollectionViewDropOperation) DragOperation
	HasCollectionViewValidateDropProposedIndexPathDropOperation() bool

	// optional
	CollectionViewTransitionLayoutForOldLayoutNewLayout(collectionView CollectionView, fromLayout CollectionViewLayout, toLayout CollectionViewLayout) CollectionViewTransitionLayout
	HasCollectionViewTransitionLayoutForOldLayoutNewLayout() bool

	// optional
	CollectionViewDidDeselectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set)
	HasCollectionViewDidDeselectItemsAtIndexPaths() bool
}

// A delegate implementation builder for the [PCollectionViewDelegate] protocol.
type CollectionViewDelegate struct {
	_CollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath          func(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath)
	_CollectionViewDraggingImageForItemsAtIndexesWithEventOffset                func(collectionView CollectionView, indexes foundation.IndexSet, event Event, dragImageOffset foundation.PointPointer) Image
	_CollectionViewCanDragItemsAtIndexPathsWithEvent                            func(collectionView CollectionView, indexPaths foundation.Set, event Event) bool
	_CollectionViewPasteboardWriterForItemAtIndex                               func(collectionView CollectionView, index uint) PasteboardWritingObject
	_CollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset             func(collectionView CollectionView, indexPaths foundation.Set, event Event, dragImageOffset foundation.PointPointer) Image
	_CollectionViewShouldChangeItemsAtIndexPathsToHighlightState                func(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState) foundation.Set
	_CollectionViewCanDragItemsAtIndexesWithEvent                               func(collectionView CollectionView, indexes foundation.IndexSet, event Event) bool
	_CollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath func(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath)
	_CollectionViewAcceptDropIndexPathDropOperation                             func(collectionView CollectionView, draggingInfo DraggingInfoObject, indexPath foundation.IndexPath, dropOperation CollectionViewDropOperation) bool
	_CollectionViewAcceptDropIndexDropOperation                                 func(collectionView CollectionView, draggingInfo DraggingInfoObject, index int, dropOperation CollectionViewDropOperation) bool
	_CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes             func(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexes foundation.IndexSet)
	_CollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath        func(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath)
	_CollectionViewShouldDeselectItemsAtIndexPaths                              func(collectionView CollectionView, indexPaths foundation.Set) foundation.Set
	_CollectionViewDidChangeItemsAtIndexPathsToHighlightState                   func(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState)
	_CollectionViewDraggingSessionEndedAtPointDragOperation                     func(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, operation DragOperation)
	_CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths          func(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexPaths foundation.Set)
	_CollectionViewWillDisplayItemForRepresentedObjectAtIndexPath               func(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath)
	_CollectionViewValidateDropProposedIndexDropOperation                       func(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndex *int, proposedDropOperation *CollectionViewDropOperation) DragOperation
	_CollectionViewUpdateDraggingItemsForDrag                                   func(collectionView CollectionView, draggingInfo DraggingInfoObject)
	_CollectionViewPasteboardWriterForItemAtIndexPath                           func(collectionView CollectionView, indexPath foundation.IndexPath) PasteboardWritingObject
	_CollectionViewShouldSelectItemsAtIndexPaths                                func(collectionView CollectionView, indexPaths foundation.Set) foundation.Set
	_CollectionViewDidSelectItemsAtIndexPaths                                   func(collectionView CollectionView, indexPaths foundation.Set)
	_CollectionViewValidateDropProposedIndexPathDropOperation                   func(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndexPath unsafe.Pointer, proposedDropOperation *CollectionViewDropOperation) DragOperation
	_CollectionViewTransitionLayoutForOldLayoutNewLayout                        func(collectionView CollectionView, fromLayout CollectionViewLayout, toLayout CollectionViewLayout) CollectionViewTransitionLayout
	_CollectionViewDidDeselectItemsAtIndexPaths                                 func(collectionView CollectionView, indexPaths foundation.Set)
}

func (di *CollectionViewDelegate) HasCollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath() bool {
	return di._CollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath != nil
}

// Notifies the delegate that the specified item was removed from the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528183-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath(f func(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath)) {
	di._CollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath = f
}

// Notifies the delegate that the specified item was removed from the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528183-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath) {
	di._CollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath(collectionView, item, indexPath)
}
func (di *CollectionViewDelegate) HasCollectionViewDraggingImageForItemsAtIndexesWithEventOffset() bool {
	return di._CollectionViewDraggingImageForItemsAtIndexesWithEventOffset != nil
}

// Creates and returns a drag image to represent the specified items during a drag. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528138-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDraggingImageForItemsAtIndexesWithEventOffset(f func(collectionView CollectionView, indexes foundation.IndexSet, event Event, dragImageOffset foundation.PointPointer) Image) {
	di._CollectionViewDraggingImageForItemsAtIndexesWithEventOffset = f
}

// Creates and returns a drag image to represent the specified items during a drag. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528138-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDraggingImageForItemsAtIndexesWithEventOffset(collectionView CollectionView, indexes foundation.IndexSet, event Event, dragImageOffset foundation.PointPointer) Image {
	return di._CollectionViewDraggingImageForItemsAtIndexesWithEventOffset(collectionView, indexes, event, dragImageOffset)
}
func (di *CollectionViewDelegate) HasCollectionViewCanDragItemsAtIndexPathsWithEvent() bool {
	return di._CollectionViewCanDragItemsAtIndexPathsWithEvent != nil
}

// Returns a Boolean indicating whether a drag operation involving the specified items can begin. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525969-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewCanDragItemsAtIndexPathsWithEvent(f func(collectionView CollectionView, indexPaths foundation.Set, event Event) bool) {
	di._CollectionViewCanDragItemsAtIndexPathsWithEvent = f
}

// Returns a Boolean indicating whether a drag operation involving the specified items can begin. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525969-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewCanDragItemsAtIndexPathsWithEvent(collectionView CollectionView, indexPaths foundation.Set, event Event) bool {
	return di._CollectionViewCanDragItemsAtIndexPathsWithEvent(collectionView, indexPaths, event)
}
func (di *CollectionViewDelegate) HasCollectionViewPasteboardWriterForItemAtIndex() bool {
	return di._CollectionViewPasteboardWriterForItemAtIndex != nil
}

// Provides the pasteboard writer for the item at the specified index [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528257-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewPasteboardWriterForItemAtIndex(f func(collectionView CollectionView, index uint) PasteboardWritingObject) {
	di._CollectionViewPasteboardWriterForItemAtIndex = f
}

// Provides the pasteboard writer for the item at the specified index [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528257-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewPasteboardWriterForItemAtIndex(collectionView CollectionView, index uint) PasteboardWritingObject {
	return di._CollectionViewPasteboardWriterForItemAtIndex(collectionView, index)
}
func (di *CollectionViewDelegate) HasCollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset() bool {
	return di._CollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset != nil
}

// Creates and returns a drag image to represent the specified items during a drag. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528175-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset(f func(collectionView CollectionView, indexPaths foundation.Set, event Event, dragImageOffset foundation.PointPointer) Image) {
	di._CollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset = f
}

// Creates and returns a drag image to represent the specified items during a drag. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528175-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset(collectionView CollectionView, indexPaths foundation.Set, event Event, dragImageOffset foundation.PointPointer) Image {
	return di._CollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset(collectionView, indexPaths, event, dragImageOffset)
}
func (di *CollectionViewDelegate) HasCollectionViewShouldChangeItemsAtIndexPathsToHighlightState() bool {
	return di._CollectionViewShouldChangeItemsAtIndexPathsToHighlightState != nil
}

// Asks the delegate to approve the pending highlighting of the specified items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528178-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewShouldChangeItemsAtIndexPathsToHighlightState(f func(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState) foundation.Set) {
	di._CollectionViewShouldChangeItemsAtIndexPathsToHighlightState = f
}

// Asks the delegate to approve the pending highlighting of the specified items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528178-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewShouldChangeItemsAtIndexPathsToHighlightState(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState) foundation.Set {
	return di._CollectionViewShouldChangeItemsAtIndexPathsToHighlightState(collectionView, indexPaths, highlightState)
}
func (di *CollectionViewDelegate) HasCollectionViewCanDragItemsAtIndexesWithEvent() bool {
	return di._CollectionViewCanDragItemsAtIndexesWithEvent != nil
}

// Returns a Boolean indicating whether the collection view can begin dragging the specified items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528212-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewCanDragItemsAtIndexesWithEvent(f func(collectionView CollectionView, indexes foundation.IndexSet, event Event) bool) {
	di._CollectionViewCanDragItemsAtIndexesWithEvent = f
}

// Returns a Boolean indicating whether the collection view can begin dragging the specified items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528212-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewCanDragItemsAtIndexesWithEvent(collectionView CollectionView, indexes foundation.IndexSet, event Event) bool {
	return di._CollectionViewCanDragItemsAtIndexesWithEvent(collectionView, indexes, event)
}
func (di *CollectionViewDelegate) HasCollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath() bool {
	return di._CollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath != nil
}

// Notifies the delegate that the specified supplementary view was removed from the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528192-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath(f func(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath)) {
	di._CollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath = f
}

// Notifies the delegate that the specified supplementary view was removed from the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528192-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath) {
	di._CollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath(collectionView, view, elementKind, indexPath)
}
func (di *CollectionViewDelegate) HasCollectionViewAcceptDropIndexPathDropOperation() bool {
	return di._CollectionViewAcceptDropIndexPathDropOperation != nil
}

// Incorporates the dropped content into the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525045-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewAcceptDropIndexPathDropOperation(f func(collectionView CollectionView, draggingInfo DraggingInfoObject, indexPath foundation.IndexPath, dropOperation CollectionViewDropOperation) bool) {
	di._CollectionViewAcceptDropIndexPathDropOperation = f
}

// Incorporates the dropped content into the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525045-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewAcceptDropIndexPathDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, indexPath foundation.IndexPath, dropOperation CollectionViewDropOperation) bool {
	return di._CollectionViewAcceptDropIndexPathDropOperation(collectionView, draggingInfo, indexPath, dropOperation)
}
func (di *CollectionViewDelegate) HasCollectionViewAcceptDropIndexDropOperation() bool {
	return di._CollectionViewAcceptDropIndexDropOperation != nil
}

// Invoked when the mouse is released over a collection view that previously allowed a drop. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528242-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewAcceptDropIndexDropOperation(f func(collectionView CollectionView, draggingInfo DraggingInfoObject, index int, dropOperation CollectionViewDropOperation) bool) {
	di._CollectionViewAcceptDropIndexDropOperation = f
}

// Invoked when the mouse is released over a collection view that previously allowed a drop. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528242-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewAcceptDropIndexDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, index int, dropOperation CollectionViewDropOperation) bool {
	return di._CollectionViewAcceptDropIndexDropOperation(collectionView, draggingInfo, index, dropOperation)
}
func (di *CollectionViewDelegate) HasCollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes() bool {
	return di._CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes != nil
}

// Notifies your delegate that a drag session is about to begin. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1524615-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes(f func(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexes foundation.IndexSet)) {
	di._CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes = f
}

// Notifies your delegate that a drag session is about to begin. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1524615-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexes foundation.IndexSet) {
	di._CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes(collectionView, session, screenPoint, indexes)
}
func (di *CollectionViewDelegate) HasCollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath() bool {
	return di._CollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath != nil
}

// Notifies the delegate that the specified supplementary view is about to be displayed by the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525963-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath(f func(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath)) {
	di._CollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath = f
}

// Notifies the delegate that the specified supplementary view is about to be displayed by the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525963-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath) {
	di._CollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath(collectionView, view, elementKind, indexPath)
}
func (di *CollectionViewDelegate) HasCollectionViewShouldDeselectItemsAtIndexPaths() bool {
	return di._CollectionViewShouldDeselectItemsAtIndexPaths != nil
}

// Asks the delegate object to approve the pending deselection of items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525582-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewShouldDeselectItemsAtIndexPaths(f func(collectionView CollectionView, indexPaths foundation.Set) foundation.Set) {
	di._CollectionViewShouldDeselectItemsAtIndexPaths = f
}

// Asks the delegate object to approve the pending deselection of items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525582-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewShouldDeselectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) foundation.Set {
	return di._CollectionViewShouldDeselectItemsAtIndexPaths(collectionView, indexPaths)
}
func (di *CollectionViewDelegate) HasCollectionViewDidChangeItemsAtIndexPathsToHighlightState() bool {
	return di._CollectionViewDidChangeItemsAtIndexPathsToHighlightState != nil
}

// Notifies the delegate that the highlight state of the specified items changed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1526015-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDidChangeItemsAtIndexPathsToHighlightState(f func(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState)) {
	di._CollectionViewDidChangeItemsAtIndexPathsToHighlightState = f
}

// Notifies the delegate that the highlight state of the specified items changed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1526015-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDidChangeItemsAtIndexPathsToHighlightState(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState) {
	di._CollectionViewDidChangeItemsAtIndexPathsToHighlightState(collectionView, indexPaths, highlightState)
}
func (di *CollectionViewDelegate) HasCollectionViewDraggingSessionEndedAtPointDragOperation() bool {
	return di._CollectionViewDraggingSessionEndedAtPointDragOperation != nil
}

// Notifies your delegate that a drag session ended. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528224-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDraggingSessionEndedAtPointDragOperation(f func(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, operation DragOperation)) {
	di._CollectionViewDraggingSessionEndedAtPointDragOperation = f
}

// Notifies your delegate that a drag session ended. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528224-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDraggingSessionEndedAtPointDragOperation(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, operation DragOperation) {
	di._CollectionViewDraggingSessionEndedAtPointDragOperation(collectionView, session, screenPoint, operation)
}
func (di *CollectionViewDelegate) HasCollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths() bool {
	return di._CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths != nil
}

// Notifies your delegate that a drag session is about to begin. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1527718-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths(f func(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexPaths foundation.Set)) {
	di._CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths = f
}

// Notifies your delegate that a drag session is about to begin. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1527718-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexPaths foundation.Set) {
	di._CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths(collectionView, session, screenPoint, indexPaths)
}
func (di *CollectionViewDelegate) HasCollectionViewWillDisplayItemForRepresentedObjectAtIndexPath() bool {
	return di._CollectionViewWillDisplayItemForRepresentedObjectAtIndexPath != nil
}

// Notifies the delegate that the specified item is about to be displayed by the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1524266-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewWillDisplayItemForRepresentedObjectAtIndexPath(f func(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath)) {
	di._CollectionViewWillDisplayItemForRepresentedObjectAtIndexPath = f
}

// Notifies the delegate that the specified item is about to be displayed by the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1524266-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewWillDisplayItemForRepresentedObjectAtIndexPath(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath) {
	di._CollectionViewWillDisplayItemForRepresentedObjectAtIndexPath(collectionView, item, indexPath)
}
func (di *CollectionViewDelegate) HasCollectionViewValidateDropProposedIndexDropOperation() bool {
	return di._CollectionViewValidateDropProposedIndexDropOperation != nil
}

// Validates the specified location to see if it is a valid drop target. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528283-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewValidateDropProposedIndexDropOperation(f func(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndex *int, proposedDropOperation *CollectionViewDropOperation) DragOperation) {
	di._CollectionViewValidateDropProposedIndexDropOperation = f
}

// Validates the specified location to see if it is a valid drop target. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528283-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewValidateDropProposedIndexDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndex *int, proposedDropOperation *CollectionViewDropOperation) DragOperation {
	return di._CollectionViewValidateDropProposedIndexDropOperation(collectionView, draggingInfo, proposedDropIndex, proposedDropOperation)
}
func (di *CollectionViewDelegate) HasCollectionViewUpdateDraggingItemsForDrag() bool {
	return di._CollectionViewUpdateDraggingItemsForDrag != nil
}

// Asks your delegate to update the dragging items during a drag operation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1526881-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewUpdateDraggingItemsForDrag(f func(collectionView CollectionView, draggingInfo DraggingInfoObject)) {
	di._CollectionViewUpdateDraggingItemsForDrag = f
}

// Asks your delegate to update the dragging items during a drag operation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1526881-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewUpdateDraggingItemsForDrag(collectionView CollectionView, draggingInfo DraggingInfoObject) {
	di._CollectionViewUpdateDraggingItemsForDrag(collectionView, draggingInfo)
}
func (di *CollectionViewDelegate) HasCollectionViewPasteboardWriterForItemAtIndexPath() bool {
	return di._CollectionViewPasteboardWriterForItemAtIndexPath != nil
}

// Provides the pasteboard writer for the item at the specified index path. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1527290-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewPasteboardWriterForItemAtIndexPath(f func(collectionView CollectionView, indexPath foundation.IndexPath) PasteboardWritingObject) {
	di._CollectionViewPasteboardWriterForItemAtIndexPath = f
}

// Provides the pasteboard writer for the item at the specified index path. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1527290-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewPasteboardWriterForItemAtIndexPath(collectionView CollectionView, indexPath foundation.IndexPath) PasteboardWritingObject {
	return di._CollectionViewPasteboardWriterForItemAtIndexPath(collectionView, indexPath)
}
func (di *CollectionViewDelegate) HasCollectionViewShouldSelectItemsAtIndexPaths() bool {
	return di._CollectionViewShouldSelectItemsAtIndexPaths != nil
}

// Asks the delegate to approve the pending selection of items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528280-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewShouldSelectItemsAtIndexPaths(f func(collectionView CollectionView, indexPaths foundation.Set) foundation.Set) {
	di._CollectionViewShouldSelectItemsAtIndexPaths = f
}

// Asks the delegate to approve the pending selection of items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528280-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewShouldSelectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) foundation.Set {
	return di._CollectionViewShouldSelectItemsAtIndexPaths(collectionView, indexPaths)
}
func (di *CollectionViewDelegate) HasCollectionViewDidSelectItemsAtIndexPaths() bool {
	return di._CollectionViewDidSelectItemsAtIndexPaths != nil
}

// Notifies the delegate object that one or more items were selected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528236-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDidSelectItemsAtIndexPaths(f func(collectionView CollectionView, indexPaths foundation.Set)) {
	di._CollectionViewDidSelectItemsAtIndexPaths = f
}

// Notifies the delegate object that one or more items were selected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528236-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDidSelectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) {
	di._CollectionViewDidSelectItemsAtIndexPaths(collectionView, indexPaths)
}
func (di *CollectionViewDelegate) HasCollectionViewValidateDropProposedIndexPathDropOperation() bool {
	return di._CollectionViewValidateDropProposedIndexPathDropOperation != nil
}

// Validates whether a drop operation is possible at the specified location. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525471-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewValidateDropProposedIndexPathDropOperation(f func(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndexPath unsafe.Pointer, proposedDropOperation *CollectionViewDropOperation) DragOperation) {
	di._CollectionViewValidateDropProposedIndexPathDropOperation = f
}

// Validates whether a drop operation is possible at the specified location. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525471-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewValidateDropProposedIndexPathDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndexPath unsafe.Pointer, proposedDropOperation *CollectionViewDropOperation) DragOperation {
	return di._CollectionViewValidateDropProposedIndexPathDropOperation(collectionView, draggingInfo, proposedDropIndexPath, proposedDropOperation)
}
func (di *CollectionViewDelegate) HasCollectionViewTransitionLayoutForOldLayoutNewLayout() bool {
	return di._CollectionViewTransitionLayoutForOldLayoutNewLayout != nil
}

// Returns the transition layout object to use when performing an animated change between different layouts. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528228-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewTransitionLayoutForOldLayoutNewLayout(f func(collectionView CollectionView, fromLayout CollectionViewLayout, toLayout CollectionViewLayout) CollectionViewTransitionLayout) {
	di._CollectionViewTransitionLayoutForOldLayoutNewLayout = f
}

// Returns the transition layout object to use when performing an animated change between different layouts. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528228-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewTransitionLayoutForOldLayoutNewLayout(collectionView CollectionView, fromLayout CollectionViewLayout, toLayout CollectionViewLayout) CollectionViewTransitionLayout {
	return di._CollectionViewTransitionLayoutForOldLayoutNewLayout(collectionView, fromLayout, toLayout)
}
func (di *CollectionViewDelegate) HasCollectionViewDidDeselectItemsAtIndexPaths() bool {
	return di._CollectionViewDidDeselectItemsAtIndexPaths != nil
}

// Notifies the delegate object that one or more items were deselected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528279-collectionview?language=objc
func (di *CollectionViewDelegate) SetCollectionViewDidDeselectItemsAtIndexPaths(f func(collectionView CollectionView, indexPaths foundation.Set)) {
	di._CollectionViewDidDeselectItemsAtIndexPaths = f
}

// Notifies the delegate object that one or more items were deselected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528279-collectionview?language=objc
func (di *CollectionViewDelegate) CollectionViewDidDeselectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) {
	di._CollectionViewDidDeselectItemsAtIndexPaths(collectionView, indexPaths)
}

// ensure impl type implements protocol interface
var _ PCollectionViewDelegate = (*CollectionViewDelegateObject)(nil)

// A concrete type for the [PCollectionViewDelegate] protocol.
type CollectionViewDelegateObject struct {
	objc.Object
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:didEndDisplayingItem:forRepresentedObjectAtIndexPath:"))
}

// Notifies the delegate that the specified item was removed from the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528183-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:didEndDisplayingItem:forRepresentedObjectAtIndexPath:"), collectionView, item, indexPath)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDraggingImageForItemsAtIndexesWithEventOffset() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:draggingImageForItemsAtIndexes:withEvent:offset:"))
}

// Creates and returns a drag image to represent the specified items during a drag. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528138-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDraggingImageForItemsAtIndexesWithEventOffset(collectionView CollectionView, indexes foundation.IndexSet, event Event, dragImageOffset foundation.PointPointer) Image {
	rv := objc.Call[Image](c_, objc.Sel("collectionView:draggingImageForItemsAtIndexes:withEvent:offset:"), collectionView, indexes, event, dragImageOffset)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewCanDragItemsAtIndexPathsWithEvent() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:canDragItemsAtIndexPaths:withEvent:"))
}

// Returns a Boolean indicating whether a drag operation involving the specified items can begin. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525969-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewCanDragItemsAtIndexPathsWithEvent(collectionView CollectionView, indexPaths foundation.Set, event Event) bool {
	rv := objc.Call[bool](c_, objc.Sel("collectionView:canDragItemsAtIndexPaths:withEvent:"), collectionView, indexPaths, event)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewPasteboardWriterForItemAtIndex() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:pasteboardWriterForItemAtIndex:"))
}

// Provides the pasteboard writer for the item at the specified index [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528257-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewPasteboardWriterForItemAtIndex(collectionView CollectionView, index uint) PasteboardWritingObject {
	rv := objc.Call[PasteboardWritingObject](c_, objc.Sel("collectionView:pasteboardWriterForItemAtIndex:"), collectionView, index)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:draggingImageForItemsAtIndexPaths:withEvent:offset:"))
}

// Creates and returns a drag image to represent the specified items during a drag. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528175-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDraggingImageForItemsAtIndexPathsWithEventOffset(collectionView CollectionView, indexPaths foundation.Set, event Event, dragImageOffset foundation.PointPointer) Image {
	rv := objc.Call[Image](c_, objc.Sel("collectionView:draggingImageForItemsAtIndexPaths:withEvent:offset:"), collectionView, indexPaths, event, dragImageOffset)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewShouldChangeItemsAtIndexPathsToHighlightState() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:shouldChangeItemsAtIndexPaths:toHighlightState:"))
}

// Asks the delegate to approve the pending highlighting of the specified items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528178-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewShouldChangeItemsAtIndexPathsToHighlightState(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState) foundation.Set {
	rv := objc.Call[foundation.Set](c_, objc.Sel("collectionView:shouldChangeItemsAtIndexPaths:toHighlightState:"), collectionView, indexPaths, highlightState)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewCanDragItemsAtIndexesWithEvent() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:canDragItemsAtIndexes:withEvent:"))
}

// Returns a Boolean indicating whether the collection view can begin dragging the specified items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528212-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewCanDragItemsAtIndexesWithEvent(collectionView CollectionView, indexes foundation.IndexSet, event Event) bool {
	rv := objc.Call[bool](c_, objc.Sel("collectionView:canDragItemsAtIndexes:withEvent:"), collectionView, indexes, event)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:"))
}

// Notifies the delegate that the specified supplementary view was removed from the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528192-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:"), collectionView, view, elementKind, indexPath)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewAcceptDropIndexPathDropOperation() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:acceptDrop:indexPath:dropOperation:"))
}

// Incorporates the dropped content into the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525045-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewAcceptDropIndexPathDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, indexPath foundation.IndexPath, dropOperation CollectionViewDropOperation) bool {
	po1 := objc.WrapAsProtocol("NSDraggingInfo", draggingInfo)
	rv := objc.Call[bool](c_, objc.Sel("collectionView:acceptDrop:indexPath:dropOperation:"), collectionView, po1, indexPath, dropOperation)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewAcceptDropIndexDropOperation() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:acceptDrop:index:dropOperation:"))
}

// Invoked when the mouse is released over a collection view that previously allowed a drop. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528242-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewAcceptDropIndexDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, index int, dropOperation CollectionViewDropOperation) bool {
	po1 := objc.WrapAsProtocol("NSDraggingInfo", draggingInfo)
	rv := objc.Call[bool](c_, objc.Sel("collectionView:acceptDrop:index:dropOperation:"), collectionView, po1, index, dropOperation)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:"))
}

// Notifies your delegate that a drag session is about to begin. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1524615-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexes foundation.IndexSet) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:"), collectionView, session, screenPoint, indexes)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:"))
}

// Notifies the delegate that the specified supplementary view is about to be displayed by the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525963-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath(collectionView CollectionView, view View, elementKind CollectionViewSupplementaryElementKind, indexPath foundation.IndexPath) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:"), collectionView, view, elementKind, indexPath)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewShouldDeselectItemsAtIndexPaths() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:shouldDeselectItemsAtIndexPaths:"))
}

// Asks the delegate object to approve the pending deselection of items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525582-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewShouldDeselectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) foundation.Set {
	rv := objc.Call[foundation.Set](c_, objc.Sel("collectionView:shouldDeselectItemsAtIndexPaths:"), collectionView, indexPaths)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDidChangeItemsAtIndexPathsToHighlightState() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:didChangeItemsAtIndexPaths:toHighlightState:"))
}

// Notifies the delegate that the highlight state of the specified items changed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1526015-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDidChangeItemsAtIndexPathsToHighlightState(collectionView CollectionView, indexPaths foundation.Set, highlightState CollectionViewItemHighlightState) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:didChangeItemsAtIndexPaths:toHighlightState:"), collectionView, indexPaths, highlightState)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDraggingSessionEndedAtPointDragOperation() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:draggingSession:endedAtPoint:dragOperation:"))
}

// Notifies your delegate that a drag session ended. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528224-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDraggingSessionEndedAtPointDragOperation(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, operation DragOperation) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:draggingSession:endedAtPoint:dragOperation:"), collectionView, session, screenPoint, operation)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexPaths:"))
}

// Notifies your delegate that a drag session is about to begin. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1527718-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths(collectionView CollectionView, session DraggingSession, screenPoint foundation.Point, indexPaths foundation.Set) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexPaths:"), collectionView, session, screenPoint, indexPaths)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewWillDisplayItemForRepresentedObjectAtIndexPath() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:willDisplayItem:forRepresentedObjectAtIndexPath:"))
}

// Notifies the delegate that the specified item is about to be displayed by the collection view. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1524266-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewWillDisplayItemForRepresentedObjectAtIndexPath(collectionView CollectionView, item CollectionViewItem, indexPath foundation.IndexPath) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:willDisplayItem:forRepresentedObjectAtIndexPath:"), collectionView, item, indexPath)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewValidateDropProposedIndexDropOperation() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:validateDrop:proposedIndex:dropOperation:"))
}

// Validates the specified location to see if it is a valid drop target. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528283-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewValidateDropProposedIndexDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndex *int, proposedDropOperation *CollectionViewDropOperation) DragOperation {
	po1 := objc.WrapAsProtocol("NSDraggingInfo", draggingInfo)
	rv := objc.Call[DragOperation](c_, objc.Sel("collectionView:validateDrop:proposedIndex:dropOperation:"), collectionView, po1, proposedDropIndex, proposedDropOperation)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewUpdateDraggingItemsForDrag() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:updateDraggingItemsForDrag:"))
}

// Asks your delegate to update the dragging items during a drag operation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1526881-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewUpdateDraggingItemsForDrag(collectionView CollectionView, draggingInfo DraggingInfoObject) {
	po1 := objc.WrapAsProtocol("NSDraggingInfo", draggingInfo)
	objc.Call[objc.Void](c_, objc.Sel("collectionView:updateDraggingItemsForDrag:"), collectionView, po1)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewPasteboardWriterForItemAtIndexPath() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:pasteboardWriterForItemAtIndexPath:"))
}

// Provides the pasteboard writer for the item at the specified index path. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1527290-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewPasteboardWriterForItemAtIndexPath(collectionView CollectionView, indexPath foundation.IndexPath) PasteboardWritingObject {
	rv := objc.Call[PasteboardWritingObject](c_, objc.Sel("collectionView:pasteboardWriterForItemAtIndexPath:"), collectionView, indexPath)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewShouldSelectItemsAtIndexPaths() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:shouldSelectItemsAtIndexPaths:"))
}

// Asks the delegate to approve the pending selection of items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528280-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewShouldSelectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) foundation.Set {
	rv := objc.Call[foundation.Set](c_, objc.Sel("collectionView:shouldSelectItemsAtIndexPaths:"), collectionView, indexPaths)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDidSelectItemsAtIndexPaths() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:didSelectItemsAtIndexPaths:"))
}

// Notifies the delegate object that one or more items were selected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528236-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDidSelectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:didSelectItemsAtIndexPaths:"), collectionView, indexPaths)
}

func (c_ CollectionViewDelegateObject) HasCollectionViewValidateDropProposedIndexPathDropOperation() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:validateDrop:proposedIndexPath:dropOperation:"))
}

// Validates whether a drop operation is possible at the specified location. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1525471-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewValidateDropProposedIndexPathDropOperation(collectionView CollectionView, draggingInfo DraggingInfoObject, proposedDropIndexPath unsafe.Pointer, proposedDropOperation *CollectionViewDropOperation) DragOperation {
	po1 := objc.WrapAsProtocol("NSDraggingInfo", draggingInfo)
	rv := objc.Call[DragOperation](c_, objc.Sel("collectionView:validateDrop:proposedIndexPath:dropOperation:"), collectionView, po1, proposedDropIndexPath, proposedDropOperation)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewTransitionLayoutForOldLayoutNewLayout() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:transitionLayoutForOldLayout:newLayout:"))
}

// Returns the transition layout object to use when performing an animated change between different layouts. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528228-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewTransitionLayoutForOldLayoutNewLayout(collectionView CollectionView, fromLayout CollectionViewLayout, toLayout CollectionViewLayout) CollectionViewTransitionLayout {
	rv := objc.Call[CollectionViewTransitionLayout](c_, objc.Sel("collectionView:transitionLayoutForOldLayout:newLayout:"), collectionView, fromLayout, toLayout)
	return rv
}

func (c_ CollectionViewDelegateObject) HasCollectionViewDidDeselectItemsAtIndexPaths() bool {
	return c_.RespondsToSelector(objc.Sel("collectionView:didDeselectItemsAtIndexPaths:"))
}

// Notifies the delegate object that one or more items were deselected. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscollectionviewdelegate/1528279-collectionview?language=objc
func (c_ CollectionViewDelegateObject) CollectionViewDidDeselectItemsAtIndexPaths(collectionView CollectionView, indexPaths foundation.Set) {
	objc.Call[objc.Void](c_, objc.Sel("collectionView:didDeselectItemsAtIndexPaths:"), collectionView, indexPaths)
}
