// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"unsafe"

	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// The class instance for the [PopUpButton] class.
var PopUpButtonClass = _PopUpButtonClass{objc.GetClass("NSPopUpButton")}

type _PopUpButtonClass struct {
	objc.Class
}

// An interface definition for the [PopUpButton] class.
type IPopUpButton interface {
	IButton
	IndexOfItemWithTargetAndAction(target objc.IObject, actionSelector objc.Selector) int
	ItemWithTitle(title string) MenuItem
	RemoveItemAtIndex(index int)
	RemoveItemWithTitle(title string)
	IndexOfItemWithTitle(title string) int
	IndexOfItemWithTag(tag int) int
	AddItemsWithTitles(itemTitles []string)
	ItemTitleAtIndex(index int) string
	IndexOfItem(item IMenuItem) int
	RemoveAllItems()
	SynchronizeTitleAndSelectedItem()
	SelectItemWithTag(tag int) bool
	ItemAtIndex(index int) MenuItem
	IndexOfItemWithRepresentedObject(obj objc.IObject) int
	AddItemWithTitle(title string)
	SelectItemWithTitle(title string)
	SelectItemAtIndex(index int)
	InsertItemWithTitleAtIndex(title string, index int)
	SelectItem(item IMenuItem)
	ItemTitles() []string
	TitleOfSelectedItem() string
	PreferredEdge() foundation.RectEdge
	SetPreferredEdge(value foundation.RectEdge)
	NumberOfItems() int
	ItemArray() []MenuItem
	PullsDown() bool
	SetPullsDown(value bool)
	IndexOfSelectedItem() int
	AutoenablesItems() bool
	SetAutoenablesItems(value bool)
	SelectedItem() MenuItem
	LastItem() MenuItem
	SelectedTag() int
}

// A control for selecting an item from a list. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton?language=objc
type PopUpButton struct {
	Button
}

func PopUpButtonFrom(ptr unsafe.Pointer) PopUpButton {
	return PopUpButton{
		Button: ButtonFrom(ptr),
	}
}

func (p_ PopUpButton) InitWithFramePullsDown(buttonFrame foundation.Rect, flag bool) PopUpButton {
	rv := objc.Call[PopUpButton](p_, objc.Sel("initWithFrame:pullsDown:"), buttonFrame, flag)
	return rv
}

// Returns an NSPopUpButton object initialized to the specified dimensions. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1524562-initwithframe?language=objc
func NewPopUpButtonWithFramePullsDown(buttonFrame foundation.Rect, flag bool) PopUpButton {
	instance := PopUpButtonClass.Alloc().InitWithFramePullsDown(buttonFrame, flag)
	instance.Autorelease()
	return instance
}

func (pc _PopUpButtonClass) Alloc() PopUpButton {
	rv := objc.Call[PopUpButton](pc, objc.Sel("alloc"))
	return rv
}

func (pc _PopUpButtonClass) New() PopUpButton {
	rv := objc.Call[PopUpButton](pc, objc.Sel("new"))
	rv.Autorelease()
	return rv
}

func NewPopUpButton() PopUpButton {
	return PopUpButtonClass.New()
}

func (p_ PopUpButton) Init() PopUpButton {
	rv := objc.Call[PopUpButton](p_, objc.Sel("init"))
	return rv
}

func (pc _PopUpButtonClass) ButtonWithTitleImageTargetAction(title string, image IImage, target objc.IObject, action objc.Selector) PopUpButton {
	rv := objc.Call[PopUpButton](pc, objc.Sel("buttonWithTitle:image:target:action:"), title, image, target, action)
	return rv
}

// Creates a standard push button with a title and image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbutton/1644719-buttonwithtitle?language=objc
func PopUpButton_ButtonWithTitleImageTargetAction(title string, image IImage, target objc.IObject, action objc.Selector) PopUpButton {
	return PopUpButtonClass.ButtonWithTitleImageTargetAction(title, image, target, action)
}

func (pc _PopUpButtonClass) ButtonWithTitleTargetAction(title string, target objc.IObject, action objc.Selector) PopUpButton {
	rv := objc.Call[PopUpButton](pc, objc.Sel("buttonWithTitle:target:action:"), title, target, action)
	return rv
}

// Creates a standard push button with the title you specify. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbutton/1644256-buttonwithtitle?language=objc
func PopUpButton_ButtonWithTitleTargetAction(title string, target objc.IObject, action objc.Selector) PopUpButton {
	return PopUpButtonClass.ButtonWithTitleTargetAction(title, target, action)
}

func (pc _PopUpButtonClass) CheckboxWithTitleTargetAction(title string, target objc.IObject, action objc.Selector) PopUpButton {
	rv := objc.Call[PopUpButton](pc, objc.Sel("checkboxWithTitle:target:action:"), title, target, action)
	return rv
}

// Creates a standard checkbox with the title you specify. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbutton/1644525-checkboxwithtitle?language=objc
func PopUpButton_CheckboxWithTitleTargetAction(title string, target objc.IObject, action objc.Selector) PopUpButton {
	return PopUpButtonClass.CheckboxWithTitleTargetAction(title, target, action)
}

func (pc _PopUpButtonClass) ButtonWithImageTargetAction(image IImage, target objc.IObject, action objc.Selector) PopUpButton {
	rv := objc.Call[PopUpButton](pc, objc.Sel("buttonWithImage:target:action:"), image, target, action)
	return rv
}

// Creates a standard push button with the image you specify. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbutton/1644659-buttonwithimage?language=objc
func PopUpButton_ButtonWithImageTargetAction(image IImage, target objc.IObject, action objc.Selector) PopUpButton {
	return PopUpButtonClass.ButtonWithImageTargetAction(image, target, action)
}

func (pc _PopUpButtonClass) RadioButtonWithTitleTargetAction(title string, target objc.IObject, action objc.Selector) PopUpButton {
	rv := objc.Call[PopUpButton](pc, objc.Sel("radioButtonWithTitle:target:action:"), title, target, action)
	return rv
}

// Creates a standard radio button with the title you specify. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsbutton/1644340-radiobuttonwithtitle?language=objc
func PopUpButton_RadioButtonWithTitleTargetAction(title string, target objc.IObject, action objc.Selector) PopUpButton {
	return PopUpButtonClass.RadioButtonWithTitleTargetAction(title, target, action)
}

func (p_ PopUpButton) InitWithFrame(frameRect foundation.Rect) PopUpButton {
	rv := objc.Call[PopUpButton](p_, objc.Sel("initWithFrame:"), frameRect)
	return rv
}

// Initializes a control with the specified frame rectangle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscontrol/1428900-initwithframe?language=objc
func NewPopUpButtonWithFrame(frameRect foundation.Rect) PopUpButton {
	instance := PopUpButtonClass.Alloc().InitWithFrame(frameRect)
	instance.Autorelease()
	return instance
}

// Returns the index of the menu item with the specified target and action. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1535747-indexofitemwithtarget?language=objc
func (p_ PopUpButton) IndexOfItemWithTargetAndAction(target objc.IObject, actionSelector objc.Selector) int {
	rv := objc.Call[int](p_, objc.Sel("indexOfItemWithTarget:andAction:"), target, actionSelector)
	return rv
}

// Returns the menu item with the specified title. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1524680-itemwithtitle?language=objc
func (p_ PopUpButton) ItemWithTitle(title string) MenuItem {
	rv := objc.Call[MenuItem](p_, objc.Sel("itemWithTitle:"), title)
	return rv
}

// Removes the item at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1525241-removeitematindex?language=objc
func (p_ PopUpButton) RemoveItemAtIndex(index int) {
	objc.Call[objc.Void](p_, objc.Sel("removeItemAtIndex:"), index)
}

// Removes the item with the specified title from the menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1530675-removeitemwithtitle?language=objc
func (p_ PopUpButton) RemoveItemWithTitle(title string) {
	objc.Call[objc.Void](p_, objc.Sel("removeItemWithTitle:"), title)
}

// Returns the index of the item with the specified title. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1535406-indexofitemwithtitle?language=objc
func (p_ PopUpButton) IndexOfItemWithTitle(title string) int {
	rv := objc.Call[int](p_, objc.Sel("indexOfItemWithTitle:"), title)
	return rv
}

// Returns the index of the menu item with the specified tag. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1534140-indexofitemwithtag?language=objc
func (p_ PopUpButton) IndexOfItemWithTag(tag int) int {
	rv := objc.Call[int](p_, objc.Sel("indexOfItemWithTag:"), tag)
	return rv
}

// Adds multiple items to the end of the menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1532518-additemswithtitles?language=objc
func (p_ PopUpButton) AddItemsWithTitles(itemTitles []string) {
	objc.Call[objc.Void](p_, objc.Sel("addItemsWithTitles:"), itemTitles)
}

// Returns the title of the item at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1524908-itemtitleatindex?language=objc
func (p_ PopUpButton) ItemTitleAtIndex(index int) string {
	rv := objc.Call[string](p_, objc.Sel("itemTitleAtIndex:"), index)
	return rv
}

// Returns the index of the specified menu item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1529708-indexofitem?language=objc
func (p_ PopUpButton) IndexOfItem(item IMenuItem) int {
	rv := objc.Call[int](p_, objc.Sel("indexOfItem:"), item)
	return rv
}

// Removes all items in the receiverâ€™s item menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1534430-removeallitems?language=objc
func (p_ PopUpButton) RemoveAllItems() {
	objc.Call[objc.Void](p_, objc.Sel("removeAllItems"))
}

// Ensures that the item being displayed by the receiver agrees with the selected item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1527124-synchronizetitleandselecteditem?language=objc
func (p_ PopUpButton) SynchronizeTitleAndSelectedItem() {
	objc.Call[objc.Void](p_, objc.Sel("synchronizeTitleAndSelectedItem"))
}

// Selects the menu item with the specified tag. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1528181-selectitemwithtag?language=objc
func (p_ PopUpButton) SelectItemWithTag(tag int) bool {
	rv := objc.Call[bool](p_, objc.Sel("selectItemWithTag:"), tag)
	return rv
}

// Returns the menu item at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1535860-itematindex?language=objc
func (p_ PopUpButton) ItemAtIndex(index int) MenuItem {
	rv := objc.Call[MenuItem](p_, objc.Sel("itemAtIndex:"), index)
	return rv
}

// Returns the index of the menu item that holds the specified represented object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1533993-indexofitemwithrepresentedobject?language=objc
func (p_ PopUpButton) IndexOfItemWithRepresentedObject(obj objc.IObject) int {
	rv := objc.Call[int](p_, objc.Sel("indexOfItemWithRepresentedObject:"), obj)
	return rv
}

// Adds an item with the specified title to the end of the menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1529500-additemwithtitle?language=objc
func (p_ PopUpButton) AddItemWithTitle(title string) {
	objc.Call[objc.Void](p_, objc.Sel("addItemWithTitle:"), title)
}

// Selects the item with the specified title. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1525666-selectitemwithtitle?language=objc
func (p_ PopUpButton) SelectItemWithTitle(title string) {
	objc.Call[objc.Void](p_, objc.Sel("selectItemWithTitle:"), title)
}

// Selects the item in the menu at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1534906-selectitematindex?language=objc
func (p_ PopUpButton) SelectItemAtIndex(index int) {
	objc.Call[objc.Void](p_, objc.Sel("selectItemAtIndex:"), index)
}

// Inserts an item at the specified position in the menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1533750-insertitemwithtitle?language=objc
func (p_ PopUpButton) InsertItemWithTitleAtIndex(title string, index int) {
	objc.Call[objc.Void](p_, objc.Sel("insertItemWithTitle:atIndex:"), title, index)
}

// Selects the specified menu item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1527162-selectitem?language=objc
func (p_ PopUpButton) SelectItem(item IMenuItem) {
	objc.Call[objc.Void](p_, objc.Sel("selectItem:"), item)
}

// An array of strings corresponding to the titles of the items in the menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1529271-itemtitles?language=objc
func (p_ PopUpButton) ItemTitles() []string {
	rv := objc.Call[[]string](p_, objc.Sel("itemTitles"))
	return rv
}

// The title of the item that was last selected by the user. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1534038-titleofselecteditem?language=objc
func (p_ PopUpButton) TitleOfSelectedItem() string {
	rv := objc.Call[string](p_, objc.Sel("titleOfSelectedItem"))
	return rv
}

// The edge of the button on which to display the menu when screen space is constrained. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1535345-preferrededge?language=objc
func (p_ PopUpButton) PreferredEdge() foundation.RectEdge {
	rv := objc.Call[foundation.RectEdge](p_, objc.Sel("preferredEdge"))
	return rv
}

// The edge of the button on which to display the menu when screen space is constrained. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1535345-preferrededge?language=objc
func (p_ PopUpButton) SetPreferredEdge(value foundation.RectEdge) {
	objc.Call[objc.Void](p_, objc.Sel("setPreferredEdge:"), value)
}

// The number of items in the menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1534959-numberofitems?language=objc
func (p_ PopUpButton) NumberOfItems() int {
	rv := objc.Call[int](p_, objc.Sel("numberOfItems"))
	return rv
}

// The array of menu item objects associated with the button. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1535361-itemarray?language=objc
func (p_ PopUpButton) ItemArray() []MenuItem {
	rv := objc.Call[[]MenuItem](p_, objc.Sel("itemArray"))
	return rv
}

// A Boolean value indicating whether the button displays a pull-down or pop-up menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1532070-pullsdown?language=objc
func (p_ PopUpButton) PullsDown() bool {
	rv := objc.Call[bool](p_, objc.Sel("pullsDown"))
	return rv
}

// A Boolean value indicating whether the button displays a pull-down or pop-up menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1532070-pullsdown?language=objc
func (p_ PopUpButton) SetPullsDown(value bool) {
	objc.Call[objc.Void](p_, objc.Sel("setPullsDown:"), value)
}

// The index of the item that was last selected by the user. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1534134-indexofselecteditem?language=objc
func (p_ PopUpButton) IndexOfSelectedItem() int {
	rv := objc.Call[int](p_, objc.Sel("indexOfSelectedItem"))
	return rv
}

// A Boolean value indicating whether the button enables and disables its items every time a user event occurs. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1530543-autoenablesitems?language=objc
func (p_ PopUpButton) AutoenablesItems() bool {
	rv := objc.Call[bool](p_, objc.Sel("autoenablesItems"))
	return rv
}

// A Boolean value indicating whether the button enables and disables its items every time a user event occurs. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1530543-autoenablesitems?language=objc
func (p_ PopUpButton) SetAutoenablesItems(value bool) {
	objc.Call[objc.Void](p_, objc.Sel("setAutoenablesItems:"), value)
}

// The menu item that was last selected by the user. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1526197-selecteditem?language=objc
func (p_ PopUpButton) SelectedItem() MenuItem {
	rv := objc.Call[MenuItem](p_, objc.Sel("selectedItem"))
	return rv
}

// The last item in the menu. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1535371-lastitem?language=objc
func (p_ PopUpButton) LastItem() MenuItem {
	rv := objc.Call[MenuItem](p_, objc.Sel("lastItem"))
	return rv
}

// The tag of the menu item that was last selected by the user. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nspopupbutton/1577134-selectedtag?language=objc
func (p_ PopUpButton) SelectedTag() int {
	rv := objc.Call[int](p_, objc.Sel("selectedTag"))
	return rv
}
