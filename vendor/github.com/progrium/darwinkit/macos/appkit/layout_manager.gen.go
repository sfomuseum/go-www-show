// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"unsafe"

	"github.com/progrium/darwinkit/macos/coregraphics"
	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// The class instance for the [LayoutManager] class.
var LayoutManagerClass = _LayoutManagerClass{objc.GetClass("NSLayoutManager")}

type _LayoutManagerClass struct {
	objc.Class
}

// An interface definition for the [LayoutManager] class.
type ILayoutManager interface {
	objc.IObject
	TemporaryAttributesAtCharacterIndexEffectiveRange(charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object
	AddTemporaryAttributesForCharacterRange(attrs map[foundation.AttributedStringKey]objc.IObject, charRange foundation.Range)
	SetBoundsRectForTextBlockGlyphRange(rect foundation.Rect, block ITextBlock, glyphRange foundation.Range)
	TemporaryAttributesAtCharacterIndexLongestEffectiveRangeInRange(location uint, range_ foundation.RangePointer, rangeLimit foundation.Range) map[foundation.AttributedStringKey]objc.Object
	DefaultLineHeightForFont(theFont IFont) float64
	BoundsRectForTextBlockAtIndexEffectiveRange(block ITextBlock, glyphIndex uint, effectiveGlyphRange foundation.RangePointer) foundation.Rect
	ShowAttachmentCellInRectCharacterIndex(cell ICell, rect foundation.Rect, attachmentIndex uint)
	BoundsRectForTextBlockGlyphRange(block ITextBlock, glyphRange foundation.Range) foundation.Rect
	TextContainerChangedTextView(container ITextContainer)
	SetTemporaryAttributesForCharacterRange(attrs map[foundation.AttributedStringKey]objc.IObject, charRange foundation.Range)
	DefaultBaselineOffsetForFont(theFont IFont) float64
	RemoveTemporaryAttributeForCharacterRange(attrName foundation.AttributedStringKey, charRange foundation.Range)
	RulerAccessoryViewForTextViewParagraphStyleRulerEnabled(view ITextView, style IParagraphStyle, ruler IRulerView, isEnabled bool) View
	ReplaceTextStorage(newTextStorage ITextStorage)
	SetLayoutRectForTextBlockGlyphRange(rect foundation.Rect, block ITextBlock, glyphRange foundation.Range)
	TemporaryAttributeAtCharacterIndexEffectiveRange(attrName foundation.AttributedStringKey, location uint, range_ foundation.RangePointer) objc.Object
	LayoutManagerOwnsFirstResponderInWindow(window IWindow) bool
	RulerMarkersForTextViewParagraphStyleRuler(view ITextView, style IParagraphStyle, ruler IRulerView) []RulerMarker
	LayoutRectForTextBlockGlyphRange(block ITextBlock, glyphRange foundation.Range) foundation.Rect
	AddTemporaryAttributeValueForCharacterRange(attrName foundation.AttributedStringKey, value objc.IObject, charRange foundation.Range)
	LayoutRectForTextBlockAtIndexEffectiveRange(block ITextBlock, glyphIndex uint, effectiveGlyphRange foundation.RangePointer) foundation.Rect
	TemporaryAttributeAtCharacterIndexLongestEffectiveRangeInRange(attrName foundation.AttributedStringKey, location uint, range_ foundation.RangePointer, rangeLimit foundation.Range) objc.Object
	AddTextContainer(container ITextContainer)
	SetDrawsOutsideLineFragmentForGlyphAtIndex(flag bool, glyphIndex uint)
	TextContainerForGlyphAtIndexEffectiveRange(glyphIndex uint, effectiveGlyphRange foundation.RangePointer) TextContainer
	EnsureLayoutForCharacterRange(charRange foundation.Range)
	GlyphIndexForCharacterAtIndex(charIndex uint) uint
	LineFragmentUsedRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(glyphIndex uint, effectiveGlyphRange foundation.RangePointer, flag bool) foundation.Rect
	EnsureLayoutForGlyphRange(glyphRange foundation.Range)
	LineFragmentRectForGlyphAtIndexEffectiveRange(glyphIndex uint, effectiveGlyphRange foundation.RangePointer) foundation.Rect
	EnsureLayoutForTextContainer(container ITextContainer)
	GlyphRangeForBoundingRectWithoutAdditionalLayoutInTextContainer(bounds foundation.Rect, container ITextContainer) foundation.Range
	DrawsOutsideLineFragmentForGlyphAtIndex(glyphIndex uint) bool
	SetAttachmentSizeForGlyphRange(attachmentSize foundation.Size, glyphRange foundation.Range)
	InvalidateLayoutForCharacterRangeActualCharacterRange(charRange foundation.Range, actualCharRange foundation.RangePointer)
	UsedRectForTextContainer(container ITextContainer) foundation.Rect
	TruncatedGlyphRangeInLineFragmentForGlyphAtIndex(glyphIndex uint) foundation.Range
	LineFragmentRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(glyphIndex uint, effectiveGlyphRange foundation.RangePointer, flag bool) foundation.Rect
	SetLocationForStartOfGlyphRange(location foundation.Point, glyphRange foundation.Range)
	InvalidateDisplayForCharacterRange(charRange foundation.Range)
	InsertTextContainerAtIndex(container ITextContainer, index uint)
	DrawGlyphsForGlyphRangeAtPoint(glyphsToShow foundation.Range, origin foundation.Point)
	NotShownAttributeForGlyphAtIndex(glyphIndex uint) bool
	IsValidGlyphIndex(glyphIndex uint) bool
	CGGlyphAtIndex(glyphIndex uint) coregraphics.Glyph
	ShowCGGlyphsPositionsCountFontTextMatrixAttributesInContext(glyphs *coregraphics.Glyph, positions *coregraphics.Point, glyphCount int, font IFont, textMatrix coregraphics.AffineTransform, attributes map[foundation.AttributedStringKey]objc.IObject, CGContext coregraphics.ContextRef)
	CharacterIndexForGlyphAtIndex(glyphIndex uint) uint
	LocationForGlyphAtIndex(glyphIndex uint) foundation.Point
	LineFragmentUsedRectForGlyphAtIndexEffectiveRange(glyphIndex uint, effectiveGlyphRange foundation.RangePointer) foundation.Rect
	SetLineFragmentRectForGlyphRangeUsedRect(fragmentRect foundation.Rect, glyphRange foundation.Range, usedRect foundation.Rect)
	CharacterRangeForGlyphRangeActualGlyphRange(glyphRange foundation.Range, actualGlyphRange foundation.RangePointer) foundation.Range
	GlyphRangeForTextContainer(container ITextContainer) foundation.Range
	InvalidateGlyphsForCharacterRangeChangeInLengthActualCharacterRange(charRange foundation.Range, delta int, actualCharRange foundation.RangePointer)
	EnumerateEnclosingRectsForGlyphRangeWithinSelectedGlyphRangeInTextContainerUsingBlock(glyphRange foundation.Range, selectedRange foundation.Range, textContainer ITextContainer, block func(rect foundation.Rect, stop *bool))
	PropertyForGlyphAtIndex(glyphIndex uint) GlyphProperty
	InvalidateDisplayForGlyphRange(glyphRange foundation.Range)
	GlyphRangeForBoundingRectInTextContainer(bounds foundation.Rect, container ITextContainer) foundation.Range
	StrikethroughGlyphRangeStrikethroughTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(glyphRange foundation.Range, strikethroughVal UnderlineStyle, lineRect foundation.Rect, lineGlyphRange foundation.Range, containerOrigin foundation.Point)
	EnsureLayoutForBoundingRectInTextContainer(bounds foundation.Rect, container ITextContainer)
	UnderlineGlyphRangeUnderlineTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(glyphRange foundation.Range, underlineVal UnderlineStyle, lineRect foundation.Rect, lineGlyphRange foundation.Range, containerOrigin foundation.Point)
	GetLineFragmentInsertionPointsForCharacterAtIndexAlternatePositionsInDisplayOrderPositionsCharacterIndexes(charIndex uint, aFlag bool, dFlag bool, positions *float64, charIndexes *uint) uint
	DrawUnderlineForGlyphRangeUnderlineTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(glyphRange foundation.Range, underlineVal UnderlineStyle, baselineOffset float64, lineRect foundation.Rect, lineGlyphRange foundation.Range, containerOrigin foundation.Point)
	DrawBackgroundForGlyphRangeAtPoint(glyphsToShow foundation.Range, origin foundation.Point)
	ProcessEditingForTextStorageEditedRangeChangeInLengthInvalidatedRange(textStorage ITextStorage, editMask TextStorageEditActions, newCharRange foundation.Range, delta int, invalidatedCharRange foundation.Range)
	AttachmentSizeForGlyphAtIndex(glyphIndex uint) foundation.Size
	CGGlyphAtIndexIsValidIndex(glyphIndex uint, isValidIndex *bool) coregraphics.Glyph
	GetFirstUnlaidCharacterIndexGlyphIndex(charIndex *uint, glyphIndex *uint)
	DrawStrikethroughForGlyphRangeStrikethroughTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(glyphRange foundation.Range, strikethroughVal UnderlineStyle, baselineOffset float64, lineRect foundation.Rect, lineGlyphRange foundation.Range, containerOrigin foundation.Point)
	GlyphIndexForPointInTextContainerFractionOfDistanceThroughGlyph(point foundation.Point, container ITextContainer, partialFraction *float64) uint
	GetGlyphsInRangeGlyphsPropertiesCharacterIndexesBidiLevels(glyphRange foundation.Range, glyphBuffer *coregraphics.Glyph, props *GlyphProperty, charIndexBuffer *uint, bidiLevelBuffer *uint8) uint
	GlyphIndexForPointInTextContainer(point foundation.Point, container ITextContainer) uint
	EnsureGlyphsForCharacterRange(charRange foundation.Range)
	RemoveTextContainerAtIndex(index uint)
	BoundingRectForGlyphRangeInTextContainer(glyphRange foundation.Range, container ITextContainer) foundation.Rect
	GlyphRangeForCharacterRangeActualCharacterRange(charRange foundation.Range, actualCharRange foundation.RangePointer) foundation.Range
	EnumerateLineFragmentsForGlyphRangeUsingBlock(glyphRange foundation.Range, block func(rect foundation.Rect, usedRect foundation.Rect, textContainer TextContainer, glyphRange foundation.Range, stop *bool))
	FractionOfDistanceThroughGlyphForPointInTextContainer(point foundation.Point, container ITextContainer) float64
	TextContainerForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(glyphIndex uint, effectiveGlyphRange foundation.RangePointer, flag bool) TextContainer
	EnsureGlyphsForGlyphRange(glyphRange foundation.Range)
	CharacterIndexForPointInTextContainerFractionOfDistanceBetweenInsertionPoints(point foundation.Point, container ITextContainer, partialFraction *float64) uint
	SetNotShownAttributeForGlyphAtIndex(flag bool, glyphIndex uint)
	RangeOfNominallySpacedGlyphsContainingIndex(glyphIndex uint) foundation.Range
	SetExtraLineFragmentRectUsedRectTextContainer(fragmentRect foundation.Rect, usedRect foundation.Rect, container ITextContainer)
	FirstUnlaidGlyphIndex() uint
	SetGlyphsPropertiesCharacterIndexesFontForGlyphRange(glyphs *coregraphics.Glyph, props *GlyphProperty, charIndexes *uint, aFont IFont, glyphRange foundation.Range)
	SetTextContainerForGlyphRange(container ITextContainer, glyphRange foundation.Range)
	TextContainerChangedGeometry(container ITextContainer)
	FillBackgroundRectArrayCountForCharacterRangeColor(rectArray *foundation.Rect, rectCount uint, charRange foundation.Range, color IColor)
	FirstUnlaidCharacterIndex() uint
	TypesetterBehavior() TypesetterBehavior
	SetTypesetterBehavior(value TypesetterBehavior)
	DefaultAttachmentScaling() ImageScaling
	SetDefaultAttachmentScaling(value ImageScaling)
	Typesetter() Typesetter
	SetTypesetter(value ITypesetter)
	FirstTextView() TextView
	GlyphGenerator() GlyphGenerator
	SetGlyphGenerator(value IGlyphGenerator)
	TextViewForBeginningOfSelection() TextView
	BackgroundLayoutEnabled() bool
	SetBackgroundLayoutEnabled(value bool)
	NumberOfGlyphs() uint
	UsesDefaultHyphenation() bool
	SetUsesDefaultHyphenation(value bool)
	TextContainers() []TextContainer
	AllowsNonContiguousLayout() bool
	SetAllowsNonContiguousLayout(value bool)
	UsesFontLeading() bool
	SetUsesFontLeading(value bool)
	Delegate() LayoutManagerDelegateObject
	SetDelegate(value PLayoutManagerDelegate)
	SetDelegateObject(valueObject objc.IObject)
	ExtraLineFragmentTextContainer() TextContainer
	TextStorage() TextStorage
	SetTextStorage(value ITextStorage)
	LimitsLayoutForSuspiciousContents() bool
	SetLimitsLayoutForSuspiciousContents(value bool)
	ShowsInvisibleCharacters() bool
	SetShowsInvisibleCharacters(value bool)
	ExtraLineFragmentUsedRect() foundation.Rect
	ExtraLineFragmentRect() foundation.Rect
	ShowsControlCharacters() bool
	SetShowsControlCharacters(value bool)
	HasNonContiguousLayout() bool
}

// An object that coordinates the layout and display of text characters. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager?language=objc
type LayoutManager struct {
	objc.Object
}

func LayoutManagerFrom(ptr unsafe.Pointer) LayoutManager {
	return LayoutManager{
		Object: objc.ObjectFrom(ptr),
	}
}

func (l_ LayoutManager) Init() LayoutManager {
	rv := objc.Call[LayoutManager](l_, objc.Sel("init"))
	return rv
}

func (lc _LayoutManagerClass) Alloc() LayoutManager {
	rv := objc.Call[LayoutManager](lc, objc.Sel("alloc"))
	return rv
}

func (lc _LayoutManagerClass) New() LayoutManager {
	rv := objc.Call[LayoutManager](lc, objc.Sel("new"))
	rv.Autorelease()
	return rv
}

func NewLayoutManager() LayoutManager {
	return LayoutManagerClass.New()
}

// Returns the dictionary of temporary attributes for the specified character range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403033-temporaryattributesatcharacterin?language=objc
func (l_ LayoutManager) TemporaryAttributesAtCharacterIndexEffectiveRange(charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object {
	rv := objc.Call[map[foundation.AttributedStringKey]objc.Object](l_, objc.Sel("temporaryAttributesAtCharacterIndex:effectiveRange:"), charIndex, effectiveCharRange)
	return rv
}

// Appends one or more temporary attributes to the attributes dictionary of the specified character range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403250-addtemporaryattributes?language=objc
func (l_ LayoutManager) AddTemporaryAttributesForCharacterRange(attrs map[foundation.AttributedStringKey]objc.IObject, charRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("addTemporaryAttributes:forCharacterRange:"), attrs, charRange)
}

// Sets the bounding rectangle that encloses the specified text block and glyph range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1402991-setboundsrect?language=objc
func (l_ LayoutManager) SetBoundsRectForTextBlockGlyphRange(rect foundation.Rect, block ITextBlock, glyphRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("setBoundsRect:forTextBlock:glyphRange:"), rect, block, glyphRange)
}

// Returns the temporary attributes for a character, and the maximum range they apply to. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403060-temporaryattributesatcharacterin?language=objc
func (l_ LayoutManager) TemporaryAttributesAtCharacterIndexLongestEffectiveRangeInRange(location uint, range_ foundation.RangePointer, rangeLimit foundation.Range) map[foundation.AttributedStringKey]objc.Object {
	rv := objc.Call[map[foundation.AttributedStringKey]objc.Object](l_, objc.Sel("temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:"), location, range_, rangeLimit)
	return rv
}

// Returns the default line height for a line of text that uses a specified font. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403007-defaultlineheightforfont?language=objc
func (l_ LayoutManager) DefaultLineHeightForFont(theFont IFont) float64 {
	rv := objc.Call[float64](l_, objc.Sel("defaultLineHeightForFont:"), theFont)
	return rv
}

// Returns the bounding rectangle for the specified text block and glyph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1402956-boundsrectfortextblock?language=objc
func (l_ LayoutManager) BoundsRectForTextBlockAtIndexEffectiveRange(block ITextBlock, glyphIndex uint, effectiveGlyphRange foundation.RangePointer) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("boundsRectForTextBlock:atIndex:effectiveRange:"), block, glyphIndex, effectiveGlyphRange)
	return rv
}

// Draws an attachment cell. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1402965-showattachmentcell?language=objc
func (l_ LayoutManager) ShowAttachmentCellInRectCharacterIndex(cell ICell, rect foundation.Rect, attachmentIndex uint) {
	objc.Call[objc.Void](l_, objc.Sel("showAttachmentCell:inRect:characterIndex:"), cell, rect, attachmentIndex)
}

// Returns the bounding rectangle that encloses the specified text block and glyph range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403138-boundsrectfortextblock?language=objc
func (l_ LayoutManager) BoundsRectForTextBlockGlyphRange(block ITextBlock, glyphRange foundation.Range) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("boundsRectForTextBlock:glyphRange:"), block, glyphRange)
	return rv
}

// Updates the information necessary to manage text view objects for the specified text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403229-textcontainerchangedtextview?language=objc
func (l_ LayoutManager) TextContainerChangedTextView(container ITextContainer) {
	objc.Call[objc.Void](l_, objc.Sel("textContainerChangedTextView:"), container)
}

// Sets one or more temporary attributes for the specified character range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403037-settemporaryattributes?language=objc
func (l_ LayoutManager) SetTemporaryAttributesForCharacterRange(attrs map[foundation.AttributedStringKey]objc.IObject, charRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("setTemporaryAttributes:forCharacterRange:"), attrs, charRange)
}

// Returns the default baseline offset that the layout manager's typesetter uses for the specified font. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403058-defaultbaselineoffsetforfont?language=objc
func (l_ LayoutManager) DefaultBaselineOffsetForFont(theFont IFont) float64 {
	rv := objc.Call[float64](l_, objc.Sel("defaultBaselineOffsetForFont:"), theFont)
	return rv
}

// Removes a temporary attribute from the list of attributes for the specified character range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403087-removetemporaryattribute?language=objc
func (l_ LayoutManager) RemoveTemporaryAttributeForCharacterRange(attrName foundation.AttributedStringKey, charRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("removeTemporaryAttribute:forCharacterRange:"), attrName, charRange)
}

// Returns the accessory view that the text system uses for its ruler. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403130-ruleraccessoryviewfortextview?language=objc
func (l_ LayoutManager) RulerAccessoryViewForTextViewParagraphStyleRulerEnabled(view ITextView, style IParagraphStyle, ruler IRulerView, isEnabled bool) View {
	rv := objc.Call[View](l_, objc.Sel("rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:"), view, style, ruler, isEnabled)
	return rv
}

// Replaces the layout manager's current text storage object with the specified object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403227-replacetextstorage?language=objc
func (l_ LayoutManager) ReplaceTextStorage(newTextStorage ITextStorage) {
	objc.Call[objc.Void](l_, objc.Sel("replaceTextStorage:"), newTextStorage)
}

// Sets the layout rectangle that encloses the specified text block and glyph range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1402929-setlayoutrect?language=objc
func (l_ LayoutManager) SetLayoutRectForTextBlockGlyphRange(rect foundation.Rect, block ITextBlock, glyphRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("setLayoutRect:forTextBlock:glyphRange:"), rect, block, glyphRange)
}

// Returns the value for the temporary attribute of a character, and the range it applies to. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1402969-temporaryattribute?language=objc
func (l_ LayoutManager) TemporaryAttributeAtCharacterIndexEffectiveRange(attrName foundation.AttributedStringKey, location uint, range_ foundation.RangePointer) objc.Object {
	rv := objc.Call[objc.Object](l_, objc.Sel("temporaryAttribute:atCharacterIndex:effectiveRange:"), attrName, location, range_)
	return rv
}

// Indicates whether the first responder in the specified window is a text view for the layout manager. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403026-layoutmanagerownsfirstresponderi?language=objc
func (l_ LayoutManager) LayoutManagerOwnsFirstResponderInWindow(window IWindow) bool {
	rv := objc.Call[bool](l_, objc.Sel("layoutManagerOwnsFirstResponderInWindow:"), window)
	return rv
}

// Returns an array of text ruler objects for the current selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403163-rulermarkersfortextview?language=objc
func (l_ LayoutManager) RulerMarkersForTextViewParagraphStyleRuler(view ITextView, style IParagraphStyle, ruler IRulerView) []RulerMarker {
	rv := objc.Call[[]RulerMarker](l_, objc.Sel("rulerMarkersForTextView:paragraphStyle:ruler:"), view, style, ruler)
	return rv
}

// Returns the rectangle for the layout of the specified text block and glyph range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403201-layoutrectfortextblock?language=objc
func (l_ LayoutManager) LayoutRectForTextBlockGlyphRange(block ITextBlock, glyphRange foundation.Range) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("layoutRectForTextBlock:glyphRange:"), block, glyphRange)
	return rv
}

// Adds a temporary attribute to the characters in the specified range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403005-addtemporaryattribute?language=objc
func (l_ LayoutManager) AddTemporaryAttributeValueForCharacterRange(attrName foundation.AttributedStringKey, value objc.IObject, charRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("addTemporaryAttribute:value:forCharacterRange:"), attrName, value, charRange)
}

// Returns the rectangle for the layout of the specified text block and glyph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403102-layoutrectfortextblock?language=objc
func (l_ LayoutManager) LayoutRectForTextBlockAtIndexEffectiveRange(block ITextBlock, glyphIndex uint, effectiveGlyphRange foundation.RangePointer) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("layoutRectForTextBlock:atIndex:effectiveRange:"), block, glyphIndex, effectiveGlyphRange)
	return rv
}

// Returns the value for the temporary attribute of a character, and the maximum range it applies to. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403223-temporaryattribute?language=objc
func (l_ LayoutManager) TemporaryAttributeAtCharacterIndexLongestEffectiveRangeInRange(attrName foundation.AttributedStringKey, location uint, range_ foundation.RangePointer, rangeLimit foundation.Range) objc.Object {
	rv := objc.Call[objc.Object](l_, objc.Sel("temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:"), attrName, location, range_, rangeLimit)
	return rv
}

// Appends the specified text container to the series of text containers where the layout manager arranges text. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402946-addtextcontainer?language=objc
func (l_ LayoutManager) AddTextContainer(container ITextContainer) {
	objc.Call[objc.Void](l_, objc.Sel("addTextContainer:"), container)
}

// Indicates whether the specified glyph exceeds the bounds of the line fragment for its layout. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402964-setdrawsoutsidelinefragment?language=objc
func (l_ LayoutManager) SetDrawsOutsideLineFragmentForGlyphAtIndex(flag bool, glyphIndex uint) {
	objc.Call[objc.Void](l_, objc.Sel("setDrawsOutsideLineFragment:forGlyphAtIndex:"), flag, glyphIndex)
}

// Returns the text container that manages the layout for the specified glyph, causing layout to happen as necessary. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403110-textcontainerforglyphatindex?language=objc
func (l_ LayoutManager) TextContainerForGlyphAtIndexEffectiveRange(glyphIndex uint, effectiveGlyphRange foundation.RangePointer) TextContainer {
	rv := objc.Call[TextContainer](l_, objc.Sel("textContainerForGlyphAtIndex:effectiveRange:"), glyphIndex, effectiveGlyphRange)
	return rv
}

// Forces the layout manager to perform layout for the specified character range if it hasn’t already. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402986-ensurelayoutforcharacterrange?language=objc
func (l_ LayoutManager) EnsureLayoutForCharacterRange(charRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("ensureLayoutForCharacterRange:"), charRange)
}

// Returns the index of the first glyph of the character at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403001-glyphindexforcharacteratindex?language=objc
func (l_ LayoutManager) GlyphIndexForCharacterAtIndex(charIndex uint) uint {
	rv := objc.Call[uint](l_, objc.Sel("glyphIndexForCharacterAtIndex:"), charIndex)
	return rv
}

// Returns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403035-linefragmentusedrectforglyphatin?language=objc
func (l_ LayoutManager) LineFragmentUsedRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(glyphIndex uint, effectiveGlyphRange foundation.RangePointer, flag bool) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:"), glyphIndex, effectiveGlyphRange, flag)
	return rv
}

// Forces the layout manager to perform layout for the specified glyph range if it hasn’t already. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402939-ensurelayoutforglyphrange?language=objc
func (l_ LayoutManager) EnsureLayoutForGlyphRange(glyphRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("ensureLayoutForGlyphRange:"), glyphRange)
}

// Returns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403140-linefragmentrectforglyphatindex?language=objc
func (l_ LayoutManager) LineFragmentRectForGlyphAtIndexEffectiveRange(glyphIndex uint, effectiveGlyphRange foundation.RangePointer) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("lineFragmentRectForGlyphAtIndex:effectiveRange:"), glyphIndex, effectiveGlyphRange)
	return rv
}

// Forces the layout manager to perform layout for the specified text container if it hasn’t already. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402967-ensurelayoutfortextcontainer?language=objc
func (l_ LayoutManager) EnsureLayoutForTextContainer(container ITextContainer) {
	objc.Call[objc.Void](l_, objc.Sel("ensureLayoutForTextContainer:"), container)
}

// Returns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403183-glyphrangeforboundingrectwithout?language=objc
func (l_ LayoutManager) GlyphRangeForBoundingRectWithoutAdditionalLayoutInTextContainer(bounds foundation.Rect, container ITextContainer) foundation.Range {
	rv := objc.Call[foundation.Range](l_, objc.Sel("glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:"), bounds, container)
	return rv
}

// Indicates whether the glyph draws outside its line fragment rectangle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403003-drawsoutsidelinefragmentforglyph?language=objc
func (l_ LayoutManager) DrawsOutsideLineFragmentForGlyphAtIndex(glyphIndex uint) bool {
	rv := objc.Call[bool](l_, objc.Sel("drawsOutsideLineFragmentForGlyphAtIndex:"), glyphIndex)
	return rv
}

// Sets the size to use when drawing a glyph that represents an attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403047-setattachmentsize?language=objc
func (l_ LayoutManager) SetAttachmentSizeForGlyphRange(attachmentSize foundation.Size, glyphRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("setAttachmentSize:forGlyphRange:"), attachmentSize, glyphRange)
}

// Invalidates the layout information for the glyphs that map to the specified character range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403248-invalidatelayoutforcharacterrang?language=objc
func (l_ LayoutManager) InvalidateLayoutForCharacterRangeActualCharacterRange(charRange foundation.Range, actualCharRange foundation.RangePointer) {
	objc.Call[objc.Void](l_, objc.Sel("invalidateLayoutForCharacterRange:actualCharacterRange:"), charRange, actualCharRange)
}

// Returns the bounding rectangle for the glyphs in the specified text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402980-usedrectfortextcontainer?language=objc
func (l_ LayoutManager) UsedRectForTextContainer(container ITextContainer) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("usedRectForTextContainer:"), container)
	return rv
}

// Returns the range of truncated glyphs for a line fragment that contains the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403203-truncatedglyphrangeinlinefragmen?language=objc
func (l_ LayoutManager) TruncatedGlyphRangeInLineFragmentForGlyphAtIndex(glyphIndex uint) foundation.Range {
	rv := objc.Call[foundation.Range](l_, objc.Sel("truncatedGlyphRangeInLineFragmentForGlyphAtIndex:"), glyphIndex)
	return rv
}

// Returns the line fragment rectangle that contains the glyph at the specified glyph index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403116-linefragmentrectforglyphatindex?language=objc
func (l_ LayoutManager) LineFragmentRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(glyphIndex uint, effectiveGlyphRange foundation.RangePointer, flag bool) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:"), glyphIndex, effectiveGlyphRange, flag)
	return rv
}

// Sets the location for the first glyph in the specified range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402982-setlocation?language=objc
func (l_ LayoutManager) SetLocationForStartOfGlyphRange(location foundation.Point, glyphRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("setLocation:forStartOfGlyphRange:"), location, glyphRange)
}

// Invalidates display for the specified character range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402924-invalidatedisplayforcharacterran?language=objc
func (l_ LayoutManager) InvalidateDisplayForCharacterRange(charRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("invalidateDisplayForCharacterRange:"), charRange)
}

// Inserts a text container at the specified index in the list of text containers. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403010-inserttextcontainer?language=objc
func (l_ LayoutManager) InsertTextContainerAtIndex(container ITextContainer, index uint) {
	objc.Call[objc.Void](l_, objc.Sel("insertTextContainer:atIndex:"), container, index)
}

// Draws the specified glyphs, which must lie completely within a single text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403158-drawglyphsforglyphrange?language=objc
func (l_ LayoutManager) DrawGlyphsForGlyphRangeAtPoint(glyphsToShow foundation.Range, origin foundation.Point) {
	objc.Call[objc.Void](l_, objc.Sel("drawGlyphsForGlyphRange:atPoint:"), glyphsToShow, origin)
}

// Indicates whether the glyph at the specified index has a visible representation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402931-notshownattributeforglyphatindex?language=objc
func (l_ LayoutManager) NotShownAttributeForGlyphAtIndex(glyphIndex uint) bool {
	rv := objc.Call[bool](l_, objc.Sel("notShownAttributeForGlyphAtIndex:"), glyphIndex)
	return rv
}

// Indicates whether the specified index refers to a valid glyph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402950-isvalidglyphindex?language=objc
func (l_ LayoutManager) IsValidGlyphIndex(glyphIndex uint) bool {
	rv := objc.Call[bool](l_, objc.Sel("isValidGlyphIndex:"), glyphIndex)
	return rv
}

// Returns the glyph at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403039-cgglyphatindex?language=objc
func (l_ LayoutManager) CGGlyphAtIndex(glyphIndex uint) coregraphics.Glyph {
	rv := objc.Call[coregraphics.Glyph](l_, objc.Sel("CGGlyphAtIndex:"), glyphIndex)
	return rv
}

// Renders the glyphs at the specified positions, using the specified attributes. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/3180379-showcgglyphs?language=objc
func (l_ LayoutManager) ShowCGGlyphsPositionsCountFontTextMatrixAttributesInContext(glyphs *coregraphics.Glyph, positions *coregraphics.Point, glyphCount int, font IFont, textMatrix coregraphics.AffineTransform, attributes map[foundation.AttributedStringKey]objc.IObject, CGContext coregraphics.ContextRef) {
	objc.Call[objc.Void](l_, objc.Sel("showCGGlyphs:positions:count:font:textMatrix:attributes:inContext:"), glyphs, positions, glyphCount, font, textMatrix, attributes, CGContext)
}

// Returns the index in the text storage for the first character of the specified glyph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402944-characterindexforglyphatindex?language=objc
func (l_ LayoutManager) CharacterIndexForGlyphAtIndex(glyphIndex uint) uint {
	rv := objc.Call[uint](l_, objc.Sel("characterIndexForGlyphAtIndex:"), glyphIndex)
	return rv
}

// Returns the location for the specified glyph within its line fragment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403239-locationforglyphatindex?language=objc
func (l_ LayoutManager) LocationForGlyphAtIndex(glyphIndex uint) foundation.Point {
	rv := objc.Call[foundation.Point](l_, objc.Sel("locationForGlyphAtIndex:"), glyphIndex)
	return rv
}

// Returns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403193-linefragmentusedrectforglyphatin?language=objc
func (l_ LayoutManager) LineFragmentUsedRectForGlyphAtIndexEffectiveRange(glyphIndex uint, effectiveGlyphRange foundation.RangePointer) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("lineFragmentUsedRectForGlyphAtIndex:effectiveRange:"), glyphIndex, effectiveGlyphRange)
	return rv
}

// Associates the line fragment bounds for the specified range of glyphs. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402935-setlinefragmentrect?language=objc
func (l_ LayoutManager) SetLineFragmentRectForGlyphRangeUsedRect(fragmentRect foundation.Rect, glyphRange foundation.Range, usedRect foundation.Rect) {
	objc.Call[objc.Void](l_, objc.Sel("setLineFragmentRect:forGlyphRange:usedRect:"), fragmentRect, glyphRange, usedRect)
}

// Returns the range of characters that correspond to the glyphs in the specified glyph range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403225-characterrangeforglyphrange?language=objc
func (l_ LayoutManager) CharacterRangeForGlyphRangeActualGlyphRange(glyphRange foundation.Range, actualGlyphRange foundation.RangePointer) foundation.Range {
	rv := objc.Call[foundation.Range](l_, objc.Sel("characterRangeForGlyphRange:actualGlyphRange:"), glyphRange, actualGlyphRange)
	return rv
}

// Returns the range of glyphs lying within the specified text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403041-glyphrangefortextcontainer?language=objc
func (l_ LayoutManager) GlyphRangeForTextContainer(container ITextContainer) foundation.Range {
	rv := objc.Call[foundation.Range](l_, objc.Sel("glyphRangeForTextContainer:"), container)
	return rv
}

// Invalidates and adjusts the glyphs in the specified character range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403171-invalidateglyphsforcharacterrang?language=objc
func (l_ LayoutManager) InvalidateGlyphsForCharacterRangeChangeInLengthActualCharacterRange(charRange foundation.Range, delta int, actualCharRange foundation.RangePointer) {
	objc.Call[objc.Void](l_, objc.Sel("invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:"), charRange, delta, actualCharRange)
}

// Enumerates enclosing rectangles for the specified glyph range in a text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403021-enumerateenclosingrectsforglyphr?language=objc
func (l_ LayoutManager) EnumerateEnclosingRectsForGlyphRangeWithinSelectedGlyphRangeInTextContainerUsingBlock(glyphRange foundation.Range, selectedRange foundation.Range, textContainer ITextContainer, block func(rect foundation.Rect, stop *bool)) {
	objc.Call[objc.Void](l_, objc.Sel("enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:"), glyphRange, selectedRange, textContainer, block)
}

// Returns the glyph property of the glyph at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403014-propertyforglyphatindex?language=objc
func (l_ LayoutManager) PropertyForGlyphAtIndex(glyphIndex uint) GlyphProperty {
	rv := objc.Call[GlyphProperty](l_, objc.Sel("propertyForGlyphAtIndex:"), glyphIndex)
	return rv
}

// Invalidates a range of glyphs, requiring new layout information, and updates the appropriate regions of any text views that display those glyphs. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403118-invalidatedisplayforglyphrange?language=objc
func (l_ LayoutManager) InvalidateDisplayForGlyphRange(glyphRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("invalidateDisplayForGlyphRange:"), glyphRange)
}

// Returns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403053-glyphrangeforboundingrect?language=objc
func (l_ LayoutManager) GlyphRangeForBoundingRectInTextContainer(bounds foundation.Rect, container ITextContainer) foundation.Range {
	rv := objc.Call[foundation.Range](l_, objc.Sel("glyphRangeForBoundingRect:inTextContainer:"), bounds, container)
	return rv
}

// Calculates and draws strikethrough for the specified glyphs. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403009-strikethroughglyphrange?language=objc
func (l_ LayoutManager) StrikethroughGlyphRangeStrikethroughTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(glyphRange foundation.Range, strikethroughVal UnderlineStyle, lineRect foundation.Rect, lineGlyphRange foundation.Range, containerOrigin foundation.Point) {
	objc.Call[objc.Void](l_, objc.Sel("strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:"), glyphRange, strikethroughVal, lineRect, lineGlyphRange, containerOrigin)
}

// Forces the layout manager to perform layout for the specified area in the specified text container if it hasn’t already. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402962-ensurelayoutforboundingrect?language=objc
func (l_ LayoutManager) EnsureLayoutForBoundingRectInTextContainer(bounds foundation.Rect, container ITextContainer) {
	objc.Call[objc.Void](l_, objc.Sel("ensureLayoutForBoundingRect:inTextContainer:"), bounds, container)
}

// Calculates subranges to underline for the specified glyphs and draws the underlining as appropriate. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403114-underlineglyphrange?language=objc
func (l_ LayoutManager) UnderlineGlyphRangeUnderlineTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(glyphRange foundation.Range, underlineVal UnderlineStyle, lineRect foundation.Rect, lineGlyphRange foundation.Range, containerOrigin foundation.Point) {
	objc.Call[objc.Void](l_, objc.Sel("underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:"), glyphRange, underlineVal, lineRect, lineGlyphRange, containerOrigin)
}

// Returns insertion points in bulk for a specified line fragment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403012-getlinefragmentinsertionpointsfo?language=objc
func (l_ LayoutManager) GetLineFragmentInsertionPointsForCharacterAtIndexAlternatePositionsInDisplayOrderPositionsCharacterIndexes(charIndex uint, aFlag bool, dFlag bool, positions *float64, charIndexes *uint) uint {
	rv := objc.Call[uint](l_, objc.Sel("getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:"), charIndex, aFlag, dFlag, positions, charIndexes)
	return rv
}

// Draws underlining for the glyphs in a specified range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403079-drawunderlineforglyphrange?language=objc
func (l_ LayoutManager) DrawUnderlineForGlyphRangeUnderlineTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(glyphRange foundation.Range, underlineVal UnderlineStyle, baselineOffset float64, lineRect foundation.Rect, lineGlyphRange foundation.Range, containerOrigin foundation.Point) {
	objc.Call[objc.Void](l_, objc.Sel("drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:"), glyphRange, underlineVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin)
}

// Draws background marks for the specified glyphs, which must lie completely within a single text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402949-drawbackgroundforglyphrange?language=objc
func (l_ LayoutManager) DrawBackgroundForGlyphRangeAtPoint(glyphsToShow foundation.Range, origin foundation.Point) {
	objc.Call[objc.Void](l_, objc.Sel("drawBackgroundForGlyphRange:atPoint:"), glyphsToShow, origin)
}

// Notifies the layout manager when an edit action changes the contents of its text storage object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403065-processeditingfortextstorage?language=objc
func (l_ LayoutManager) ProcessEditingForTextStorageEditedRangeChangeInLengthInvalidatedRange(textStorage ITextStorage, editMask TextStorageEditActions, newCharRange foundation.Range, delta int, invalidatedCharRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:"), textStorage, editMask, newCharRange, delta, invalidatedCharRange)
}

// Returns the size of the attachment glyph at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403099-attachmentsizeforglyphatindex?language=objc
func (l_ LayoutManager) AttachmentSizeForGlyphAtIndex(glyphIndex uint) foundation.Size {
	rv := objc.Call[foundation.Size](l_, objc.Sel("attachmentSizeForGlyphAtIndex:"), glyphIndex)
	return rv
}

// Returns the glyph at the specified index along with information about whether the glyph index is valid. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403132-cgglyphatindex?language=objc
func (l_ LayoutManager) CGGlyphAtIndexIsValidIndex(glyphIndex uint, isValidIndex *bool) coregraphics.Glyph {
	rv := objc.Call[coregraphics.Glyph](l_, objc.Sel("CGGlyphAtIndex:isValidIndex:"), glyphIndex, isValidIndex)
	return rv
}

// Returns the indexes for the first character and glyph that have invalid layout information. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403187-getfirstunlaidcharacterindex?language=objc
func (l_ LayoutManager) GetFirstUnlaidCharacterIndexGlyphIndex(charIndex *uint, glyphIndex *uint) {
	objc.Call[objc.Void](l_, objc.Sel("getFirstUnlaidCharacterIndex:glyphIndex:"), charIndex, glyphIndex)
}

// Draws a strikethrough for the specified glyphs. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403169-drawstrikethroughforglyphrange?language=objc
func (l_ LayoutManager) DrawStrikethroughForGlyphRangeStrikethroughTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(glyphRange foundation.Range, strikethroughVal UnderlineStyle, baselineOffset float64, lineRect foundation.Rect, lineGlyphRange foundation.Range, containerOrigin foundation.Point) {
	objc.Call[objc.Void](l_, objc.Sel("drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:"), glyphRange, strikethroughVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin)
}

// Returns the index of the glyph at the specified point using the container's coordinate system. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402933-glyphindexforpoint?language=objc
func (l_ LayoutManager) GlyphIndexForPointInTextContainerFractionOfDistanceThroughGlyph(point foundation.Point, container ITextContainer, partialFraction *float64) uint {
	rv := objc.Call[uint](l_, objc.Sel("glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:"), point, container, partialFraction)
	return rv
}

// Fills a passed-in buffer with a sequence of glyphs. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403104-getglyphsinrange?language=objc
func (l_ LayoutManager) GetGlyphsInRangeGlyphsPropertiesCharacterIndexesBidiLevels(glyphRange foundation.Range, glyphBuffer *coregraphics.Glyph, props *GlyphProperty, charIndexBuffer *uint, bidiLevelBuffer *uint8) uint {
	rv := objc.Call[uint](l_, objc.Sel("getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:"), glyphRange, glyphBuffer, props, charIndexBuffer, bidiLevelBuffer)
	return rv
}

// Returns the index of the glyph at the specified location in a text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403112-glyphindexforpoint?language=objc
func (l_ LayoutManager) GlyphIndexForPointInTextContainer(point foundation.Point, container ITextContainer) uint {
	rv := objc.Call[uint](l_, objc.Sel("glyphIndexForPoint:inTextContainer:"), point, container)
	return rv
}

// Forces the layout manager to generate glyphs for the specified character range if it hasn’t already. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403189-ensureglyphsforcharacterrange?language=objc
func (l_ LayoutManager) EnsureGlyphsForCharacterRange(charRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("ensureGlyphsForCharacterRange:"), charRange)
}

// Removes the text container at the specified index and invalidates the layout as necessary. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403017-removetextcontaineratindex?language=objc
func (l_ LayoutManager) RemoveTextContainerAtIndex(index uint) {
	objc.Call[objc.Void](l_, objc.Sel("removeTextContainerAtIndex:"), index)
}

// Returns the bounding rectangle for the specified glyphs in a container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403255-boundingrectforglyphrange?language=objc
func (l_ LayoutManager) BoundingRectForGlyphRangeInTextContainer(glyphRange foundation.Range, container ITextContainer) foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("boundingRectForGlyphRange:inTextContainer:"), glyphRange, container)
	return rv
}

// Returns the range of glyphs that the specified range of characters generates. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402999-glyphrangeforcharacterrange?language=objc
func (l_ LayoutManager) GlyphRangeForCharacterRangeActualCharacterRange(charRange foundation.Range, actualCharRange foundation.RangePointer) foundation.Range {
	rv := objc.Call[foundation.Range](l_, objc.Sel("glyphRangeForCharacterRange:actualCharacterRange:"), charRange, actualCharRange)
	return rv
}

// Enumerates line fragments intersecting with the specified glyph range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403160-enumeratelinefragmentsforglyphra?language=objc
func (l_ LayoutManager) EnumerateLineFragmentsForGlyphRangeUsingBlock(glyphRange foundation.Range, block func(rect foundation.Rect, usedRect foundation.Rect, textContainer TextContainer, glyphRange foundation.Range, stop *bool)) {
	objc.Call[objc.Void](l_, objc.Sel("enumerateLineFragmentsForGlyphRange:usingBlock:"), glyphRange, block)
}

// Returns the fraction of the distance between the glyph at the specified point and the next glyph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403097-fractionofdistancethroughglyphfo?language=objc
func (l_ LayoutManager) FractionOfDistanceThroughGlyphForPointInTextContainer(point foundation.Point, container ITextContainer) float64 {
	rv := objc.Call[float64](l_, objc.Sel("fractionOfDistanceThroughGlyphForPoint:inTextContainer:"), point, container)
	return rv
}

// Returns the text container that manages the layout for the specified glyph. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403055-textcontainerforglyphatindex?language=objc
func (l_ LayoutManager) TextContainerForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(glyphIndex uint, effectiveGlyphRange foundation.RangePointer, flag bool) TextContainer {
	rv := objc.Call[TextContainer](l_, objc.Sel("textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:"), glyphIndex, effectiveGlyphRange, flag)
	return rv
}

// Forces the layout manager to generate glyphs for the specified glyph range if it hasn’t already. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403219-ensureglyphsforglyphrange?language=objc
func (l_ LayoutManager) EnsureGlyphsForGlyphRange(glyphRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("ensureGlyphsForGlyphRange:"), glyphRange)
}

// Returns the index of the character that lies beneath the specified point using the specified container's coordinate system. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403028-characterindexforpoint?language=objc
func (l_ LayoutManager) CharacterIndexForPointInTextContainerFractionOfDistanceBetweenInsertionPoints(point foundation.Point, container ITextContainer, partialFraction *float64) uint {
	rv := objc.Call[uint](l_, objc.Sel("characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:"), point, container, partialFraction)
	return rv
}

// Sets the visibility of the glyph at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403078-setnotshownattribute?language=objc
func (l_ LayoutManager) SetNotShownAttributeForGlyphAtIndex(flag bool, glyphIndex uint) {
	objc.Call[objc.Void](l_, objc.Sel("setNotShownAttribute:forGlyphAtIndex:"), flag, glyphIndex)
}

// Returns the range of displayable glyphs that surround the glyph at the specified index. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403152-rangeofnominallyspacedglyphscont?language=objc
func (l_ LayoutManager) RangeOfNominallySpacedGlyphsContainingIndex(glyphIndex uint) foundation.Range {
	rv := objc.Call[foundation.Range](l_, objc.Sel("rangeOfNominallySpacedGlyphsContainingIndex:"), glyphIndex)
	return rv
}

// Sets the bounds and container for the extra line fragment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403071-setextralinefragmentrect?language=objc
func (l_ LayoutManager) SetExtraLineFragmentRectUsedRectTextContainer(fragmentRect foundation.Rect, usedRect foundation.Rect, container ITextContainer) {
	objc.Call[objc.Void](l_, objc.Sel("setExtraLineFragmentRect:usedRect:textContainer:"), fragmentRect, usedRect, container)
}

// Returns the index for the first glyph in the layout manager that isn’t in the layout. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403245-firstunlaidglyphindex?language=objc
func (l_ LayoutManager) FirstUnlaidGlyphIndex() uint {
	rv := objc.Call[uint](l_, objc.Sel("firstUnlaidGlyphIndex"))
	return rv
}

// Stores the initial glyphs and glyph properties for a character range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403030-setglyphs?language=objc
func (l_ LayoutManager) SetGlyphsPropertiesCharacterIndexesFontForGlyphRange(glyphs *coregraphics.Glyph, props *GlyphProperty, charIndexes *uint, aFont IFont, glyphRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("setGlyphs:properties:characterIndexes:font:forGlyphRange:"), glyphs, props, charIndexes, aFont, glyphRange)
}

// Associates a text container with the specified range of glyphs. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403241-settextcontainer?language=objc
func (l_ LayoutManager) SetTextContainerForGlyphRange(container ITextContainer, glyphRange foundation.Range) {
	objc.Call[objc.Void](l_, objc.Sel("setTextContainer:forGlyphRange:"), container, glyphRange)
}

// Invalidates the layout information, and possibly glyphs, for the specified text container and all subsequent text container objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403091-textcontainerchangedgeometry?language=objc
func (l_ LayoutManager) TextContainerChangedGeometry(container ITextContainer) {
	objc.Call[objc.Void](l_, objc.Sel("textContainerChangedGeometry:"), container)
}

// Fills background rectangles with a color. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403161-fillbackgroundrectarray?language=objc
func (l_ LayoutManager) FillBackgroundRectArrayCountForCharacterRangeColor(rectArray *foundation.Rect, rectCount uint, charRange foundation.Range, color IColor) {
	objc.Call[objc.Void](l_, objc.Sel("fillBackgroundRectArray:count:forCharacterRange:color:"), rectArray, rectCount, charRange, color)
}

// Returns the index for the first character in the layout manager that isn’t in the layout. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403067-firstunlaidcharacterindex?language=objc
func (l_ LayoutManager) FirstUnlaidCharacterIndex() uint {
	rv := objc.Call[uint](l_, objc.Sel("firstUnlaidCharacterIndex"))
	return rv
}

// The default typesetter behavior. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403199-typesetterbehavior?language=objc
func (l_ LayoutManager) TypesetterBehavior() TypesetterBehavior {
	rv := objc.Call[TypesetterBehavior](l_, objc.Sel("typesetterBehavior"))
	return rv
}

// The default typesetter behavior. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403199-typesetterbehavior?language=objc
func (l_ LayoutManager) SetTypesetterBehavior(value TypesetterBehavior) {
	objc.Call[objc.Void](l_, objc.Sel("setTypesetterBehavior:"), value)
}

// The default amount of scaling to apply when an attachment image is too large to fit in a text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403045-defaultattachmentscaling?language=objc
func (l_ LayoutManager) DefaultAttachmentScaling() ImageScaling {
	rv := objc.Call[ImageScaling](l_, objc.Sel("defaultAttachmentScaling"))
	return rv
}

// The default amount of scaling to apply when an attachment image is too large to fit in a text container. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403045-defaultattachmentscaling?language=objc
func (l_ LayoutManager) SetDefaultAttachmentScaling(value ImageScaling) {
	objc.Call[objc.Void](l_, objc.Sel("setDefaultAttachmentScaling:"), value)
}

// The current typesetter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403205-typesetter?language=objc
func (l_ LayoutManager) Typesetter() Typesetter {
	rv := objc.Call[Typesetter](l_, objc.Sel("typesetter"))
	return rv
}

// The current typesetter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403205-typesetter?language=objc
func (l_ LayoutManager) SetTypesetter(value ITypesetter) {
	objc.Call[objc.Void](l_, objc.Sel("setTypesetter:"), value)
}

// The first text view in the layout manager’s series of text views. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1402995-firsttextview?language=objc
func (l_ LayoutManager) FirstTextView() TextView {
	rv := objc.Call[TextView](l_, objc.Sel("firstTextView"))
	return rv
}

// The glyph generator that the layout manager uses. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403069-glyphgenerator?language=objc
func (l_ LayoutManager) GlyphGenerator() GlyphGenerator {
	rv := objc.Call[GlyphGenerator](l_, objc.Sel("glyphGenerator"))
	return rv
}

// The glyph generator that the layout manager uses. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403069-glyphgenerator?language=objc
func (l_ LayoutManager) SetGlyphGenerator(value IGlyphGenerator) {
	objc.Call[objc.Void](l_, objc.Sel("setGlyphGenerator:"), value)
}

// The text view that contains the first glyph in the selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1403089-textviewforbeginningofselection?language=objc
func (l_ LayoutManager) TextViewForBeginningOfSelection() TextView {
	rv := objc.Call[TextView](l_, objc.Sel("textViewForBeginningOfSelection"))
	return rv
}

// A Boolean value that indicates whether the layout manager generates glyphs and lays them out when the app's run loop is idle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1402952-backgroundlayoutenabled?language=objc
func (l_ LayoutManager) BackgroundLayoutEnabled() bool {
	rv := objc.Call[bool](l_, objc.Sel("backgroundLayoutEnabled"))
	return rv
}

// A Boolean value that indicates whether the layout manager generates glyphs and lays them out when the app's run loop is idle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanager/1402952-backgroundlayoutenabled?language=objc
func (l_ LayoutManager) SetBackgroundLayoutEnabled(value bool) {
	objc.Call[objc.Void](l_, objc.Sel("setBackgroundLayoutEnabled:"), value)
}

// The number of glyphs in the layout manager. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402937-numberofglyphs?language=objc
func (l_ LayoutManager) NumberOfGlyphs() uint {
	rv := objc.Call[uint](l_, objc.Sel("numberOfGlyphs"))
	return rv
}

// A Boolean value that indicates whether the layout manager uses the default hyphenation rules to wrap lines. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/3180380-usesdefaulthyphenation?language=objc
func (l_ LayoutManager) UsesDefaultHyphenation() bool {
	rv := objc.Call[bool](l_, objc.Sel("usesDefaultHyphenation"))
	return rv
}

// A Boolean value that indicates whether the layout manager uses the default hyphenation rules to wrap lines. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/3180380-usesdefaulthyphenation?language=objc
func (l_ LayoutManager) SetUsesDefaultHyphenation(value bool) {
	objc.Call[objc.Void](l_, objc.Sel("setUsesDefaultHyphenation:"), value)
}

// The current text containers of the layout manager. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403144-textcontainers?language=objc
func (l_ LayoutManager) TextContainers() []TextContainer {
	rv := objc.Call[[]TextContainer](l_, objc.Sel("textContainers"))
	return rv
}

// A Boolean value that indicates whether the layout manager allows noncontiguous layout. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403197-allowsnoncontiguouslayout?language=objc
func (l_ LayoutManager) AllowsNonContiguousLayout() bool {
	rv := objc.Call[bool](l_, objc.Sel("allowsNonContiguousLayout"))
	return rv
}

// A Boolean value that indicates whether the layout manager allows noncontiguous layout. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403197-allowsnoncontiguouslayout?language=objc
func (l_ LayoutManager) SetAllowsNonContiguousLayout(value bool) {
	objc.Call[objc.Void](l_, objc.Sel("setAllowsNonContiguousLayout:"), value)
}

// A Boolean value that indicates whether the layout manager uses the leading of the font. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403156-usesfontleading?language=objc
func (l_ LayoutManager) UsesFontLeading() bool {
	rv := objc.Call[bool](l_, objc.Sel("usesFontLeading"))
	return rv
}

// A Boolean value that indicates whether the layout manager uses the leading of the font. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403156-usesfontleading?language=objc
func (l_ LayoutManager) SetUsesFontLeading(value bool) {
	objc.Call[objc.Void](l_, objc.Sel("setUsesFontLeading:"), value)
}

// The layout manager’s delegate. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402920-delegate?language=objc
func (l_ LayoutManager) Delegate() LayoutManagerDelegateObject {
	rv := objc.Call[LayoutManagerDelegateObject](l_, objc.Sel("delegate"))
	return rv
}

// The layout manager’s delegate. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402920-delegate?language=objc
func (l_ LayoutManager) SetDelegate(value PLayoutManagerDelegate) {
	po0 := objc.WrapAsProtocol("NSLayoutManagerDelegate", value)
	objc.SetAssociatedObject(l_, objc.AssociationKey("setDelegate"), po0, objc.ASSOCIATION_RETAIN)
	objc.Call[objc.Void](l_, objc.Sel("setDelegate:"), po0)
}

// The layout manager’s delegate. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402920-delegate?language=objc
func (l_ LayoutManager) SetDelegateObject(valueObject objc.IObject) {
	objc.Call[objc.Void](l_, objc.Sel("setDelegate:"), valueObject)
}

// The text container for the extra line fragment rectangle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403165-extralinefragmenttextcontainer?language=objc
func (l_ LayoutManager) ExtraLineFragmentTextContainer() TextContainer {
	rv := objc.Call[TextContainer](l_, objc.Sel("extraLineFragmentTextContainer"))
	return rv
}

// The text storage object that contains the content to lay out. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403015-textstorage?language=objc
func (l_ LayoutManager) TextStorage() TextStorage {
	rv := objc.Call[TextStorage](l_, objc.Sel("textStorage"))
	return rv
}

// The text storage object that contains the content to lay out. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403015-textstorage?language=objc
func (l_ LayoutManager) SetTextStorage(value ITextStorage) {
	objc.Call[objc.Void](l_, objc.Sel("setTextStorage:"), value)
}

// A Boolean value that indicates whether the layout manager avoids laying out unusually long or suspicious input. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/3021179-limitslayoutforsuspiciouscontent?language=objc
func (l_ LayoutManager) LimitsLayoutForSuspiciousContents() bool {
	rv := objc.Call[bool](l_, objc.Sel("limitsLayoutForSuspiciousContents"))
	return rv
}

// A Boolean value that indicates whether the layout manager avoids laying out unusually long or suspicious input. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/3021179-limitslayoutforsuspiciouscontent?language=objc
func (l_ LayoutManager) SetLimitsLayoutForSuspiciousContents(value bool) {
	objc.Call[objc.Void](l_, objc.Sel("setLimitsLayoutForSuspiciousContents:"), value)
}

// A Boolean value that indicates whether to substitute visible glyphs for whitespace and other typically invisible characters. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403254-showsinvisiblecharacters?language=objc
func (l_ LayoutManager) ShowsInvisibleCharacters() bool {
	rv := objc.Call[bool](l_, objc.Sel("showsInvisibleCharacters"))
	return rv
}

// A Boolean value that indicates whether to substitute visible glyphs for whitespace and other typically invisible characters. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403254-showsinvisiblecharacters?language=objc
func (l_ LayoutManager) SetShowsInvisibleCharacters(value bool) {
	objc.Call[objc.Void](l_, objc.Sel("setShowsInvisibleCharacters:"), value)
}

// The rectangle that encloses the insertion point in the extra line fragment rectangle. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402988-extralinefragmentusedrect?language=objc
func (l_ LayoutManager) ExtraLineFragmentUsedRect() foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("extraLineFragmentUsedRect"))
	return rv
}

// The rectangle for the extra line fragment at the end of a document. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403175-extralinefragmentrect?language=objc
func (l_ LayoutManager) ExtraLineFragmentRect() foundation.Rect {
	rv := objc.Call[foundation.Rect](l_, objc.Sel("extraLineFragmentRect"))
	return rv
}

// A Boolean value that indicates whether the layout manager substitutes visible glyphs for control characters in the layout. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402912-showscontrolcharacters?language=objc
func (l_ LayoutManager) ShowsControlCharacters() bool {
	rv := objc.Call[bool](l_, objc.Sel("showsControlCharacters"))
	return rv
}

// A Boolean value that indicates whether the layout manager substitutes visible glyphs for control characters in the layout. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1402912-showscontrolcharacters?language=objc
func (l_ LayoutManager) SetShowsControlCharacters(value bool) {
	objc.Call[objc.Void](l_, objc.Sel("setShowsControlCharacters:"), value)
}

// A Boolean value that indicates whether the layout manager currently has any areas of noncontiguous layout. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403207-hasnoncontiguouslayout?language=objc
func (l_ LayoutManager) HasNonContiguousLayout() bool {
	rv := objc.Call[bool](l_, objc.Sel("hasNonContiguousLayout"))
	return rv
}
