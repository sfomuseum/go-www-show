// Code generated by DarwinKit. DO NOT EDIT.

package webkit

import (
	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// Methods for accepting or rejecting navigation changes, and for tracking the progress of navigation requests. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate?language=objc
type PNavigationDelegate interface {
	// optional
	WebViewAuthenticationChallengeShouldAllowDeprecatedTLS(webView WebView, challenge foundation.URLAuthenticationChallenge, decisionHandler func(arg0 bool))
	HasWebViewAuthenticationChallengeShouldAllowDeprecatedTLS() bool

	// optional
	WebViewDidFailNavigationWithError(webView WebView, navigation Navigation, error foundation.Error)
	HasWebViewDidFailNavigationWithError() bool

	// optional
	WebViewDidFailProvisionalNavigationWithError(webView WebView, navigation Navigation, error foundation.Error)
	HasWebViewDidFailProvisionalNavigationWithError() bool

	// optional
	WebViewDecidePolicyForNavigationActionPreferencesDecisionHandler(webView WebView, navigationAction NavigationAction, preferences WebpagePreferences, decisionHandler func(arg0 NavigationActionPolicy, arg1 WebpagePreferences))
	HasWebViewDecidePolicyForNavigationActionPreferencesDecisionHandler() bool

	// optional
	WebViewNavigationResponseDidBecomeDownload(webView WebView, navigationResponse NavigationResponse, download Download)
	HasWebViewNavigationResponseDidBecomeDownload() bool

	// optional
	WebViewDecidePolicyForNavigationActionDecisionHandler(webView WebView, navigationAction NavigationAction, decisionHandler func(arg0 NavigationActionPolicy))
	HasWebViewDecidePolicyForNavigationActionDecisionHandler() bool

	// optional
	WebViewDidFinishNavigation(webView WebView, navigation Navigation)
	HasWebViewDidFinishNavigation() bool

	// optional
	WebViewWebContentProcessDidTerminate(webView WebView)
	HasWebViewWebContentProcessDidTerminate() bool

	// optional
	WebViewDidReceiveAuthenticationChallengeCompletionHandler(webView WebView, challenge foundation.URLAuthenticationChallenge, completionHandler func(disposition foundation.URLSessionAuthChallengeDisposition, credential foundation.URLCredential))
	HasWebViewDidReceiveAuthenticationChallengeCompletionHandler() bool

	// optional
	WebViewNavigationActionDidBecomeDownload(webView WebView, navigationAction NavigationAction, download Download)
	HasWebViewNavigationActionDidBecomeDownload() bool

	// optional
	WebViewDidReceiveServerRedirectForProvisionalNavigation(webView WebView, navigation Navigation)
	HasWebViewDidReceiveServerRedirectForProvisionalNavigation() bool

	// optional
	WebViewDidCommitNavigation(webView WebView, navigation Navigation)
	HasWebViewDidCommitNavigation() bool

	// optional
	WebViewDecidePolicyForNavigationResponseDecisionHandler(webView WebView, navigationResponse NavigationResponse, decisionHandler func(arg0 NavigationResponsePolicy))
	HasWebViewDecidePolicyForNavigationResponseDecisionHandler() bool

	// optional
	WebViewDidStartProvisionalNavigation(webView WebView, navigation Navigation)
	HasWebViewDidStartProvisionalNavigation() bool
}

// A delegate implementation builder for the [PNavigationDelegate] protocol.
type NavigationDelegate struct {
	_WebViewAuthenticationChallengeShouldAllowDeprecatedTLS           func(webView WebView, challenge foundation.URLAuthenticationChallenge, decisionHandler func(arg0 bool))
	_WebViewDidFailNavigationWithError                                func(webView WebView, navigation Navigation, error foundation.Error)
	_WebViewDidFailProvisionalNavigationWithError                     func(webView WebView, navigation Navigation, error foundation.Error)
	_WebViewDecidePolicyForNavigationActionPreferencesDecisionHandler func(webView WebView, navigationAction NavigationAction, preferences WebpagePreferences, decisionHandler func(arg0 NavigationActionPolicy, arg1 WebpagePreferences))
	_WebViewNavigationResponseDidBecomeDownload                       func(webView WebView, navigationResponse NavigationResponse, download Download)
	_WebViewDecidePolicyForNavigationActionDecisionHandler            func(webView WebView, navigationAction NavigationAction, decisionHandler func(arg0 NavigationActionPolicy))
	_WebViewDidFinishNavigation                                       func(webView WebView, navigation Navigation)
	_WebViewWebContentProcessDidTerminate                             func(webView WebView)
	_WebViewDidReceiveAuthenticationChallengeCompletionHandler        func(webView WebView, challenge foundation.URLAuthenticationChallenge, completionHandler func(disposition foundation.URLSessionAuthChallengeDisposition, credential foundation.URLCredential))
	_WebViewNavigationActionDidBecomeDownload                         func(webView WebView, navigationAction NavigationAction, download Download)
	_WebViewDidReceiveServerRedirectForProvisionalNavigation          func(webView WebView, navigation Navigation)
	_WebViewDidCommitNavigation                                       func(webView WebView, navigation Navigation)
	_WebViewDecidePolicyForNavigationResponseDecisionHandler          func(webView WebView, navigationResponse NavigationResponse, decisionHandler func(arg0 NavigationResponsePolicy))
	_WebViewDidStartProvisionalNavigation                             func(webView WebView, navigation Navigation)
}

func (di *NavigationDelegate) HasWebViewAuthenticationChallengeShouldAllowDeprecatedTLS() bool {
	return di._WebViewAuthenticationChallengeShouldAllowDeprecatedTLS != nil
}

// Asks the delegate whether to continue with a connection that uses a deprecated version of TLS. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3601237-webview?language=objc
func (di *NavigationDelegate) SetWebViewAuthenticationChallengeShouldAllowDeprecatedTLS(f func(webView WebView, challenge foundation.URLAuthenticationChallenge, decisionHandler func(arg0 bool))) {
	di._WebViewAuthenticationChallengeShouldAllowDeprecatedTLS = f
}

// Asks the delegate whether to continue with a connection that uses a deprecated version of TLS. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3601237-webview?language=objc
func (di *NavigationDelegate) WebViewAuthenticationChallengeShouldAllowDeprecatedTLS(webView WebView, challenge foundation.URLAuthenticationChallenge, decisionHandler func(arg0 bool)) {
	di._WebViewAuthenticationChallengeShouldAllowDeprecatedTLS(webView, challenge, decisionHandler)
}
func (di *NavigationDelegate) HasWebViewDidFailNavigationWithError() bool {
	return di._WebViewDidFailNavigationWithError != nil
}

// Tells the delegate that an error occurred during navigation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455623-webview?language=objc
func (di *NavigationDelegate) SetWebViewDidFailNavigationWithError(f func(webView WebView, navigation Navigation, error foundation.Error)) {
	di._WebViewDidFailNavigationWithError = f
}

// Tells the delegate that an error occurred during navigation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455623-webview?language=objc
func (di *NavigationDelegate) WebViewDidFailNavigationWithError(webView WebView, navigation Navigation, error foundation.Error) {
	di._WebViewDidFailNavigationWithError(webView, navigation, error)
}
func (di *NavigationDelegate) HasWebViewDidFailProvisionalNavigationWithError() bool {
	return di._WebViewDidFailProvisionalNavigationWithError != nil
}

// Tells the delegate that an error occurred during the early navigation process. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455637-webview?language=objc
func (di *NavigationDelegate) SetWebViewDidFailProvisionalNavigationWithError(f func(webView WebView, navigation Navigation, error foundation.Error)) {
	di._WebViewDidFailProvisionalNavigationWithError = f
}

// Tells the delegate that an error occurred during the early navigation process. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455637-webview?language=objc
func (di *NavigationDelegate) WebViewDidFailProvisionalNavigationWithError(webView WebView, navigation Navigation, error foundation.Error) {
	di._WebViewDidFailProvisionalNavigationWithError(webView, navigation, error)
}
func (di *NavigationDelegate) HasWebViewDecidePolicyForNavigationActionPreferencesDecisionHandler() bool {
	return di._WebViewDecidePolicyForNavigationActionPreferencesDecisionHandler != nil
}

// Asks the delegate for permission to navigate to new content based on the specified preferences and action information. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3223382-webview?language=objc
func (di *NavigationDelegate) SetWebViewDecidePolicyForNavigationActionPreferencesDecisionHandler(f func(webView WebView, navigationAction NavigationAction, preferences WebpagePreferences, decisionHandler func(arg0 NavigationActionPolicy, arg1 WebpagePreferences))) {
	di._WebViewDecidePolicyForNavigationActionPreferencesDecisionHandler = f
}

// Asks the delegate for permission to navigate to new content based on the specified preferences and action information. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3223382-webview?language=objc
func (di *NavigationDelegate) WebViewDecidePolicyForNavigationActionPreferencesDecisionHandler(webView WebView, navigationAction NavigationAction, preferences WebpagePreferences, decisionHandler func(arg0 NavigationActionPolicy, arg1 WebpagePreferences)) {
	di._WebViewDecidePolicyForNavigationActionPreferencesDecisionHandler(webView, navigationAction, preferences, decisionHandler)
}
func (di *NavigationDelegate) HasWebViewNavigationResponseDidBecomeDownload() bool {
	return di._WebViewNavigationResponseDidBecomeDownload != nil
}

// Tells the delegate that a navigation response became a download. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3727360-webview?language=objc
func (di *NavigationDelegate) SetWebViewNavigationResponseDidBecomeDownload(f func(webView WebView, navigationResponse NavigationResponse, download Download)) {
	di._WebViewNavigationResponseDidBecomeDownload = f
}

// Tells the delegate that a navigation response became a download. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3727360-webview?language=objc
func (di *NavigationDelegate) WebViewNavigationResponseDidBecomeDownload(webView WebView, navigationResponse NavigationResponse, download Download) {
	di._WebViewNavigationResponseDidBecomeDownload(webView, navigationResponse, download)
}
func (di *NavigationDelegate) HasWebViewDecidePolicyForNavigationActionDecisionHandler() bool {
	return di._WebViewDecidePolicyForNavigationActionDecisionHandler != nil
}

// Asks the delegate for permission to navigate to new content based on the specified action information. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455641-webview?language=objc
func (di *NavigationDelegate) SetWebViewDecidePolicyForNavigationActionDecisionHandler(f func(webView WebView, navigationAction NavigationAction, decisionHandler func(arg0 NavigationActionPolicy))) {
	di._WebViewDecidePolicyForNavigationActionDecisionHandler = f
}

// Asks the delegate for permission to navigate to new content based on the specified action information. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455641-webview?language=objc
func (di *NavigationDelegate) WebViewDecidePolicyForNavigationActionDecisionHandler(webView WebView, navigationAction NavigationAction, decisionHandler func(arg0 NavigationActionPolicy)) {
	di._WebViewDecidePolicyForNavigationActionDecisionHandler(webView, navigationAction, decisionHandler)
}
func (di *NavigationDelegate) HasWebViewDidFinishNavigation() bool {
	return di._WebViewDidFinishNavigation != nil
}

// Tells the delegate that navigation is complete. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455629-webview?language=objc
func (di *NavigationDelegate) SetWebViewDidFinishNavigation(f func(webView WebView, navigation Navigation)) {
	di._WebViewDidFinishNavigation = f
}

// Tells the delegate that navigation is complete. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455629-webview?language=objc
func (di *NavigationDelegate) WebViewDidFinishNavigation(webView WebView, navigation Navigation) {
	di._WebViewDidFinishNavigation(webView, navigation)
}
func (di *NavigationDelegate) HasWebViewWebContentProcessDidTerminate() bool {
	return di._WebViewWebContentProcessDidTerminate != nil
}

// Tells the delegate that the web view’s content process was terminated. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455639-webviewwebcontentprocessdidtermi?language=objc
func (di *NavigationDelegate) SetWebViewWebContentProcessDidTerminate(f func(webView WebView)) {
	di._WebViewWebContentProcessDidTerminate = f
}

// Tells the delegate that the web view’s content process was terminated. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455639-webviewwebcontentprocessdidtermi?language=objc
func (di *NavigationDelegate) WebViewWebContentProcessDidTerminate(webView WebView) {
	di._WebViewWebContentProcessDidTerminate(webView)
}
func (di *NavigationDelegate) HasWebViewDidReceiveAuthenticationChallengeCompletionHandler() bool {
	return di._WebViewDidReceiveAuthenticationChallengeCompletionHandler != nil
}

// Asks the delegate to respond to an authentication challenge. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455638-webview?language=objc
func (di *NavigationDelegate) SetWebViewDidReceiveAuthenticationChallengeCompletionHandler(f func(webView WebView, challenge foundation.URLAuthenticationChallenge, completionHandler func(disposition foundation.URLSessionAuthChallengeDisposition, credential foundation.URLCredential))) {
	di._WebViewDidReceiveAuthenticationChallengeCompletionHandler = f
}

// Asks the delegate to respond to an authentication challenge. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455638-webview?language=objc
func (di *NavigationDelegate) WebViewDidReceiveAuthenticationChallengeCompletionHandler(webView WebView, challenge foundation.URLAuthenticationChallenge, completionHandler func(disposition foundation.URLSessionAuthChallengeDisposition, credential foundation.URLCredential)) {
	di._WebViewDidReceiveAuthenticationChallengeCompletionHandler(webView, challenge, completionHandler)
}
func (di *NavigationDelegate) HasWebViewNavigationActionDidBecomeDownload() bool {
	return di._WebViewNavigationActionDidBecomeDownload != nil
}

// Tells the delegate that a navigation action became a download. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3727359-webview?language=objc
func (di *NavigationDelegate) SetWebViewNavigationActionDidBecomeDownload(f func(webView WebView, navigationAction NavigationAction, download Download)) {
	di._WebViewNavigationActionDidBecomeDownload = f
}

// Tells the delegate that a navigation action became a download. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3727359-webview?language=objc
func (di *NavigationDelegate) WebViewNavigationActionDidBecomeDownload(webView WebView, navigationAction NavigationAction, download Download) {
	di._WebViewNavigationActionDidBecomeDownload(webView, navigationAction, download)
}
func (di *NavigationDelegate) HasWebViewDidReceiveServerRedirectForProvisionalNavigation() bool {
	return di._WebViewDidReceiveServerRedirectForProvisionalNavigation != nil
}

// Tells the delegate that the web view received a server redirect for a request. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455627-webview?language=objc
func (di *NavigationDelegate) SetWebViewDidReceiveServerRedirectForProvisionalNavigation(f func(webView WebView, navigation Navigation)) {
	di._WebViewDidReceiveServerRedirectForProvisionalNavigation = f
}

// Tells the delegate that the web view received a server redirect for a request. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455627-webview?language=objc
func (di *NavigationDelegate) WebViewDidReceiveServerRedirectForProvisionalNavigation(webView WebView, navigation Navigation) {
	di._WebViewDidReceiveServerRedirectForProvisionalNavigation(webView, navigation)
}
func (di *NavigationDelegate) HasWebViewDidCommitNavigation() bool {
	return di._WebViewDidCommitNavigation != nil
}

// Tells the delegate that the web view has started to receive content for the main frame. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455635-webview?language=objc
func (di *NavigationDelegate) SetWebViewDidCommitNavigation(f func(webView WebView, navigation Navigation)) {
	di._WebViewDidCommitNavigation = f
}

// Tells the delegate that the web view has started to receive content for the main frame. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455635-webview?language=objc
func (di *NavigationDelegate) WebViewDidCommitNavigation(webView WebView, navigation Navigation) {
	di._WebViewDidCommitNavigation(webView, navigation)
}
func (di *NavigationDelegate) HasWebViewDecidePolicyForNavigationResponseDecisionHandler() bool {
	return di._WebViewDecidePolicyForNavigationResponseDecisionHandler != nil
}

// Asks the delegate for permission to navigate to new content after the response to the navigation request is known. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455643-webview?language=objc
func (di *NavigationDelegate) SetWebViewDecidePolicyForNavigationResponseDecisionHandler(f func(webView WebView, navigationResponse NavigationResponse, decisionHandler func(arg0 NavigationResponsePolicy))) {
	di._WebViewDecidePolicyForNavigationResponseDecisionHandler = f
}

// Asks the delegate for permission to navigate to new content after the response to the navigation request is known. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455643-webview?language=objc
func (di *NavigationDelegate) WebViewDecidePolicyForNavigationResponseDecisionHandler(webView WebView, navigationResponse NavigationResponse, decisionHandler func(arg0 NavigationResponsePolicy)) {
	di._WebViewDecidePolicyForNavigationResponseDecisionHandler(webView, navigationResponse, decisionHandler)
}
func (di *NavigationDelegate) HasWebViewDidStartProvisionalNavigation() bool {
	return di._WebViewDidStartProvisionalNavigation != nil
}

// Tells the delegate that navigation from the main frame has started. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455621-webview?language=objc
func (di *NavigationDelegate) SetWebViewDidStartProvisionalNavigation(f func(webView WebView, navigation Navigation)) {
	di._WebViewDidStartProvisionalNavigation = f
}

// Tells the delegate that navigation from the main frame has started. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455621-webview?language=objc
func (di *NavigationDelegate) WebViewDidStartProvisionalNavigation(webView WebView, navigation Navigation) {
	di._WebViewDidStartProvisionalNavigation(webView, navigation)
}

// ensure impl type implements protocol interface
var _ PNavigationDelegate = (*NavigationDelegateObject)(nil)

// A concrete type for the [PNavigationDelegate] protocol.
type NavigationDelegateObject struct {
	objc.Object
}

func (n_ NavigationDelegateObject) HasWebViewAuthenticationChallengeShouldAllowDeprecatedTLS() bool {
	return n_.RespondsToSelector(objc.Sel("webView:authenticationChallenge:shouldAllowDeprecatedTLS:"))
}

// Asks the delegate whether to continue with a connection that uses a deprecated version of TLS. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3601237-webview?language=objc
func (n_ NavigationDelegateObject) WebViewAuthenticationChallengeShouldAllowDeprecatedTLS(webView WebView, challenge foundation.URLAuthenticationChallenge, decisionHandler func(arg0 bool)) {
	objc.Call[objc.Void](n_, objc.Sel("webView:authenticationChallenge:shouldAllowDeprecatedTLS:"), webView, challenge, decisionHandler)
}

func (n_ NavigationDelegateObject) HasWebViewDidFailNavigationWithError() bool {
	return n_.RespondsToSelector(objc.Sel("webView:didFailNavigation:withError:"))
}

// Tells the delegate that an error occurred during navigation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455623-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDidFailNavigationWithError(webView WebView, navigation Navigation, error foundation.Error) {
	objc.Call[objc.Void](n_, objc.Sel("webView:didFailNavigation:withError:"), webView, navigation, error)
}

func (n_ NavigationDelegateObject) HasWebViewDidFailProvisionalNavigationWithError() bool {
	return n_.RespondsToSelector(objc.Sel("webView:didFailProvisionalNavigation:withError:"))
}

// Tells the delegate that an error occurred during the early navigation process. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455637-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDidFailProvisionalNavigationWithError(webView WebView, navigation Navigation, error foundation.Error) {
	objc.Call[objc.Void](n_, objc.Sel("webView:didFailProvisionalNavigation:withError:"), webView, navigation, error)
}

func (n_ NavigationDelegateObject) HasWebViewDecidePolicyForNavigationActionPreferencesDecisionHandler() bool {
	return n_.RespondsToSelector(objc.Sel("webView:decidePolicyForNavigationAction:preferences:decisionHandler:"))
}

// Asks the delegate for permission to navigate to new content based on the specified preferences and action information. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3223382-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDecidePolicyForNavigationActionPreferencesDecisionHandler(webView WebView, navigationAction NavigationAction, preferences WebpagePreferences, decisionHandler func(arg0 NavigationActionPolicy, arg1 WebpagePreferences)) {
	objc.Call[objc.Void](n_, objc.Sel("webView:decidePolicyForNavigationAction:preferences:decisionHandler:"), webView, navigationAction, preferences, decisionHandler)
}

func (n_ NavigationDelegateObject) HasWebViewNavigationResponseDidBecomeDownload() bool {
	return n_.RespondsToSelector(objc.Sel("webView:navigationResponse:didBecomeDownload:"))
}

// Tells the delegate that a navigation response became a download. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3727360-webview?language=objc
func (n_ NavigationDelegateObject) WebViewNavigationResponseDidBecomeDownload(webView WebView, navigationResponse NavigationResponse, download Download) {
	objc.Call[objc.Void](n_, objc.Sel("webView:navigationResponse:didBecomeDownload:"), webView, navigationResponse, download)
}

func (n_ NavigationDelegateObject) HasWebViewDecidePolicyForNavigationActionDecisionHandler() bool {
	return n_.RespondsToSelector(objc.Sel("webView:decidePolicyForNavigationAction:decisionHandler:"))
}

// Asks the delegate for permission to navigate to new content based on the specified action information. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455641-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDecidePolicyForNavigationActionDecisionHandler(webView WebView, navigationAction NavigationAction, decisionHandler func(arg0 NavigationActionPolicy)) {
	objc.Call[objc.Void](n_, objc.Sel("webView:decidePolicyForNavigationAction:decisionHandler:"), webView, navigationAction, decisionHandler)
}

func (n_ NavigationDelegateObject) HasWebViewDidFinishNavigation() bool {
	return n_.RespondsToSelector(objc.Sel("webView:didFinishNavigation:"))
}

// Tells the delegate that navigation is complete. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455629-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDidFinishNavigation(webView WebView, navigation Navigation) {
	objc.Call[objc.Void](n_, objc.Sel("webView:didFinishNavigation:"), webView, navigation)
}

func (n_ NavigationDelegateObject) HasWebViewWebContentProcessDidTerminate() bool {
	return n_.RespondsToSelector(objc.Sel("webViewWebContentProcessDidTerminate:"))
}

// Tells the delegate that the web view’s content process was terminated. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455639-webviewwebcontentprocessdidtermi?language=objc
func (n_ NavigationDelegateObject) WebViewWebContentProcessDidTerminate(webView WebView) {
	objc.Call[objc.Void](n_, objc.Sel("webViewWebContentProcessDidTerminate:"), webView)
}

func (n_ NavigationDelegateObject) HasWebViewDidReceiveAuthenticationChallengeCompletionHandler() bool {
	return n_.RespondsToSelector(objc.Sel("webView:didReceiveAuthenticationChallenge:completionHandler:"))
}

// Asks the delegate to respond to an authentication challenge. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455638-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDidReceiveAuthenticationChallengeCompletionHandler(webView WebView, challenge foundation.URLAuthenticationChallenge, completionHandler func(disposition foundation.URLSessionAuthChallengeDisposition, credential foundation.URLCredential)) {
	objc.Call[objc.Void](n_, objc.Sel("webView:didReceiveAuthenticationChallenge:completionHandler:"), webView, challenge, completionHandler)
}

func (n_ NavigationDelegateObject) HasWebViewNavigationActionDidBecomeDownload() bool {
	return n_.RespondsToSelector(objc.Sel("webView:navigationAction:didBecomeDownload:"))
}

// Tells the delegate that a navigation action became a download. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/3727359-webview?language=objc
func (n_ NavigationDelegateObject) WebViewNavigationActionDidBecomeDownload(webView WebView, navigationAction NavigationAction, download Download) {
	objc.Call[objc.Void](n_, objc.Sel("webView:navigationAction:didBecomeDownload:"), webView, navigationAction, download)
}

func (n_ NavigationDelegateObject) HasWebViewDidReceiveServerRedirectForProvisionalNavigation() bool {
	return n_.RespondsToSelector(objc.Sel("webView:didReceiveServerRedirectForProvisionalNavigation:"))
}

// Tells the delegate that the web view received a server redirect for a request. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455627-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDidReceiveServerRedirectForProvisionalNavigation(webView WebView, navigation Navigation) {
	objc.Call[objc.Void](n_, objc.Sel("webView:didReceiveServerRedirectForProvisionalNavigation:"), webView, navigation)
}

func (n_ NavigationDelegateObject) HasWebViewDidCommitNavigation() bool {
	return n_.RespondsToSelector(objc.Sel("webView:didCommitNavigation:"))
}

// Tells the delegate that the web view has started to receive content for the main frame. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455635-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDidCommitNavigation(webView WebView, navigation Navigation) {
	objc.Call[objc.Void](n_, objc.Sel("webView:didCommitNavigation:"), webView, navigation)
}

func (n_ NavigationDelegateObject) HasWebViewDecidePolicyForNavigationResponseDecisionHandler() bool {
	return n_.RespondsToSelector(objc.Sel("webView:decidePolicyForNavigationResponse:decisionHandler:"))
}

// Asks the delegate for permission to navigate to new content after the response to the navigation request is known. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455643-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDecidePolicyForNavigationResponseDecisionHandler(webView WebView, navigationResponse NavigationResponse, decisionHandler func(arg0 NavigationResponsePolicy)) {
	objc.Call[objc.Void](n_, objc.Sel("webView:decidePolicyForNavigationResponse:decisionHandler:"), webView, navigationResponse, decisionHandler)
}

func (n_ NavigationDelegateObject) HasWebViewDidStartProvisionalNavigation() bool {
	return n_.RespondsToSelector(objc.Sel("webView:didStartProvisionalNavigation:"))
}

// Tells the delegate that navigation from the main frame has started. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/webkit/wknavigationdelegate/1455621-webview?language=objc
func (n_ NavigationDelegateObject) WebViewDidStartProvisionalNavigation(webView WebView, navigation Navigation) {
	objc.Call[objc.Void](n_, objc.Sel("webView:didStartProvisionalNavigation:"), webView, navigation)
}
