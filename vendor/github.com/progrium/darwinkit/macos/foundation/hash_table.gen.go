// Code generated by DarwinKit. DO NOT EDIT.

package foundation

import (
	"unsafe"

	"github.com/progrium/darwinkit/objc"
)

// The class instance for the [HashTable] class.
var HashTableClass = _HashTableClass{objc.GetClass("NSHashTable")}

type _HashTableClass struct {
	objc.Class
}

// An interface definition for the [HashTable] class.
type IHashTable interface {
	objc.IObject
	IsEqualToHashTable(other IHashTable) bool
	RemoveAllObjects()
	IsSubsetOfHashTable(other IHashTable) bool
	IntersectHashTable(other IHashTable)
	UnionHashTable(other IHashTable)
	Member(object objc.IObject) objc.Object
	ObjectEnumerator() Enumerator
	IntersectsHashTable(other IHashTable) bool
	MinusHashTable(other IHashTable)
	RemoveObject(object objc.IObject)
	AddObject(object objc.IObject)
	ContainsObject(anObject objc.IObject) bool
	Count() uint
	AllObjects() []objc.Object
	PointerFunctions() PointerFunctions
	AnyObject() objc.Object
	SetRepresentation() Set
}

// A collection similar to a set, but with broader range of available memory semantics. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable?language=objc
type HashTable struct {
	objc.Object
}

func HashTableFrom(ptr unsafe.Pointer) HashTable {
	return HashTable{
		Object: objc.ObjectFrom(ptr),
	}
}

func (h_ HashTable) InitWithOptionsCapacity(options PointerFunctionsOptions, initialCapacity uint) HashTable {
	rv := objc.Call[HashTable](h_, objc.Sel("initWithOptions:capacity:"), options, initialCapacity)
	return rv
}

// Returns a hash table initialized with the given attributes. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1411066-initwithoptions?language=objc
func NewHashTableWithOptionsCapacity(options PointerFunctionsOptions, initialCapacity uint) HashTable {
	instance := HashTableClass.Alloc().InitWithOptionsCapacity(options, initialCapacity)
	instance.Autorelease()
	return instance
}

func (h_ HashTable) InitWithPointerFunctionsCapacity(functions IPointerFunctions, initialCapacity uint) HashTable {
	rv := objc.Call[HashTable](h_, objc.Sel("initWithPointerFunctions:capacity:"), functions, initialCapacity)
	return rv
}

// Returns a hash table initialized with the given functions and capacity. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1416331-initwithpointerfunctions?language=objc
func NewHashTableWithPointerFunctionsCapacity(functions IPointerFunctions, initialCapacity uint) HashTable {
	instance := HashTableClass.Alloc().InitWithPointerFunctionsCapacity(functions, initialCapacity)
	instance.Autorelease()
	return instance
}

func (hc _HashTableClass) Alloc() HashTable {
	rv := objc.Call[HashTable](hc, objc.Sel("alloc"))
	return rv
}

func (hc _HashTableClass) New() HashTable {
	rv := objc.Call[HashTable](hc, objc.Sel("new"))
	rv.Autorelease()
	return rv
}

func NewHashTable() HashTable {
	return HashTableClass.New()
}

func (h_ HashTable) Init() HashTable {
	rv := objc.Call[HashTable](h_, objc.Sel("init"))
	return rv
}

// Returns a Boolean value that indicates whether a given hash table is equal to the receiving hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1410816-isequaltohashtable?language=objc
func (h_ HashTable) IsEqualToHashTable(other IHashTable) bool {
	rv := objc.Call[bool](h_, objc.Sel("isEqualToHashTable:"), other)
	return rv
}

// Removes all objects from the hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1415814-removeallobjects?language=objc
func (h_ HashTable) RemoveAllObjects() {
	objc.Call[objc.Void](h_, objc.Sel("removeAllObjects"))
}

// Returns a Boolean value that indicates whether every element in the receiving hash table is also present in another given hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1417518-issubsetofhashtable?language=objc
func (h_ HashTable) IsSubsetOfHashTable(other IHashTable) bool {
	rv := objc.Call[bool](h_, objc.Sel("isSubsetOfHashTable:"), other)
	return rv
}

// Removes from the receiving hash table each element that isn’t a member of another given hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1408509-intersecthashtable?language=objc
func (h_ HashTable) IntersectHashTable(other IHashTable) {
	objc.Call[objc.Void](h_, objc.Sel("intersectHashTable:"), other)
}

// Adds each element in another given hash table to the receiving hash table, if not present. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1413481-unionhashtable?language=objc
func (h_ HashTable) UnionHashTable(other IHashTable) {
	objc.Call[objc.Void](h_, objc.Sel("unionHashTable:"), other)
}

// Determines whether the hash table contains a given object, and returns that object if it is present [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1417991-member?language=objc
func (h_ HashTable) Member(object objc.IObject) objc.Object {
	rv := objc.Call[objc.Object](h_, objc.Sel("member:"), object)
	return rv
}

// Returns an enumerator object that lets you access each object in the hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1416308-objectenumerator?language=objc
func (h_ HashTable) ObjectEnumerator() Enumerator {
	rv := objc.Call[Enumerator](h_, objc.Sel("objectEnumerator"))
	return rv
}

// Returns a Boolean value that indicates whether a given hash table intersects with the receiving hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1416474-intersectshashtable?language=objc
func (h_ HashTable) IntersectsHashTable(other IHashTable) bool {
	rv := objc.Call[bool](h_, objc.Sel("intersectsHashTable:"), other)
	return rv
}

// Removes each element in another given hash table from the receiving hash table, if present. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1414557-minushashtable?language=objc
func (h_ HashTable) MinusHashTable(other IHashTable) {
	objc.Call[objc.Void](h_, objc.Sel("minusHashTable:"), other)
}

// Removes a given object from the hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1415369-removeobject?language=objc
func (h_ HashTable) RemoveObject(object objc.IObject) {
	objc.Call[objc.Void](h_, objc.Sel("removeObject:"), object)
}

// Returns a new hash table for storing weak references to its contents. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1412241-weakobjectshashtable?language=objc
func (hc _HashTableClass) WeakObjectsHashTable() HashTable {
	rv := objc.Call[HashTable](hc, objc.Sel("weakObjectsHashTable"))
	return rv
}

// Returns a new hash table for storing weak references to its contents. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1412241-weakobjectshashtable?language=objc
func HashTable_WeakObjectsHashTable() HashTable {
	return HashTableClass.WeakObjectsHashTable()
}

// Adds a given object to the hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1411690-addobject?language=objc
func (h_ HashTable) AddObject(object objc.IObject) {
	objc.Call[objc.Void](h_, objc.Sel("addObject:"), object)
}

// Returns a Boolean value that indicates whether the hash table contains a given object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1415113-containsobject?language=objc
func (h_ HashTable) ContainsObject(anObject objc.IObject) bool {
	rv := objc.Call[bool](h_, objc.Sel("containsObject:"), anObject)
	return rv
}

// Returns a hash table with given pointer functions options. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1415284-hashtablewithoptions?language=objc
func (hc _HashTableClass) HashTableWithOptions(options PointerFunctionsOptions) HashTable {
	rv := objc.Call[HashTable](hc, objc.Sel("hashTableWithOptions:"), options)
	return rv
}

// Returns a hash table with given pointer functions options. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1415284-hashtablewithoptions?language=objc
func HashTable_HashTableWithOptions(options PointerFunctionsOptions) HashTable {
	return HashTableClass.HashTableWithOptions(options)
}

// The number of elements in the hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1413142-count?language=objc
func (h_ HashTable) Count() uint {
	rv := objc.Call[uint](h_, objc.Sel("count"))
	return rv
}

// The hash table’s members. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1410223-allobjects?language=objc
func (h_ HashTable) AllObjects() []objc.Object {
	rv := objc.Call[[]objc.Object](h_, objc.Sel("allObjects"))
	return rv
}

// The pointer functions for the hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1417398-pointerfunctions?language=objc
func (h_ HashTable) PointerFunctions() PointerFunctions {
	rv := objc.Call[PointerFunctions](h_, objc.Sel("pointerFunctions"))
	return rv
}

// One of the objects in the hash table. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1410639-anyobject?language=objc
func (h_ HashTable) AnyObject() objc.Object {
	rv := objc.Call[objc.Object](h_, objc.Sel("anyObject"))
	return rv
}

// A set that contains the hash table’s members. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nshashtable/1414641-setrepresentation?language=objc
func (h_ HashTable) SetRepresentation() Set {
	rv := objc.Call[Set](h_, objc.Sel("setRepresentation"))
	return rv
}
