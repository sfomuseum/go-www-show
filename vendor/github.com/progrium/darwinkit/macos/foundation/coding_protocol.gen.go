// Code generated by DarwinKit. DO NOT EDIT.

package foundation

import (
	"github.com/progrium/darwinkit/objc"
)

// A protocol that enables an object to be encoded and decoded for archiving and distribution. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nscoding?language=objc
type PCoding interface {
	// optional
	EncodeWithCoder(coder Coder)
	HasEncodeWithCoder() bool

	// optional
	InitWithCoder(coder Coder) objc.Object
	HasInitWithCoder() bool
}

// ensure impl type implements protocol interface
var _ PCoding = (*CodingObject)(nil)

// A concrete type for the [PCoding] protocol.
type CodingObject struct {
	objc.Object
}

func (c_ CodingObject) HasEncodeWithCoder() bool {
	return c_.RespondsToSelector(objc.Sel("encodeWithCoder:"))
}

// Encodes the receiver using a given archiver. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nscoding/1413933-encodewithcoder?language=objc
func (c_ CodingObject) EncodeWithCoder(coder Coder) {
	objc.Call[objc.Void](c_, objc.Sel("encodeWithCoder:"), coder)
}

func (c_ CodingObject) HasInitWithCoder() bool {
	return c_.RespondsToSelector(objc.Sel("initWithCoder:"))
}

// Returns an object initialized from data in a given unarchiver. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nscoding/1416145-initwithcoder?language=objc
func (c_ CodingObject) InitWithCoder(coder Coder) objc.Object {
	rv := objc.Call[objc.Object](c_, objc.Sel("initWithCoder:"), coder)
	return rv
}
