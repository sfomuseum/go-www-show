// Code generated by DarwinKit. DO NOT EDIT.

package foundation

import (
	"unsafe"

	"github.com/progrium/darwinkit/objc"
)

// The class instance for the [OrderedSet] class.
var OrderedSetClass = _OrderedSetClass{objc.GetClass("NSOrderedSet")}

type _OrderedSetClass struct {
	objc.Class
}

// An interface definition for the [OrderedSet] class.
type IOrderedSet interface {
	objc.IObject
	ObjectAtIndexedSubscript(idx uint) objc.Object
	FilteredOrderedSetUsingPredicate(p IPredicate) OrderedSet
	IsEqualToOrderedSet(other IOrderedSet) bool
	DescriptionWithLocale(locale objc.IObject) string
	OrderedSetByApplyingDifference(difference IOrderedCollectionDifference) OrderedSet
	SetValueForKey(value objc.IObject, key string)
	IsSubsetOfOrderedSet(other IOrderedSet) bool
	ObjectAtIndex(idx uint) objc.Object
	EnumerateObjectsAtIndexesOptionsUsingBlock(s IIndexSet, opts EnumerationOptions, block func(obj objc.Object, idx uint, stop *bool))
	DescriptionWithLocaleIndent(locale objc.IObject, level uint) string
	GetObjectsRange(objects unsafe.Pointer, range_ Range)
	IndexOfObjectPassingTest(predicate func(obj objc.Object, idx uint, stop *bool) bool) uint
	ContainsObject(object objc.IObject) bool
	IndexesOfObjectsAtIndexesOptionsPassingTest(s IIndexSet, opts EnumerationOptions, predicate func(obj objc.Object, idx uint, stop *bool) bool) IndexSet
	IsSubsetOfSet(set ISet) bool
	ObjectEnumerator() Enumerator
	IntersectsOrderedSet(other IOrderedSet) bool
	EnumerateObjectsUsingBlock(block func(obj objc.Object, idx uint, stop *bool))
	IntersectsSet(set ISet) bool
	DifferenceFromOrderedSet(other IOrderedSet) OrderedCollectionDifference
	IndexOfObjectInSortedRangeOptionsUsingComparator(object objc.IObject, range_ Range, opts BinarySearchingOptions, cmp Comparator) uint
	IndexOfObjectAtIndexesOptionsPassingTest(s IIndexSet, opts EnumerationOptions, predicate func(obj objc.Object, idx uint, stop *bool) bool) uint
	DifferenceFromOrderedSetWithOptions(other IOrderedSet, options OrderedCollectionDifferenceCalculationOptions) OrderedCollectionDifference
	SortedArrayWithOptionsUsingComparator(opts SortOptions, cmptr Comparator) []objc.Object
	RemoveObserverForKeyPathContext(observer objc.IObject, keyPath string, context unsafe.Pointer)
	ReverseObjectEnumerator() Enumerator
	IndexOfObject(object objc.IObject) uint
	SortedArrayUsingDescriptors(sortDescriptors []ISortDescriptor) []objc.Object
	SortedArrayUsingComparator(cmptr Comparator) []objc.Object
	ObjectsAtIndexes(indexes IIndexSet) []objc.Object
	DifferenceFromOrderedSetWithOptionsUsingEquivalenceTest(other IOrderedSet, options OrderedCollectionDifferenceCalculationOptions, block func(obj1 objc.Object, obj2 objc.Object) bool) OrderedCollectionDifference
	RemoveObserverForKeyPath(observer objc.IObject, keyPath string)
	EnumerateObjectsWithOptionsUsingBlock(opts EnumerationOptions, block func(obj objc.Object, idx uint, stop *bool))
	AddObserverForKeyPathOptionsContext(observer objc.IObject, keyPath string, options KeyValueObservingOptions, context unsafe.Pointer)
	IndexOfObjectWithOptionsPassingTest(opts EnumerationOptions, predicate func(obj objc.Object, idx uint, stop *bool) bool) uint
	ValueForKey(key string) objc.Object
	IndexesOfObjectsWithOptionsPassingTest(opts EnumerationOptions, predicate func(obj objc.Object, idx uint, stop *bool) bool) IndexSet
	IndexesOfObjectsPassingTest(predicate func(obj objc.Object, idx uint, stop *bool) bool) IndexSet
	Count() uint
	Array() []objc.Object
	Description() string
	LastObject() objc.Object
	Set() Set
	ReversedOrderedSet() OrderedSet
	FirstObject() objc.Object
}

// A static, ordered collection of unique objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset?language=objc
type OrderedSet struct {
	objc.Object
}

func OrderedSetFrom(ptr unsafe.Pointer) OrderedSet {
	return OrderedSet{
		Object: objc.ObjectFrom(ptr),
	}
}

func (oc _OrderedSetClass) OrderedSetWithObjectsCount(objects unsafe.Pointer, cnt uint) OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSetWithObjects:count:"), objects, cnt)
	return rv
}

// Creates and returns a set containing a specified number of objects from a given C array of objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543334-orderedsetwithobjects?language=objc
func OrderedSet_OrderedSetWithObjectsCount(objects unsafe.Pointer, cnt uint) OrderedSet {
	return OrderedSetClass.OrderedSetWithObjectsCount(objects, cnt)
}

func (o_ OrderedSet) InitWithSetCopyItems(set ISet, flag bool) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithSet:copyItems:"), set, flag)
	return rv
}

// Initializes a new ordered set with the contents of a set, optionally copying the objects in the set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1411246-initwithset?language=objc
func NewOrderedSetWithSetCopyItems(set ISet, flag bool) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithSetCopyItems(set, flag)
	instance.Autorelease()
	return instance
}

func (oc _OrderedSetClass) OrderedSetWithSetCopyItems(set ISet, flag bool) OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSetWithSet:copyItems:"), set, flag)
	return rv
}

// Creates and returns an ordered set with the contents of a set, optionally copying the items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543331-orderedsetwithset?language=objc
func OrderedSet_OrderedSetWithSetCopyItems(set ISet, flag bool) OrderedSet {
	return OrderedSetClass.OrderedSetWithSetCopyItems(set, flag)
}

func (o_ OrderedSet) InitWithObject(object objc.IObject) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithObject:"), object)
	return rv
}

// Initializes a new ordered set with the object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1413883-initwithobject?language=objc
func NewOrderedSetWithObject(object objc.IObject) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithObject(object)
	instance.Autorelease()
	return instance
}

func (o_ OrderedSet) InitWithArrayCopyItems(set []objc.IObject, flag bool) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithArray:copyItems:"), set, flag)
	return rv
}

// Initializes a newly allocated set with the objects that are contained in a given array, optionally copying the items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1418006-initwitharray?language=objc
func NewOrderedSetWithArrayCopyItems(set []objc.IObject, flag bool) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithArrayCopyItems(set, flag)
	instance.Autorelease()
	return instance
}

func (oc _OrderedSetClass) OrderedSetWithArray(array []objc.IObject) OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSetWithArray:"), array)
	return rv
}

// Creates and returns a set containing a uniqued collection of the objects contained in a given array. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543310-orderedsetwitharray?language=objc
func OrderedSet_OrderedSetWithArray(array []objc.IObject) OrderedSet {
	return OrderedSetClass.OrderedSetWithArray(array)
}

func (o_ OrderedSet) InitWithSet(set ISet) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithSet:"), set)
	return rv
}

// Initializes a new ordered set with the contents of a set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1416344-initwithset?language=objc
func NewOrderedSetWithSet(set ISet) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithSet(set)
	instance.Autorelease()
	return instance
}

func (o_ OrderedSet) Init() OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("init"))
	return rv
}

func (oc _OrderedSetClass) OrderedSetWithOrderedSet(set IOrderedSet) OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSetWithOrderedSet:"), set)
	return rv
}

// Creates and returns an ordered set containing the objects from another ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543280-orderedsetwithorderedset?language=objc
func OrderedSet_OrderedSetWithOrderedSet(set IOrderedSet) OrderedSet {
	return OrderedSetClass.OrderedSetWithOrderedSet(set)
}

func (oc _OrderedSetClass) OrderedSetWithObject(object objc.IObject) OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSetWithObject:"), object)
	return rv
}

// Creates and returns a ordered set that contains a single given object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543339-orderedsetwithobject?language=objc
func OrderedSet_OrderedSetWithObject(object objc.IObject) OrderedSet {
	return OrderedSetClass.OrderedSetWithObject(object)
}

func (o_ OrderedSet) InitWithOrderedSetRangeCopyItems(set IOrderedSet, range_ Range, flag bool) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithOrderedSet:range:copyItems:"), set, range_, flag)
	return rv
}

// Initializes a new ordered set with the contents of an ordered set, optionally copying the items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1417751-initwithorderedset?language=objc
func NewOrderedSetWithOrderedSetRangeCopyItems(set IOrderedSet, range_ Range, flag bool) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithOrderedSetRangeCopyItems(set, range_, flag)
	instance.Autorelease()
	return instance
}

func (oc _OrderedSetClass) OrderedSet() OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSet"))
	return rv
}

// Creates and returns an empty ordered set [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543313-orderedset?language=objc
func OrderedSet_OrderedSet() OrderedSet {
	return OrderedSetClass.OrderedSet()
}

func (oc _OrderedSetClass) OrderedSetWithOrderedSetRangeCopyItems(set IOrderedSet, range_ Range, flag bool) OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSetWithOrderedSet:range:copyItems:"), set, range_, flag)
	return rv
}

// Creates and returns a new ordered set for a specified range of objects in an ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543292-orderedsetwithorderedset?language=objc
func OrderedSet_OrderedSetWithOrderedSetRangeCopyItems(set IOrderedSet, range_ Range, flag bool) OrderedSet {
	return OrderedSetClass.OrderedSetWithOrderedSetRangeCopyItems(set, range_, flag)
}

func (oc _OrderedSetClass) OrderedSetWithArrayRangeCopyItems(array []objc.IObject, range_ Range, flag bool) OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSetWithArray:range:copyItems:"), array, range_, flag)
	return rv
}

// Creates and returns a new ordered set for a specified range of objects in an array. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543321-orderedsetwitharray?language=objc
func OrderedSet_OrderedSetWithArrayRangeCopyItems(array []objc.IObject, range_ Range, flag bool) OrderedSet {
	return OrderedSetClass.OrderedSetWithArrayRangeCopyItems(array, range_, flag)
}

func (o_ OrderedSet) InitWithOrderedSet(set IOrderedSet) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithOrderedSet:"), set)
	return rv
}

// Initializes a new ordered set with the contents of a set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1412402-initwithorderedset?language=objc
func NewOrderedSetWithOrderedSet(set IOrderedSet) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithOrderedSet(set)
	instance.Autorelease()
	return instance
}

func (o_ OrderedSet) InitWithOrderedSetCopyItems(set IOrderedSet, flag bool) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithOrderedSet:copyItems:"), set, flag)
	return rv
}

// Initializes a new ordered set with the contents of a set, optionally copying the items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1411658-initwithorderedset?language=objc
func NewOrderedSetWithOrderedSetCopyItems(set IOrderedSet, flag bool) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithOrderedSetCopyItems(set, flag)
	instance.Autorelease()
	return instance
}

func (o_ OrderedSet) InitWithArray(array []objc.IObject) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithArray:"), array)
	return rv
}

// Initializes a newly allocated set with the objects that are contained in a given array. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1408623-initwitharray?language=objc
func NewOrderedSetWithArray(array []objc.IObject) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithArray(array)
	instance.Autorelease()
	return instance
}

func (o_ OrderedSet) InitWithArrayRangeCopyItems(set []objc.IObject, range_ Range, flag bool) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithArray:range:copyItems:"), set, range_, flag)
	return rv
}

// Initializes a newly allocated set with the objects that are contained in the specified range of an array, optionally copying the items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1409272-initwitharray?language=objc
func NewOrderedSetWithArrayRangeCopyItems(set []objc.IObject, range_ Range, flag bool) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithArrayRangeCopyItems(set, range_, flag)
	instance.Autorelease()
	return instance
}

func (o_ OrderedSet) InitWithObjects(firstObj objc.IObject, args ...any) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithObjects:"), append([]any{firstObj}, args...)...)
	return rv
}

// Initializes a newly allocated set with members taken from the specified list of objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543287-initwithobjects?language=objc
func NewOrderedSetWithObjects(firstObj objc.IObject, args ...any) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithObjects(firstObj, args...)
	instance.Autorelease()
	return instance
}

func (oc _OrderedSetClass) OrderedSetWithObjects(firstObj objc.IObject, args ...any) OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSetWithObjects:"), append([]any{firstObj}, args...)...)
	return rv
}

// Creates and returns a ordered set containing the objects in a given argument list. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543312-orderedsetwithobjects?language=objc
func OrderedSet_OrderedSetWithObjects(firstObj objc.IObject, args ...any) OrderedSet {
	return OrderedSetClass.OrderedSetWithObjects(firstObj, args...)
}

func (oc _OrderedSetClass) OrderedSetWithSet(set ISet) OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("orderedSetWithSet:"), set)
	return rv
}

// Creates and returns an ordered set with the contents of a set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1543298-orderedsetwithset?language=objc
func OrderedSet_OrderedSetWithSet(set ISet) OrderedSet {
	return OrderedSetClass.OrderedSetWithSet(set)
}

func (o_ OrderedSet) InitWithObjectsCount(objects unsafe.Pointer, cnt uint) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("initWithObjects:count:"), objects, cnt)
	return rv
}

// Initializes a newly allocated set with a specified number of objects from a given C array of objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1411910-initwithobjects?language=objc
func NewOrderedSetWithObjectsCount(objects unsafe.Pointer, cnt uint) OrderedSet {
	instance := OrderedSetClass.Alloc().InitWithObjectsCount(objects, cnt)
	instance.Autorelease()
	return instance
}

func (oc _OrderedSetClass) Alloc() OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("alloc"))
	return rv
}

func (oc _OrderedSetClass) New() OrderedSet {
	rv := objc.Call[OrderedSet](oc, objc.Sel("new"))
	rv.Autorelease()
	return rv
}

func NewOrderedSet() OrderedSet {
	return OrderedSetClass.New()
}

// Returns the object at the specified index of the set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1414253-objectatindexedsubscript?language=objc
func (o_ OrderedSet) ObjectAtIndexedSubscript(idx uint) objc.Object {
	rv := objc.Call[objc.Object](o_, objc.Sel("objectAtIndexedSubscript:"), idx)
	return rv
}

// Evaluates a given predicate against each object in the receiving ordered set and returns a new ordered set containing the objects for which the predicate returns true. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1415807-filteredorderedsetusingpredicate?language=objc
func (o_ OrderedSet) FilteredOrderedSetUsingPredicate(p IPredicate) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("filteredOrderedSetUsingPredicate:"), p)
	return rv
}

// Compares the receiving ordered set to another ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1408049-isequaltoorderedset?language=objc
func (o_ OrderedSet) IsEqualToOrderedSet(other IOrderedSet) bool {
	rv := objc.Call[bool](o_, objc.Sel("isEqualToOrderedSet:"), other)
	return rv
}

// Returns a string that represents the contents of the ordered set, formatted as a property list. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1417325-descriptionwithlocale?language=objc
func (o_ OrderedSet) DescriptionWithLocale(locale objc.IObject) string {
	rv := objc.Call[string](o_, objc.Sel("descriptionWithLocale:"), locale)
	return rv
}

// Creates a new ordered set by applying a difference object to an existing ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/3152198-orderedsetbyapplyingdifference?language=objc
func (o_ OrderedSet) OrderedSetByApplyingDifference(difference IOrderedCollectionDifference) OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("orderedSetByApplyingDifference:"), difference)
	return rv
}

// Invokes setValue:forKey: on each of the receiver's members using the specified value and key [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1413118-setvalue?language=objc
func (o_ OrderedSet) SetValueForKey(value objc.IObject, key string) {
	objc.Call[objc.Void](o_, objc.Sel("setValue:forKey:"), value, key)
}

// Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1411496-issubsetoforderedset?language=objc
func (o_ OrderedSet) IsSubsetOfOrderedSet(other IOrderedSet) bool {
	rv := objc.Call[bool](o_, objc.Sel("isSubsetOfOrderedSet:"), other)
	return rv
}

// Returns the object at the specified index of the set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1414734-objectatindex?language=objc
func (o_ OrderedSet) ObjectAtIndex(idx uint) objc.Object {
	rv := objc.Call[objc.Object](o_, objc.Sel("objectAtIndex:"), idx)
	return rv
}

// Executes a given block using the objects in the ordered set at the specified indexes. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1412332-enumerateobjectsatindexes?language=objc
func (o_ OrderedSet) EnumerateObjectsAtIndexesOptionsUsingBlock(s IIndexSet, opts EnumerationOptions, block func(obj objc.Object, idx uint, stop *bool)) {
	objc.Call[objc.Void](o_, objc.Sel("enumerateObjectsAtIndexes:options:usingBlock:"), s, opts, block)
}

// Returns a string that represents the contents of the ordered set, formatted as a property list. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1416761-descriptionwithlocale?language=objc
func (o_ OrderedSet) DescriptionWithLocaleIndent(locale objc.IObject, level uint) string {
	rv := objc.Call[string](o_, objc.Sel("descriptionWithLocale:indent:"), locale, level)
	return rv
}

// Copies the objects contained in the ordered set that fall within the specified range to objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1411401-getobjects?language=objc
func (o_ OrderedSet) GetObjectsRange(objects unsafe.Pointer, range_ Range) {
	objc.Call[objc.Void](o_, objc.Sel("getObjects:range:"), objects, range_)
}

// Returns the index of the object in the ordered set that passes a test in a given block. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1413003-indexofobjectpassingtest?language=objc
func (o_ OrderedSet) IndexOfObjectPassingTest(predicate func(obj objc.Object, idx uint, stop *bool) bool) uint {
	rv := objc.Call[uint](o_, objc.Sel("indexOfObjectPassingTest:"), predicate)
	return rv
}

// Returns a Boolean value that indicates whether a given object is present in the ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1408681-containsobject?language=objc
func (o_ OrderedSet) ContainsObject(object objc.IObject) bool {
	rv := objc.Call[bool](o_, objc.Sel("containsObject:"), object)
	return rv
}

// Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1413586-indexesofobjectsatindexes?language=objc
func (o_ OrderedSet) IndexesOfObjectsAtIndexesOptionsPassingTest(s IIndexSet, opts EnumerationOptions, predicate func(obj objc.Object, idx uint, stop *bool) bool) IndexSet {
	rv := objc.Call[IndexSet](o_, objc.Sel("indexesOfObjectsAtIndexes:options:passingTest:"), s, opts, predicate)
	return rv
}

// Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1418464-issubsetofset?language=objc
func (o_ OrderedSet) IsSubsetOfSet(set ISet) bool {
	rv := objc.Call[bool](o_, objc.Sel("isSubsetOfSet:"), set)
	return rv
}

// Returns an enumerator object that lets you access each object in the ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1409430-objectenumerator?language=objc
func (o_ OrderedSet) ObjectEnumerator() Enumerator {
	rv := objc.Call[Enumerator](o_, objc.Sel("objectEnumerator"))
	return rv
}

// Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1414364-intersectsorderedset?language=objc
func (o_ OrderedSet) IntersectsOrderedSet(other IOrderedSet) bool {
	rv := objc.Call[bool](o_, objc.Sel("intersectsOrderedSet:"), other)
	return rv
}

// Executes a given block using each object in the ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1413531-enumerateobjectsusingblock?language=objc
func (o_ OrderedSet) EnumerateObjectsUsingBlock(block func(obj objc.Object, idx uint, stop *bool)) {
	objc.Call[objc.Void](o_, objc.Sel("enumerateObjectsUsingBlock:"), block)
}

// Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1408625-intersectsset?language=objc
func (o_ OrderedSet) IntersectsSet(set ISet) bool {
	rv := objc.Call[bool](o_, objc.Sel("intersectsSet:"), set)
	return rv
}

// Compares two ordered sets to create a difference object that represents the changes between them. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/3152195-differencefromorderedset?language=objc
func (o_ OrderedSet) DifferenceFromOrderedSet(other IOrderedSet) OrderedCollectionDifference {
	rv := objc.Call[OrderedCollectionDifference](o_, objc.Sel("differenceFromOrderedSet:"), other)
	return rv
}

// Returns the index, within a specified range, of an object compared with elements in the ordered set using a given NSComparator block. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1417701-indexofobject?language=objc
func (o_ OrderedSet) IndexOfObjectInSortedRangeOptionsUsingComparator(object objc.IObject, range_ Range, opts BinarySearchingOptions, cmp Comparator) uint {
	rv := objc.Call[uint](o_, objc.Sel("indexOfObject:inSortedRange:options:usingComparator:"), object, range_, opts, cmp)
	return rv
}

// Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1417531-indexofobjectatindexes?language=objc
func (o_ OrderedSet) IndexOfObjectAtIndexesOptionsPassingTest(s IIndexSet, opts EnumerationOptions, predicate func(obj objc.Object, idx uint, stop *bool) bool) uint {
	rv := objc.Call[uint](o_, objc.Sel("indexOfObjectAtIndexes:options:passingTest:"), s, opts, predicate)
	return rv
}

// Compares two ordered sets, with options, to create a difference object that represents the changes between them. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/3152196-differencefromorderedset?language=objc
func (o_ OrderedSet) DifferenceFromOrderedSetWithOptions(other IOrderedSet, options OrderedCollectionDifferenceCalculationOptions) OrderedCollectionDifference {
	rv := objc.Call[OrderedCollectionDifference](o_, objc.Sel("differenceFromOrderedSet:withOptions:"), other, options)
	return rv
}

// Returns an array that lists the receiving ordered set’s elements in ascending order, as determined by the comparison method specified by a given NSComparator block. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1414806-sortedarraywithoptions?language=objc
func (o_ OrderedSet) SortedArrayWithOptionsUsingComparator(opts SortOptions, cmptr Comparator) []objc.Object {
	rv := objc.Call[[]objc.Object](o_, objc.Sel("sortedArrayWithOptions:usingComparator:"), opts, cmptr)
	return rv
}

// Raises an exception. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1410496-removeobserver?language=objc
func (o_ OrderedSet) RemoveObserverForKeyPathContext(observer objc.IObject, keyPath string, context unsafe.Pointer) {
	objc.Call[objc.Void](o_, objc.Sel("removeObserver:forKeyPath:context:"), observer, keyPath, context)
}

// Returns an enumerator object that lets you access each object in the ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1407607-reverseobjectenumerator?language=objc
func (o_ OrderedSet) ReverseObjectEnumerator() Enumerator {
	rv := objc.Call[Enumerator](o_, objc.Sel("reverseObjectEnumerator"))
	return rv
}

// Returns the index of the specified object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1411856-indexofobject?language=objc
func (o_ OrderedSet) IndexOfObject(object objc.IObject) uint {
	rv := objc.Call[uint](o_, objc.Sel("indexOfObject:"), object)
	return rv
}

// Returns an array of the ordered set’s elements sorted as specified by a given array of sort descriptors. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1409953-sortedarrayusingdescriptors?language=objc
func (o_ OrderedSet) SortedArrayUsingDescriptors(sortDescriptors []ISortDescriptor) []objc.Object {
	rv := objc.Call[[]objc.Object](o_, objc.Sel("sortedArrayUsingDescriptors:"), sortDescriptors)
	return rv
}

// Returns an array that lists the receiving ordered set’s elements in ascending order, as determined by the comparison method specified by a given NSComparator block [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1413383-sortedarrayusingcomparator?language=objc
func (o_ OrderedSet) SortedArrayUsingComparator(cmptr Comparator) []objc.Object {
	rv := objc.Call[[]objc.Object](o_, objc.Sel("sortedArrayUsingComparator:"), cmptr)
	return rv
}

// Returns the objects in the ordered set at the specified indexes. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1414943-objectsatindexes?language=objc
func (o_ OrderedSet) ObjectsAtIndexes(indexes IIndexSet) []objc.Object {
	rv := objc.Call[[]objc.Object](o_, objc.Sel("objectsAtIndexes:"), indexes)
	return rv
}

// Compares two ordered sets, using the provided block and with options, to create a difference object that represents the changes between them. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/3152197-differencefromorderedset?language=objc
func (o_ OrderedSet) DifferenceFromOrderedSetWithOptionsUsingEquivalenceTest(other IOrderedSet, options OrderedCollectionDifferenceCalculationOptions, block func(obj1 objc.Object, obj2 objc.Object) bool) OrderedCollectionDifference {
	rv := objc.Call[OrderedCollectionDifference](o_, objc.Sel("differenceFromOrderedSet:withOptions:usingEquivalenceTest:"), other, options, block)
	return rv
}

// Raises an exception. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1412955-removeobserver?language=objc
func (o_ OrderedSet) RemoveObserverForKeyPath(observer objc.IObject, keyPath string) {
	objc.Call[objc.Void](o_, objc.Sel("removeObserver:forKeyPath:"), observer, keyPath)
}

// Executes a given block using each object in the set, using the specified enumeration options. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1409354-enumerateobjectswithoptions?language=objc
func (o_ OrderedSet) EnumerateObjectsWithOptionsUsingBlock(opts EnumerationOptions, block func(obj objc.Object, idx uint, stop *bool)) {
	objc.Call[objc.Void](o_, objc.Sel("enumerateObjectsWithOptions:usingBlock:"), opts, block)
}

// Raises an exception. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1408740-addobserver?language=objc
func (o_ OrderedSet) AddObserverForKeyPathOptionsContext(observer objc.IObject, keyPath string, options KeyValueObservingOptions, context unsafe.Pointer) {
	objc.Call[objc.Void](o_, objc.Sel("addObserver:forKeyPath:options:context:"), observer, keyPath, options, context)
}

// Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1408700-indexofobjectwithoptions?language=objc
func (o_ OrderedSet) IndexOfObjectWithOptionsPassingTest(opts EnumerationOptions, predicate func(obj objc.Object, idx uint, stop *bool) bool) uint {
	rv := objc.Call[uint](o_, objc.Sel("indexOfObjectWithOptions:passingTest:"), opts, predicate)
	return rv
}

// Returns an ordered set containing the results of invoking valueForKey: using key on each of the ordered set’s objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1409378-valueforkey?language=objc
func (o_ OrderedSet) ValueForKey(key string) objc.Object {
	rv := objc.Call[objc.Object](o_, objc.Sel("valueForKey:"), key)
	return rv
}

// Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1415944-indexesofobjectswithoptions?language=objc
func (o_ OrderedSet) IndexesOfObjectsWithOptionsPassingTest(opts EnumerationOptions, predicate func(obj objc.Object, idx uint, stop *bool) bool) IndexSet {
	rv := objc.Call[IndexSet](o_, objc.Sel("indexesOfObjectsWithOptions:passingTest:"), opts, predicate)
	return rv
}

// Returns the index of the object in the ordered set that passes a test in a given block. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1411331-indexesofobjectspassingtest?language=objc
func (o_ OrderedSet) IndexesOfObjectsPassingTest(predicate func(obj objc.Object, idx uint, stop *bool) bool) IndexSet {
	rv := objc.Call[IndexSet](o_, objc.Sel("indexesOfObjectsPassingTest:"), predicate)
	return rv
}

// The number of members in the set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1410106-count?language=objc
func (o_ OrderedSet) Count() uint {
	rv := objc.Call[uint](o_, objc.Sel("count"))
	return rv
}

// A representation of the ordered set as an array. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1411531-array?language=objc
func (o_ OrderedSet) Array() []objc.Object {
	rv := objc.Call[[]objc.Object](o_, objc.Sel("array"))
	return rv
}

// A string that represents the contents of the ordered set, formatted as a property list. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1415872-description?language=objc
func (o_ OrderedSet) Description() string {
	rv := objc.Call[string](o_, objc.Sel("description"))
	return rv
}

// The last object in the ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1409143-lastobject?language=objc
func (o_ OrderedSet) LastObject() objc.Object {
	rv := objc.Call[objc.Object](o_, objc.Sel("lastObject"))
	return rv
}

// A representation of the set containing the contents of the ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1413944-set?language=objc
func (o_ OrderedSet) Set() Set {
	rv := objc.Call[Set](o_, objc.Sel("set"))
	return rv
}

// An ordered set in the reverse order. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1411022-reversedorderedset?language=objc
func (o_ OrderedSet) ReversedOrderedSet() OrderedSet {
	rv := objc.Call[OrderedSet](o_, objc.Sel("reversedOrderedSet"))
	return rv
}

// The first object in the ordered set. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsorderedset/1409765-firstobject?language=objc
func (o_ OrderedSet) FirstObject() objc.Object {
	rv := objc.Call[objc.Object](o_, objc.Sel("firstObject"))
	return rv
}
