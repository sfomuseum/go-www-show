// Code generated by DarwinKit. DO NOT EDIT.

package foundation

import (
	"unsafe"

	"github.com/progrium/darwinkit/objc"
)

// The class instance for the [FileCoordinator] class.
var FileCoordinatorClass = _FileCoordinatorClass{objc.GetClass("NSFileCoordinator")}

type _FileCoordinatorClass struct {
	objc.Class
}

// An interface definition for the [FileCoordinator] class.
type IFileCoordinator interface {
	objc.IObject
	CoordinateWritingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(url1 IURL, options1 FileCoordinatorWritingOptions, url2 IURL, options2 FileCoordinatorWritingOptions, outError unsafe.Pointer, writer func(newURL1 URL, newURL2 URL))
	ItemAtURLDidChangeUbiquityAttributes(url IURL, attributes ISet)
	ItemAtURLWillMoveToURL(oldURL IURL, newURL IURL)
	Cancel()
	CoordinateReadingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(readingURL IURL, readingOptions FileCoordinatorReadingOptions, writingURL IURL, writingOptions FileCoordinatorWritingOptions, outError unsafe.Pointer, readerWriter func(newReadingURL URL, newWritingURL URL))
	PrepareForReadingItemsAtURLsOptionsWritingItemsAtURLsOptionsErrorByAccessor(readingURLs []IURL, readingOptions FileCoordinatorReadingOptions, writingURLs []IURL, writingOptions FileCoordinatorWritingOptions, outError unsafe.Pointer, batchAccessor func(arg0 func()))
	CoordinateAccessWithIntentsQueueByAccessor(intents []IFileAccessIntent, queue IOperationQueue, accessor func(error Error))
	ItemAtURLDidMoveToURL(oldURL IURL, newURL IURL)
	CoordinateWritingItemAtURLOptionsErrorByAccessor(url IURL, options FileCoordinatorWritingOptions, outError unsafe.Pointer, writer func(newURL URL))
	CoordinateReadingItemAtURLOptionsErrorByAccessor(url IURL, options FileCoordinatorReadingOptions, outError unsafe.Pointer, reader func(newURL URL))
	PurposeIdentifier() string
	SetPurposeIdentifier(value string)
}

// An object that coordinates the reading and writing of files and directories among file presenters. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator?language=objc
type FileCoordinator struct {
	objc.Object
}

func FileCoordinatorFrom(ptr unsafe.Pointer) FileCoordinator {
	return FileCoordinator{
		Object: objc.ObjectFrom(ptr),
	}
}

func (f_ FileCoordinator) InitWithFilePresenter(filePresenterOrNil PFilePresenter) FileCoordinator {
	po0 := objc.WrapAsProtocol("NSFilePresenter", filePresenterOrNil)
	rv := objc.Call[FileCoordinator](f_, objc.Sel("initWithFilePresenter:"), po0)
	return rv
}

// Initializes and returns a file coordinator object using the specified file presenter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1416795-initwithfilepresenter?language=objc
func NewFileCoordinatorWithFilePresenter(filePresenterOrNil PFilePresenter) FileCoordinator {
	instance := FileCoordinatorClass.Alloc().InitWithFilePresenter(filePresenterOrNil)
	instance.Autorelease()
	return instance
}

func (fc _FileCoordinatorClass) Alloc() FileCoordinator {
	rv := objc.Call[FileCoordinator](fc, objc.Sel("alloc"))
	return rv
}

func (fc _FileCoordinatorClass) New() FileCoordinator {
	rv := objc.Call[FileCoordinator](fc, objc.Sel("new"))
	rv.Autorelease()
	return rv
}

func NewFileCoordinator() FileCoordinator {
	return FileCoordinatorClass.New()
}

func (f_ FileCoordinator) Init() FileCoordinator {
	rv := objc.Call[FileCoordinator](f_, objc.Sel("init"))
	return rv
}

// Initiates a write operation that involves a secondary write operation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1408970-coordinatewritingitematurl?language=objc
func (f_ FileCoordinator) CoordinateWritingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(url1 IURL, options1 FileCoordinatorWritingOptions, url2 IURL, options2 FileCoordinatorWritingOptions, outError unsafe.Pointer, writer func(newURL1 URL, newURL2 URL)) {
	objc.Call[objc.Void](f_, objc.Sel("coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:"), url1, options1, url2, options2, outError, writer)
}

// Tells observing file providers that the item's ubiquity attributes have changed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/2909000-itematurl?language=objc
func (f_ FileCoordinator) ItemAtURLDidChangeUbiquityAttributes(url IURL, attributes ISet) {
	objc.Call[objc.Void](f_, objc.Sel("itemAtURL:didChangeUbiquityAttributes:"), url, attributes)
}

// Registers the specified file presenter object so that it can receive notifications. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1417120-addfilepresenter?language=objc
func (fc _FileCoordinatorClass) AddFilePresenter(filePresenter PFilePresenter) {
	po0 := objc.WrapAsProtocol("NSFilePresenter", filePresenter)
	objc.Call[objc.Void](fc, objc.Sel("addFilePresenter:"), po0)
}

// Registers the specified file presenter object so that it can receive notifications. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1417120-addfilepresenter?language=objc
func FileCoordinator_AddFilePresenter(filePresenter PFilePresenter) {
	FileCoordinatorClass.AddFilePresenter(filePresenter)
}

// Announces that your app is moving a file to a new URL. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1408668-itematurl?language=objc
func (f_ FileCoordinator) ItemAtURLWillMoveToURL(oldURL IURL, newURL IURL) {
	objc.Call[objc.Void](f_, objc.Sel("itemAtURL:willMoveToURL:"), oldURL, newURL)
}

// Cancels any active file coordination calls. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1418457-cancel?language=objc
func (f_ FileCoordinator) Cancel() {
	objc.Call[objc.Void](f_, objc.Sel("cancel"))
}

// Initiates a read operation that contains a follow-up write operation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1413385-coordinatereadingitematurl?language=objc
func (f_ FileCoordinator) CoordinateReadingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(readingURL IURL, readingOptions FileCoordinatorReadingOptions, writingURL IURL, writingOptions FileCoordinatorWritingOptions, outError unsafe.Pointer, readerWriter func(newReadingURL URL, newWritingURL URL)) {
	objc.Call[objc.Void](f_, objc.Sel("coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:"), readingURL, readingOptions, writingURL, writingOptions, outError, readerWriter)
}

// Prepare to read or write from multiple files in a single batch operation. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1412420-prepareforreadingitemsaturls?language=objc
func (f_ FileCoordinator) PrepareForReadingItemsAtURLsOptionsWritingItemsAtURLsOptionsErrorByAccessor(readingURLs []IURL, readingOptions FileCoordinatorReadingOptions, writingURLs []IURL, writingOptions FileCoordinatorWritingOptions, outError unsafe.Pointer, batchAccessor func(arg0 func())) {
	objc.Call[objc.Void](f_, objc.Sel("prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:"), readingURLs, readingOptions, writingURLs, writingOptions, outError, batchAccessor)
}

// Performs a number of coordinated-read or -write operations asynchronously. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1411533-coordinateaccesswithintents?language=objc
func (f_ FileCoordinator) CoordinateAccessWithIntentsQueueByAccessor(intents []IFileAccessIntent, queue IOperationQueue, accessor func(error Error)) {
	objc.Call[objc.Void](f_, objc.Sel("coordinateAccessWithIntents:queue:byAccessor:"), intents, queue, accessor)
}

// Unregisters the specified file presenter object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1414924-removefilepresenter?language=objc
func (fc _FileCoordinatorClass) RemoveFilePresenter(filePresenter PFilePresenter) {
	po0 := objc.WrapAsProtocol("NSFilePresenter", filePresenter)
	objc.Call[objc.Void](fc, objc.Sel("removeFilePresenter:"), po0)
}

// Unregisters the specified file presenter object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1414924-removefilepresenter?language=objc
func FileCoordinator_RemoveFilePresenter(filePresenter PFilePresenter) {
	FileCoordinatorClass.RemoveFilePresenter(filePresenter)
}

// Notifies relevant file presenters that the location of a file or directory changed. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1410328-itematurl?language=objc
func (f_ FileCoordinator) ItemAtURLDidMoveToURL(oldURL IURL, newURL IURL) {
	objc.Call[objc.Void](f_, objc.Sel("itemAtURL:didMoveToURL:"), oldURL, newURL)
}

// Initiates a write operation on a single file or directory using the specified options. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1413344-coordinatewritingitematurl?language=objc
func (f_ FileCoordinator) CoordinateWritingItemAtURLOptionsErrorByAccessor(url IURL, options FileCoordinatorWritingOptions, outError unsafe.Pointer, writer func(newURL URL)) {
	objc.Call[objc.Void](f_, objc.Sel("coordinateWritingItemAtURL:options:error:byAccessor:"), url, options, outError, writer)
}

// Initiates a read operation on a single file or directory using the specified options. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1407416-coordinatereadingitematurl?language=objc
func (f_ FileCoordinator) CoordinateReadingItemAtURLOptionsErrorByAccessor(url IURL, options FileCoordinatorReadingOptions, outError unsafe.Pointer, reader func(newURL URL)) {
	objc.Call[objc.Void](f_, objc.Sel("coordinateReadingItemAtURL:options:error:byAccessor:"), url, options, outError, reader)
}

// Returns an array containing the currently registered file presenter objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1407685-filepresenters?language=objc
func (fc _FileCoordinatorClass) FilePresenters() []FilePresenterObject {
	rv := objc.Call[[]FilePresenterObject](fc, objc.Sel("filePresenters"))
	return rv
}

// Returns an array containing the currently registered file presenter objects. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1407685-filepresenters?language=objc
func FileCoordinator_FilePresenters() []FilePresenterObject {
	return FileCoordinatorClass.FilePresenters()
}

// A string that uniquely identifies the file access that was performed by this file coordinator. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1411868-purposeidentifier?language=objc
func (f_ FileCoordinator) PurposeIdentifier() string {
	rv := objc.Call[string](f_, objc.Sel("purposeIdentifier"))
	return rv
}

// A string that uniquely identifies the file access that was performed by this file coordinator. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsfilecoordinator/1411868-purposeidentifier?language=objc
func (f_ FileCoordinator) SetPurposeIdentifier(value string) {
	objc.Call[objc.Void](f_, objc.Sel("setPurposeIdentifier:"), value)
}
