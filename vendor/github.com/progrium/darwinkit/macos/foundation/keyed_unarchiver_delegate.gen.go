// Code generated by DarwinKit. DO NOT EDIT.

package foundation

import (
	"github.com/progrium/darwinkit/objc"
)

// The optional methods implemented by the delegate of a keyed unarchiver. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate?language=objc
type PKeyedUnarchiverDelegate interface {
	// optional
	UnarchiverDidFinish(unarchiver KeyedUnarchiver)
	HasUnarchiverDidFinish() bool

	// optional
	UnarchiverCannotDecodeObjectOfClassNameOriginalClasses(unarchiver KeyedUnarchiver, name string, classNames []string) objc.Class
	HasUnarchiverCannotDecodeObjectOfClassNameOriginalClasses() bool

	// optional
	UnarchiverWillFinish(unarchiver KeyedUnarchiver)
	HasUnarchiverWillFinish() bool

	// optional
	UnarchiverDidDecodeObject(unarchiver KeyedUnarchiver, object objc.Object) objc.Object
	HasUnarchiverDidDecodeObject() bool

	// optional
	UnarchiverWillReplaceObjectWithObject(unarchiver KeyedUnarchiver, object objc.Object, newObject objc.Object)
	HasUnarchiverWillReplaceObjectWithObject() bool
}

// A delegate implementation builder for the [PKeyedUnarchiverDelegate] protocol.
type KeyedUnarchiverDelegate struct {
	_UnarchiverDidFinish                                    func(unarchiver KeyedUnarchiver)
	_UnarchiverCannotDecodeObjectOfClassNameOriginalClasses func(unarchiver KeyedUnarchiver, name string, classNames []string) objc.Class
	_UnarchiverWillFinish                                   func(unarchiver KeyedUnarchiver)
	_UnarchiverDidDecodeObject                              func(unarchiver KeyedUnarchiver, object objc.Object) objc.Object
	_UnarchiverWillReplaceObjectWithObject                  func(unarchiver KeyedUnarchiver, object objc.Object, newObject objc.Object)
}

func (di *KeyedUnarchiverDelegate) HasUnarchiverDidFinish() bool {
	return di._UnarchiverDidFinish != nil
}

// Notifies the delegate that decoding has finished. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1418067-unarchiverdidfinish?language=objc
func (di *KeyedUnarchiverDelegate) SetUnarchiverDidFinish(f func(unarchiver KeyedUnarchiver)) {
	di._UnarchiverDidFinish = f
}

// Notifies the delegate that decoding has finished. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1418067-unarchiverdidfinish?language=objc
func (di *KeyedUnarchiverDelegate) UnarchiverDidFinish(unarchiver KeyedUnarchiver) {
	di._UnarchiverDidFinish(unarchiver)
}
func (di *KeyedUnarchiverDelegate) HasUnarchiverCannotDecodeObjectOfClassNameOriginalClasses() bool {
	return di._UnarchiverCannotDecodeObjectOfClassNameOriginalClasses != nil
}

// Informs the delegate that the class with a given name is not available during decoding. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1409948-unarchiver?language=objc
func (di *KeyedUnarchiverDelegate) SetUnarchiverCannotDecodeObjectOfClassNameOriginalClasses(f func(unarchiver KeyedUnarchiver, name string, classNames []string) objc.Class) {
	di._UnarchiverCannotDecodeObjectOfClassNameOriginalClasses = f
}

// Informs the delegate that the class with a given name is not available during decoding. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1409948-unarchiver?language=objc
func (di *KeyedUnarchiverDelegate) UnarchiverCannotDecodeObjectOfClassNameOriginalClasses(unarchiver KeyedUnarchiver, name string, classNames []string) objc.Class {
	return di._UnarchiverCannotDecodeObjectOfClassNameOriginalClasses(unarchiver, name, classNames)
}
func (di *KeyedUnarchiverDelegate) HasUnarchiverWillFinish() bool {
	return di._UnarchiverWillFinish != nil
}

// Notifies the delegate that decoding is about to finish. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1415305-unarchiverwillfinish?language=objc
func (di *KeyedUnarchiverDelegate) SetUnarchiverWillFinish(f func(unarchiver KeyedUnarchiver)) {
	di._UnarchiverWillFinish = f
}

// Notifies the delegate that decoding is about to finish. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1415305-unarchiverwillfinish?language=objc
func (di *KeyedUnarchiverDelegate) UnarchiverWillFinish(unarchiver KeyedUnarchiver) {
	di._UnarchiverWillFinish(unarchiver)
}
func (di *KeyedUnarchiverDelegate) HasUnarchiverDidDecodeObject() bool {
	return di._UnarchiverDidDecodeObject != nil
}

// Informs the delegate that a given object has been decoded. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1414187-unarchiver?language=objc
func (di *KeyedUnarchiverDelegate) SetUnarchiverDidDecodeObject(f func(unarchiver KeyedUnarchiver, object objc.Object) objc.Object) {
	di._UnarchiverDidDecodeObject = f
}

// Informs the delegate that a given object has been decoded. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1414187-unarchiver?language=objc
func (di *KeyedUnarchiverDelegate) UnarchiverDidDecodeObject(unarchiver KeyedUnarchiver, object objc.Object) objc.Object {
	return di._UnarchiverDidDecodeObject(unarchiver, object)
}
func (di *KeyedUnarchiverDelegate) HasUnarchiverWillReplaceObjectWithObject() bool {
	return di._UnarchiverWillReplaceObjectWithObject != nil
}

// Informs the delegate that one object is being substituted for another. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1413012-unarchiver?language=objc
func (di *KeyedUnarchiverDelegate) SetUnarchiverWillReplaceObjectWithObject(f func(unarchiver KeyedUnarchiver, object objc.Object, newObject objc.Object)) {
	di._UnarchiverWillReplaceObjectWithObject = f
}

// Informs the delegate that one object is being substituted for another. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1413012-unarchiver?language=objc
func (di *KeyedUnarchiverDelegate) UnarchiverWillReplaceObjectWithObject(unarchiver KeyedUnarchiver, object objc.Object, newObject objc.Object) {
	di._UnarchiverWillReplaceObjectWithObject(unarchiver, object, newObject)
}

// ensure impl type implements protocol interface
var _ PKeyedUnarchiverDelegate = (*KeyedUnarchiverDelegateObject)(nil)

// A concrete type for the [PKeyedUnarchiverDelegate] protocol.
type KeyedUnarchiverDelegateObject struct {
	objc.Object
}

func (k_ KeyedUnarchiverDelegateObject) HasUnarchiverDidFinish() bool {
	return k_.RespondsToSelector(objc.Sel("unarchiverDidFinish:"))
}

// Notifies the delegate that decoding has finished. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1418067-unarchiverdidfinish?language=objc
func (k_ KeyedUnarchiverDelegateObject) UnarchiverDidFinish(unarchiver KeyedUnarchiver) {
	objc.Call[objc.Void](k_, objc.Sel("unarchiverDidFinish:"), unarchiver)
}

func (k_ KeyedUnarchiverDelegateObject) HasUnarchiverCannotDecodeObjectOfClassNameOriginalClasses() bool {
	return k_.RespondsToSelector(objc.Sel("unarchiver:cannotDecodeObjectOfClassName:originalClasses:"))
}

// Informs the delegate that the class with a given name is not available during decoding. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1409948-unarchiver?language=objc
func (k_ KeyedUnarchiverDelegateObject) UnarchiverCannotDecodeObjectOfClassNameOriginalClasses(unarchiver KeyedUnarchiver, name string, classNames []string) objc.Class {
	rv := objc.Call[objc.Class](k_, objc.Sel("unarchiver:cannotDecodeObjectOfClassName:originalClasses:"), unarchiver, name, classNames)
	return rv
}

func (k_ KeyedUnarchiverDelegateObject) HasUnarchiverWillFinish() bool {
	return k_.RespondsToSelector(objc.Sel("unarchiverWillFinish:"))
}

// Notifies the delegate that decoding is about to finish. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1415305-unarchiverwillfinish?language=objc
func (k_ KeyedUnarchiverDelegateObject) UnarchiverWillFinish(unarchiver KeyedUnarchiver) {
	objc.Call[objc.Void](k_, objc.Sel("unarchiverWillFinish:"), unarchiver)
}

func (k_ KeyedUnarchiverDelegateObject) HasUnarchiverDidDecodeObject() bool {
	return k_.RespondsToSelector(objc.Sel("unarchiver:didDecodeObject:"))
}

// Informs the delegate that a given object has been decoded. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1414187-unarchiver?language=objc
func (k_ KeyedUnarchiverDelegateObject) UnarchiverDidDecodeObject(unarchiver KeyedUnarchiver, object objc.Object) objc.Object {
	rv := objc.Call[objc.Object](k_, objc.Sel("unarchiver:didDecodeObject:"), unarchiver, object)
	return rv
}

func (k_ KeyedUnarchiverDelegateObject) HasUnarchiverWillReplaceObjectWithObject() bool {
	return k_.RespondsToSelector(objc.Sel("unarchiver:willReplaceObject:withObject:"))
}

// Informs the delegate that one object is being substituted for another. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nskeyedunarchiverdelegate/1413012-unarchiver?language=objc
func (k_ KeyedUnarchiverDelegateObject) UnarchiverWillReplaceObjectWithObject(unarchiver KeyedUnarchiver, object objc.Object, newObject objc.Object) {
	objc.Call[objc.Void](k_, objc.Sel("unarchiver:willReplaceObject:withObject:"), unarchiver, object, newObject)
}
